import{_ as i,c as a,a as n,o as l}from"./app-BYecpAAQ.js";const e={};function h(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>作为C++程序员，优化是我们绝对绕不开的话题之一，一般来说，优化手段总是因地制宜的，一个优秀的程序员能够从架构、算法、数据结构、编译器优化等多个角度出发，找到最合适的优化方案，从而提升程序的运行效率。</p><p>不过，即便优化的手段如此丰富，也存在着一些适用于大部分场景、屡试不爽的“万金油”，在C++中，最常见的便是<strong>函数内联</strong>，其适用于几乎任何的现代C++程序，并且无需对程序进行复杂的修改。</p><p>本文将重点介绍函数内联和其误区。</p><blockquote><p>注，本文涉及到对汇编代码的解析，所使用的环境是<code>x86_64-linux</code>，编译器是<code>GCC 14.3.0</code>。</p></blockquote><h2 id="inline-长久的误会" tabindex="-1"><a class="header-anchor" href="#inline-长久的误会"><span><code>inline</code>：长久的误会</span></a></h2><p>很多人，包括笔者，长久以来都觉得<code>inline</code>关键字的功能是进行内联优化，但这种理解是完全错误的，参考<code>cppreference</code>的描述，一个被标记为<code>inline</code>的函数，其符合以下特点：</p><ul><li>函数必须在当前编译单元中有定义。</li><li>如果该函数被声明为外部链接，它在每个编译单元中的声明和定义都必须一致。</li><li>如果该函数被声明为外部链接，所有编译单元中的该函数都必须声明为<code>inline</code>。</li><li>如果该函数被声明为外部链接，它在每个编译单元中的地址必须相同。</li></ul><p>简单来说，<code>inline</code>关键字的目的是告诉编译器，出现在每个编译单元中的该函数都指向同一个函数，而不是每个编译单元都生成一份函数的拷贝，从而避免函数的重复定义。</p><p>更直观的说法，我们以前在头文件中<strong>定义</strong>的函数如果不声明为<code>static</code>，那么每个源文件都会生成一份函数的拷贝，从而造成重复定义的错误，但如果声明为<code>static</code>，则会导致一定程度上的二进制膨胀，而<code>inline</code>关键字则可以避免这种情况，它告诉编译器，每个编译单元中的该函数都指向同一个函数，从而避免重复定义和二进制膨胀。</p><p>在<code>c++17</code>后，<code>inline</code>关键字也可以用于变量，其语义没有变化。</p><p>符号在以下情况下是隐式<code>inline</code>的：</p><ul><li><code>class</code>内的成员函数</li><li><code>constexpr</code>修饰的函数（<code>c++11</code>后）</li><li><code>consteval</code>修饰的函数（<code>c++20</code>后）</li><li><code>constexpr</code>修饰的类静态成员变量（<code>c++17</code>后）</li></ul><blockquote><p><code>inline</code>的语义是“允许重定义”</p></blockquote><p>我们可以透过汇编来理解<code>inline</code>的原理：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">inline</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> int</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">add</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> b)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">+</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> b;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数生成的汇编可能是（笔者清理了一些无关紧要的信息）：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-asm"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .weak   _Z3addii</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .type   _Z3addii, @function</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">_Z3addii:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">LFB0:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        pushq   %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        movq</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rsp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">edi</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, -</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">4</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(%</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">esi</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, -</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(%</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    -</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">4</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(%</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">), %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">edx</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    -</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(%</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">), %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">eax</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        addl    %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">edx</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">eax</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        popq    %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        ret</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">LFE0:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .size   _Z3addii, .-_Z3addii</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>inline</code>关键字修饰的函数，在生成汇编时加入了<code>.weak</code>伪指令，该指令的作用是在链接时，如果该符号没有定义，则使用当前代码段，否则舍弃该代码段，借此实现了“允许重定义”的语义。</p><blockquote><p><code>__attribute__((weak))</code>也是使用<code>.weak</code>伪指令实现的</p></blockquote><h2 id="attribute-always-inline-真正的内联优化" tabindex="-1"><a class="header-anchor" href="#attribute-always-inline-真正的内联优化"><span><code>__attribute__((always_inline))</code>：真正的内联优化</span></a></h2><blockquote><p>我们只讨论支持GNU拓展的编译器，如GCC</p></blockquote><p><code>__attribute__((always_inline))</code>是GCC编译器提供的拓展关键字，其作用是告诉编译器，该函数必须内联，内联函数必须声明为<code>inline</code>，否则编译器会警告，因此我们经常会在代码中看到如下宏：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> ALWAYS_INLINE</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> __attribute__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((always_inline)) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">inline</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们编写一个简单的例子：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#include</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">inline</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> __attribute__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((always_inline)) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">add</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> b)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">+</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> b;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%d</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">add</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">));</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该程序生成的汇编如下：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-asm"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .file   &quot;hello.alwaysinline.cpp&quot;</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        .text</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">section        .rodata</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">LC0:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .string &quot;%d&quot;</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        .text</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .globl  main</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .type   main, @function</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">main:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">LFB1:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        pushq   %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        movq</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rsp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        subq    </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">$16</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rsp</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">$1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, -</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">4</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(%</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">$2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, -</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(%</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    -</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">4</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(%</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">), %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">edx</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    -</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(%</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">), %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">eax</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        addl    %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">edx</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">eax</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">eax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">esi</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    $.LC0, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">edi</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">$0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">eax</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        call</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    printf</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        movl    </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">$0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, %</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">eax</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        leave</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        ret</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">LFE1:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .size   main, .-main</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .ident  &quot;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">GCC:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (GNU) </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">14.3</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&quot;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .section        .note.GNU-stack,&quot;&quot;,@progbits</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，编译器甚至没有生成<code>add</code>的函数体，而是直接将<code>add</code>的函数体展开到了<code>main</code>函数中，这就是内联优化的效果。</p>`,28)]))}const k=i(e,[["render",h]]),d=JSON.parse('{"path":"/article/u97w6qbk/","title":"C++漫谈-解析函数内联","lang":"zh-CN","frontmatter":{"title":"C++漫谈-解析函数内联","createTime":"2025/07/14 19:02:50","permalink":"/article/u97w6qbk/","tags":["C++","ASM"],"description":"作为C++程序员，优化是我们绝对绕不开的话题之一，一般来说，优化手段总是因地制宜的，一个优秀的程序员能够从架构、算法、数据结构、编译器优化等多个角度出发，找到最合适的优化方案，从而提升程序的运行效率。 不过，即便优化的手段如此丰富，也存在着一些适用于大部分场景、屡试不爽的“万金油”，在C++中，最常见的便是函数内联，其适用于几乎任何的现代C++程序，并...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++漫谈-解析函数内联\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-14T14:13:28.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/u97w6qbk/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"C++漫谈-解析函数内联"}],["meta",{"property":"og:description","content":"作为C++程序员，优化是我们绝对绕不开的话题之一，一般来说，优化手段总是因地制宜的，一个优秀的程序员能够从架构、算法、数据结构、编译器优化等多个角度出发，找到最合适的优化方案，从而提升程序的运行效率。 不过，即便优化的手段如此丰富，也存在着一些适用于大部分场景、屡试不爽的“万金油”，在C++中，最常见的便是函数内联，其适用于几乎任何的现代C++程序，并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T14:13:28.000Z"}],["meta",{"property":"article:tag","content":"ASM"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2025-07-14T14:13:28.000Z"}]]},"readingTime":{"minutes":3.76,"words":1127},"git":{"createdTime":1752502408000,"updatedTime":1752502408000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"01f0b563ae8d11cf075f71e741d1df6c84acf7c1","time":1752502408000,"email":"dessera@qq.com","author":"Dessera","message":"C++漫谈-解析函数内联"}]},"autoDesc":true,"filePathRelative":"C&CPP/C++漫谈-解析函数内联.md","headers":[],"categoryList":[{"id":"135ccb","sort":10006,"name":"C&CPP"}]}');export{k as comp,d as data};
