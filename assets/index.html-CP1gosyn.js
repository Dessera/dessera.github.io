import{_ as s,c as a,a as n,o as l}from"./app-BYecpAAQ.js";const e={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<p><code>Tauri v2</code>发布也有一段时间了，笔者曾多次想在<code>NixOS</code>上复现基于它的开发环境，但苦于不知道其依赖组成（虽然可以通过一些手段获取，但我懒，真的），所以一直没有动手。</p><p>最近正好有了时间，同时也看到<a href="https://tauri.app/" target="_blank" rel="noopener noreferrer">Tauri官网</a>为<code>NixOS</code>编写了一份依赖清单，于是便有了这篇文章。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>本文涉及到的项目使用<code>yarn 4.4.1</code>和<code>rustc 1.84.1</code>编译。</p><h2 id="首先-你得创建项目不是" tabindex="-1"><a class="header-anchor" href="#首先-你得创建项目不是"><span>首先，你得创建项目不是？</span></a></h2><p>要快速创建项目，可以使用<code>nix run</code>或者<code>nix shell</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 进入含有 yarn 的 nix shell</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">nix</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> shell</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> nixpkgs#corepack</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 创建项目</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">yarn</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> create</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> tauri-app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完成后，进入项目目录，我们需要修改<code>yarn</code>版本:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">corepack</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> use</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> yarn@4.4.1</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">   # 使用 yarn 4.4.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以及，编辑<code>.yarnrc.yml</code>，加入以下内容:</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">nodeLinker</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">node-modules</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>笔者自己没有搞明白如何在<code>vite</code>项目中使用<code>PnP</code>，所以这里直接使用<code>node-modules</code>。</p></blockquote><h2 id="打包第一步-前端产物" tabindex="-1"><a class="header-anchor" href="#打包第一步-前端产物"><span>打包第一步，前端产物</span></a></h2><p>我们首先要编写前端产物的构建逻辑，这里推荐<a href="https://github.com/stephank/yarn-plugin-nixify" target="_blank" rel="noopener noreferrer">yarn-plugin-nixify</a></p><p>这个插件在每次运行<code>yarn</code>时，都会生成一份<code>yarn-project.nix</code>文件，该文件定义了一个<code>yarn</code>项目的打包器，可以用于<code>nix</code>构建。</p><p>我们运行:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">yarn</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> plugin</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> import</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> https://raw.githubusercontent.com/stephank/yarn-plugin-nixify/main/dist/yarn-plugin-nixify.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一次运行时，它会生成一份<code>default.nix</code>文件，但我们不使用这份，而是把它写成<code>nix</code>的包函数:</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  callPackage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  nodejs_23</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">let</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  pageTarget</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> =</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    (</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">callPackage</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ./yarn-project.nix</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">      nodejs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">nodejs_23</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    } { </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">./.</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; }).</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">overrideAttrs</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">      (</span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">old</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">        buildPhase</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">          runHook preBuild</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">          yarn build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">          runHook postBuild</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">        &#39;&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">      });</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">in</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pageTarget</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个包函数调用了<code>yarn-project.nix</code>，因为这个文件并不包含默认的<code>buildPhase</code>，所以我们要手动添加<code>buildPhase</code>，这里我们直接调用<code>yarn build</code>。</p><p>接下来我们编写<code>flake.nix</code>文件:</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">url</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;github:nixos/nixpkgs?ref=nixos-unstable&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    flake-parts</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">url</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;github:hercules-ci/flake-parts&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  outputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> =</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      flake-parts</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">      ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    }@</span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">    flake-parts</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">lib</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">mkFlake</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">inherit</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; } {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">      systems</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">        &quot;x86_64-linux&quot;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">        &quot;aarch64-linux&quot;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">        &quot;x86_64-darwin&quot;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">        &quot;aarch64-darwin&quot;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">      ];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">      perSystem</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> =</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        { </span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, ... }:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        let</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">          target</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">callPackage</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ./default.nix</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { };</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        in</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">          packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">            default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">target</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">          };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">          devShells</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">            default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">mkShell</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">              inputsFrom</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [ </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">target</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">              packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">with</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; [</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">                nixd</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">                nixfmt-rfc-style</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">              ];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">          };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用<code>flake-parts</code>来编写<code>flake.nix</code>，在<code>devShell</code>中引用我们刚刚写好的产物。</p><p>运行<code>nix build .</code>，我们可以看到在<code>result/libexec/&lt;项目名&gt;/dist</code>目录下生成了前端产物。</p><h2 id="rust编译" tabindex="-1"><a class="header-anchor" href="#rust编译"><span>Rust编译</span></a></h2><p><code>Rust</code>侧的工作稍微有一些复杂，按照惯例，我们先引用<code>rust-overlay</code>作为<code>rustc</code>和<code>cargo</code>的来源:</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    # ...</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    rust-overlay</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">      url</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;github:oxalica/rust-overlay&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">      inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">follows</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;nixpkgs&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    outputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> =</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      flake-parts</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      rust-overlay</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">      ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    }@</span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">    flake-parts</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">lib</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">mkFlake</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">inherit</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; } {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">      # ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">      perSystem</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> =</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        { </span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">system</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, ... }:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        let</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">          pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">import</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            inherit</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> system</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">            overlays</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [ (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">import</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> rust-overlay</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) ];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">          };</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">          rsPkgDev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">rust-bin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">stable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">latest</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">            extensions</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">              &quot;rust-analyzer&quot;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">              &quot;rust-src&quot;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            ];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">          };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">          # ...</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        in</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">          # ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改<code>default.nix</code>文件，添加依赖项:</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  callPackage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  pkg-config</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,               </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># Tauri nativeBuildInputs</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  gobject-introspection</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  cargo-tauri</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  at-spi2-atk</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,              </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># Tauri buildInputs</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  atkmm</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  cairo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  gdk-pixbuf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  glib</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  gtk3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  harfbuzz</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  librsvg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  libsoup_3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  pango</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  webkitgtk_4_1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  openssl</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  nodejs_23</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  rust-bin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,                 </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># Rust</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  rsPkg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ? </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">rust-bin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">stable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">latest</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">  makeRustPlatform</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">let</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  rustPlatform</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">makeRustPlatform</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    cargo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">rsPkg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    rustc</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">rsPkg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  # pageTarget 同上 ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  tauriTarget</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">rustPlatform</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">buildRustPackage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    pname</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&lt;项目名&gt;&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    version</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&lt;版本号&gt;&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">./src-tauri</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    doCheck</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">false</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    cargoLock</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">      lockFile</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">./src-tauri/Cargo.lock</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">      allowBuiltinFetchGit</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">true</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    unpackPhase</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">      runHook preUnpack</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">      mkdir dist</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">      cp -r </span><span style="--shiki-dark:#C678DD;--shiki-light:#CA1243;">\${</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pageTarget</span><span style="--shiki-dark:#C678DD;--shiki-light:#CA1243;">}</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">/libexec/&lt;项目名&gt;/dist/* dist</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">      cp -r $src/* ./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">      runHook postUnpack</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    &#39;&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    buildPhase</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">      cargo-tauri build --no-bundle --config &#39;{ &quot;build&quot;: { &quot;beforeBuildCommand&quot;: &quot;&quot;, &quot;frontendDist&quot;: &quot;./dist&quot; } }&#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    &#39;&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    installPhase</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">      mkdir -p $out/bin</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">      cp target/release/&lt;项目名&gt; $out/bin</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    &#39;&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    checkPhase</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;&#39;&#39;&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    nativeBuildInputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      pkg-config</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      gobject-introspection</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      rsPkg</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      cargo-tauri</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    ];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    buildInputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      at-spi2-atk</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      atkmm</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      cairo</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      gdk-pixbuf</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      glib</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      gtk3</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      harfbuzz</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      librsvg</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      libsoup_3</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      pango</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      webkitgtk_4_1</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">      openssl</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    ] ++ </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pageTarget</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">buildInputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 把前端依赖也加进来，主要是为了方便构建devShell</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">in</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">tauriTarget</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们一步步拆解该文件:</p><p>在<code>tauriTarget</code>的构建中，我们首先要关注的是<code>nativeBuildInputs</code>和<code>buildInputs</code>，这部分基本来自<a href="https://tauri.app/start/prerequisites/" target="_blank" rel="noopener noreferrer">Tauri Prerequisites</a>，我们直接复制过来即可。</p><blockquote><p>记得把他给的<code>cargo</code>删了</p></blockquote><p>然后是我们重写的几个<code>phase</code>，在<code>unpackPhase</code>中，我们需要把前端产物复制到目前的构建目录里，因此重写为如下脚本:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">runHook</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> preUnpack</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">mkdir</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> dist</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">cp</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -r</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#E45649;"> \${</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">pageTarget</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#E45649;">}</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">/libexec/</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">项目</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">名&gt;</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">/dist/</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">*</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> dist</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">cp</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -r</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;"> $src</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">/</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">*</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">runHook</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> postUnpack</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>因为我们覆盖了<code>unpackPhase</code>，所以源代码的迁移不会默认执行，我们需要手动复制</p></blockquote><p>因为打包<code>tauri</code>项目时，我们的根目录是<code>src-tauri</code>，因此原先在<code>tauri.conf.json</code>中配置的内容有一部分是需要修改的，我们使用<code>cargo-tauri</code>来混入:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">cargo-tauri</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> build</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --no-bundle</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --config</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &#39;{ &quot;build&quot;: { &quot;beforeBuildCommand&quot;: &quot;&quot;, &quot;frontendDist&quot;: &quot;./dist&quot; } }&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们移除<code>beforeBuildCommand</code>，因为这部分我们已经手动执行了，并把<code>frontendDist</code>指向我们刚刚复制的前端产物。</p><p>值得注意的是我们只需要构建二进制，所以传入<code>--no-bundle</code>，禁止<code>cargo-tauri</code>打包<code>deb</code>等文件。</p><p>由于<code>buildRustPackage</code>的默认<code>phase</code>依赖固定的构建路径，我们修改了<code>buildPhase</code>，因此我们还需要重写<code>installPhase</code>和<code>checkPhase</code>，我们只需要复制二进制文件到指定位置即可，因此我们重写为如下脚本:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">mkdir</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -p</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;"> $out</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">/bin</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">cp</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> target/release/</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">项目</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">名&gt; </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">$out</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>写完打包逻辑后，如果直接使用会出依赖问题(找不到<code>rust-tls</code>)，我们需要修改<code>cargo</code>依赖:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-toml"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">tauri</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">version</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;2&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">features</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;native-tls&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">] }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>为<code>tauri</code>开启<code>native-tls</code>特性，这样就可以正常打包了，至此我们的前后端打包均已配置完成。</p><h2 id="devshell" tabindex="-1"><a class="header-anchor" href="#devshell"><span>DevShell</span></a></h2><p>最后我们来构建<code>devShell</code>，因为我们的软件包已经编写完成，我们只要把它加入到<code>devShell</code>即可，我们修改<code>flake.nix</code>文件中的<code>devShells</code>部分:</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">devShells</span><span style="--shiki-dark:#FFFFFF;--shiki-light:white;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">mkShell</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    inputsFrom</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [ (</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">target</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rsPkg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">rsPkgDev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; }) ];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">with</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; [</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">        nixd</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">        nixfmt-rfc-style</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    ];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span><span style="--shiki-dark:#FFFFFF;--shiki-light:white;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在编写软件包时故意留下了<code>rsPkg</code>这个变量，它可以指定我们使用的<code>rust</code>工具链，为了正确启动语言服务器，我们需要开启<code>rust-src</code>和<code>rust-analyzer</code>特性，将我们重写的工具链赋值给<code>rsPkg</code>即可。</p><p>现在，我们就可以使用<code>nix develop</code>进入开发环境了。</p><p>Enjoy 😃</p>`,50)]))}const p=s(e,[["render",t]]),d=JSON.parse('{"path":"/article/qbac9sif/","title":"Nix-打包Tauri应用","lang":"zh-CN","frontmatter":{"title":"Nix-打包Tauri应用","createTime":"2025/02/03 00:54:45","permalink":"/article/qbac9sif/","tags":["Linux","Nix","Flake","Tauri"],"description":"Tauri v2发布也有一段时间了，笔者曾多次想在NixOS上复现基于它的开发环境，但苦于不知道其依赖组成（虽然可以通过一些手段获取，但我懒，真的），所以一直没有动手。 最近正好有了时间，同时也看到Tauri官网为NixOS编写了一份依赖清单，于是便有了这篇文章。 注意事项 本文涉及到的项目使用yarn 4.4.1和rustc 1.84.1编译。 首先...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nix-打包Tauri应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-20T16:09:54.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/qbac9sif/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"Nix-打包Tauri应用"}],["meta",{"property":"og:description","content":"Tauri v2发布也有一段时间了，笔者曾多次想在NixOS上复现基于它的开发环境，但苦于不知道其依赖组成（虽然可以通过一些手段获取，但我懒，真的），所以一直没有动手。 最近正好有了时间，同时也看到Tauri官网为NixOS编写了一份依赖清单，于是便有了这篇文章。 注意事项 本文涉及到的项目使用yarn 4.4.1和rustc 1.84.1编译。 首先..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-20T16:09:54.000Z"}],["meta",{"property":"article:tag","content":"Tauri"}],["meta",{"property":"article:tag","content":"Flake"}],["meta",{"property":"article:tag","content":"Nix"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2025-05-20T16:09:54.000Z"}]]},"readingTime":{"minutes":4.71,"words":1412},"git":{"createdTime":1738555949000,"updatedTime":1747757394000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"c8a4dd6f1ea3a831c30c72f289305bd8faab7b54","time":1747757394000,"email":"dessera@qq.com","author":"Dessera","message":"嵌入式Linux-移植触摸屏"},{"hash":"8aed796d43c1e40b1490e0dd3f4aefb27f1dba91","time":1738555949000,"email":"dessera@qq.com","author":"Dessera","message":"Nix-打包Tauri应用"}]},"autoDesc":true,"filePathRelative":"Nix/Nix-打包Tauri应用.md","headers":[],"categoryList":[{"id":"a5ea3f","sort":10003,"name":"Nix"}]}');export{p as comp,d as data};
