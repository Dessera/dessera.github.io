import{_ as c,c as o,a as d,o as a}from"./app-BYecpAAQ.js";const t={};function l(i,e){return a(),o("div",null,e[0]||(e[0]=[d('<p>软件开发中，我们的每个程序模块都应当遵守一定的规范来保证他们可以正确的使用对方，现在，我们称这个规范为ABI（应用二进制接口），一个ABI规范了诸如数据类型的大小、调用约定、系统调用约定、目标文件的二进制格式等等，我们今天要讨论的就是调用约定部分。</p><h2 id="调用约定" tabindex="-1"><a class="header-anchor" href="#调用约定"><span>调用约定</span></a></h2><p>所谓调用约定，就是约定如下内容如何进行：</p><ul><li>参数和返回值放置的位置（在寄存器中；在调用栈中；两者混合）</li><li>参数传递的顺序（或者单个参数不同部分的顺序）</li><li>调用前设置和调用后清理的工作，在调用者和被调用者之间如何分配</li><li>被调用者可以直接使用哪一个寄存器有时也包括在内。（否则的话被当成ABI的细节）</li><li>哪一个寄存器被当作<code>volatile</code>的或者非<code>volatile</code>的（如果是<code>volatile</code>的，不需要<em>被调用者</em>恢复）</li></ul><p>简单来说，就是调用者和被调用者两方共同约定关于<strong>如何调用函数</strong>的细则。<code>x86</code>架构下，常见的调用约定有<code>stdcall</code>、<code>cdecl</code>、<code>fastcall</code>和<code>thiscall</code>等。</p><h2 id="x86调用约定" tabindex="-1"><a class="header-anchor" href="#x86调用约定"><span>x86调用约定</span></a></h2><h3 id="cdecl" tabindex="-1"><a class="header-anchor" href="#cdecl"><span>cdecl</span></a></h3><p><code>cdecl</code>是<code>x86</code>架构下，C语言的事实调用约定，其细则如下：</p><ul><li>函数实参在线程栈上从右至左依次压栈</li><li>函数结果保存在<code>EAX/AX/AL</code>中</li><li>浮点结果存放在<code>ST0</code>中</li><li>函数名前缀以一个下划线</li><li>调用者负责清理参数栈</li><li>8bits和16bits整形提升为32bits</li><li>受到函数调用影响的寄存器（<code>volatile</code>）：<code>EAX</code>、<code>ECX</code>、<code>EDX</code>、<code>ST0 – ST7</code>、<code>ES</code>、<code>GS</code></li><li>不受函数调用影响的寄存器（<code>non-volatile</code>）：<code>EBX</code>、<code>EBP</code>、<code>ESP</code>、<code>EDI</code>、<code>ESI</code>、<code>CS</code>、<code>DS</code></li></ul><p>不过该约定在实施时产生了细微的不同，Visual C++规定返回值如果是POD值且长度不超过32bits,用<code>EAX</code>传递，长度在33-64bits用<code>EAX:EDX</code>传递，超过64bits或非POD值，调用这会为函数预先分配一个空间，将地址作为隐式参数传递给被调用者；GCC返回值都是由调用者分配空间，并将地址作为隐式参数传递给被调用者。</p><h3 id="stdcall" tabindex="-1"><a class="header-anchor" href="#stdcall"><span>stdcall</span></a></h3><p><code>stdcall</code>是由微软创建的调用约定，是<code>pascal</code>约定和<code>cdecl</code>约定的折衷方案，其与<code>cdecl</code>的主要区别是：</p><ul><li>被调用者负责清理线程栈</li><li>函数名前缀以一个下划线且后缀以一个<code>@</code>和其参数所占的栈空间字节长度</li></ul><h3 id="gcc-fastcall" tabindex="-1"><a class="header-anchor" href="#gcc-fastcall"><span>gcc fastcall</span></a></h3><p>由GCC实现的<code>fastcall</code>约定第一个不超过32bits的参数通过<code>ECX/CX/CL</code>传递，第二个不超过32bits的参数通过<code>EDX/DX/DL</code>传递，其余从右到左压栈。</p><h3 id="thiscall" tabindex="-1"><a class="header-anchor" href="#thiscall"><span>thiscall</span></a></h3><p><code>thiscall</code>是为了实现C++非静态成员函数调用而创造的约定，在GCC中，<code>thiscall</code>与<code>cdecl</code>基本相同，但它会在最后压入<code>this</code>指针，在Visual C++中，<code>this</code>通过<code>ECX</code>传递。</p><h2 id="x86-64调用约定" tabindex="-1"><a class="header-anchor" href="#x86-64调用约定"><span>x86_64调用约定</span></a></h2><p><code>x86_64</code>调用约定得到了一定程度上的统一，有两种主流规则：</p><h3 id="system-v-amd64-abi" tabindex="-1"><a class="header-anchor" href="#system-v-amd64-abi"><span>System V AMD64 ABI</span></a></h3><p>System V AMD64 ABI是大多数非Windows系统使用的ABI方案，其调用约定为：</p><ul><li>前六个整形参数放在<code>RDI</code>、<code>RSI</code>、<code>RDX</code>、<code>RCX</code>、<code>R8</code>和<code>R9</code>中，同时<code>XMM0 - XMM7</code>用于放置浮点变元，对于系统调用，用<code>R10</code>用来替代<code>RCX</code>，其他额外参数入栈</li><li>返回值保存在<code>RAX</code>中（浮点数被保存在<code>XMM0</code>）</li><li>不受函数调用影响的寄存器：<code>RBX</code>, <code>RBP</code>, <code>RSP</code>、<code>R12 - R15</code></li></ul><h3 id="微软x86-64调用约定" tabindex="-1"><a class="header-anchor" href="#微软x86-64调用约定"><span>微软x86_64调用约定</span></a></h3><p>微软x86_64调用约定是Windows使用的调用约定：</p><ul><li>使用<code>RCX</code>、<code>RDX</code>、<code>R8</code>和<code>R9</code>用于函数调用的前四个参数，使用<code>XMM0 - XMM3</code>传递浮点变量，其他参数入栈</li><li>整数返回值放在<code>RAX</code>中，浮点返回值位于<code>XMM0</code></li><li>调用者需要在函数返回地址之上（参数之前）分配一个32字节的影子空间，调用结束后由调用者清理</li></ul>',25)]))}const r=c(t,[["render",l]]),n=JSON.parse('{"path":"/article/r8cbif2a/","title":"C漫谈-调用约定","lang":"zh-CN","frontmatter":{"title":"C漫谈-调用约定","createTime":"2025/08/08 11:51:49","permalink":"/article/r8cbif2a/","tags":["C","C++","ASM"],"description":"软件开发中，我们的每个程序模块都应当遵守一定的规范来保证他们可以正确的使用对方，现在，我们称这个规范为ABI（应用二进制接口），一个ABI规范了诸如数据类型的大小、调用约定、系统调用约定、目标文件的二进制格式等等，我们今天要讨论的就是调用约定部分。 调用约定 所谓调用约定，就是约定如下内容如何进行： 参数和返回值放置的位置（在寄存器中；在调用栈中；两者...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C漫谈-调用约定\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-08T06:29:04.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/r8cbif2a/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"C漫谈-调用约定"}],["meta",{"property":"og:description","content":"软件开发中，我们的每个程序模块都应当遵守一定的规范来保证他们可以正确的使用对方，现在，我们称这个规范为ABI（应用二进制接口），一个ABI规范了诸如数据类型的大小、调用约定、系统调用约定、目标文件的二进制格式等等，我们今天要讨论的就是调用约定部分。 调用约定 所谓调用约定，就是约定如下内容如何进行： 参数和返回值放置的位置（在寄存器中；在调用栈中；两者..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-08T06:29:04.000Z"}],["meta",{"property":"article:tag","content":"ASM"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-08-08T06:29:04.000Z"}]]},"readingTime":{"minutes":3.41,"words":1024},"git":{"createdTime":1754634544000,"updatedTime":1754634544000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"5d23468ec73a36a0a5cd810805df39585c634021","time":1754634544000,"email":"dessera@qq.com","author":"Dessera","message":"漫谈系列"}]},"autoDesc":true,"filePathRelative":"C&CPP/C漫谈-调用约定.md","headers":[],"categoryList":[{"id":"135ccb","sort":10006,"name":"C&CPP"}]}');export{r as comp,n as data};
