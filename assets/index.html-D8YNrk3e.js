import{u as S,f as b,t as m,g as A,h as U,i as F,j as f,k as R,o as u,w as G,c as h,l as k,m as t,d as a,n as y,p as o,q as M,C as q,_ as Q,a as x,b as N}from"./app-BYecpAAQ.js";const T=S("__VUEPRESS_GITHUB_REPO__",{});function C(n,d){const s=b(()=>{const[c="",p=""]=m(n).split("/");return{owner:c,name:p}}),e=b(()=>m(d)??"github"),r=A(null),i=A(!1);async function P(){const{owner:c,name:p}=m(s);if(!c||!p)return;const v=`${e.value==="github"?"":`${e.value}:`}${c}/${p}`,g=T.value[v];if(g?.info?.name&&Date.now()-g.updatedAt<=864e5){r.value=g.info,i.value=!0;return}i.value=!1;try{const l=await fetch(`https://api.pengzhanbo.cn/${e.value}/repo/${c}/${p}`).then(I=>I.json());i.value=!0,l.convertStars=_(l.stars),l.convertForks=_(l.forks),r.value=l,T.value[v]={info:l,updatedAt:Date.now()}}catch(l){i.value=!0,console.error("github repo error:",l)}}return U(s,P,{immediate:!0}),{data:r,loaded:i}}function _(n){return n<1e3?n:`${(n/1e3).toFixed(1)}k`}const D={key:0,class:"vp-repo-card"},w={class:"repo-name"},$={class:"repo-link"},L=["href","title"],E={class:"repo-desc"},O={class:"repo-info"},z={key:0},B=["title"],V=["title"],H=["title"],j=F({__name:"RepoCard",props:{repo:{},fullname:{type:Boolean,default:void 0},provider:{default:"github"}},setup(n){const d=n,{loaded:s,data:e}=C(f(d,"repo"),f(d,"provider"));return(r,i)=>(u(),R(t(q),null,{default:G(()=>[t(s)&&t(e)?.name?(u(),h("div",D,[a("p",w,[a("span",{class:y(`vpi-${r.provider}-repo`)},null,2),a("span",$,[a("a",{href:t(e).url,target:"_blank",rel:"noopener noreferrer",class:"no-icon",title:t(e).fullName},o(r.fullname||t(e).ownerType==="Organization"&&typeof r.fullname>"u"?t(e).fullName:t(e).name),9,L)]),a("span",{class:y(["repo-visibility",{archived:t(e).archived}])},o(t(e).visibility+(t(e).template?" Template":""))+o(t(e).archived?" archive":""),3)]),a("p",E,o(t(e).description),1),a("div",O,[t(e).language?(u(),h("p",z,[a("span",{class:"repo-language",style:M({"background-color":t(e).languageColor})},null,4),a("span",null,o(t(e).language),1)])):k("",!0),a("p",{title:`Github Stars: ${t(e).stars}`},[i[0]||(i[0]=a("span",{class:"vpi-github-star"},null,-1)),a("span",null,o(t(e).convertStars),1)],8,B),a("p",{title:`Github Forks: ${t(e).forks}`},[i[1]||(i[1]=a("span",{class:"vpi-github-fork"},null,-1)),a("span",null,o(t(e).convertForks),1)],8,V),t(e).license?(u(),h("p",{key:1,title:`Github License: ${t(e).license.name}`},[i[2]||(i[2]=a("span",{class:"vpi-github-license"},null,-1)),a("span",null,o(t(e).license.name),1)],8,H)):k("",!0)])])):k("",!0)]),_:1}))}}),Z=Q(j,[["__scopeId","data-v-11c00821"]]),K={__name:"index.html",setup(n){return(d,s)=>(u(),h("div",null,[s[0]||(s[0]=x('<p>笔者最近在编写一个由 Rust 实现的聊天服务器，本意是作为协程应用的练习，在这个过程中收获颇丰，因 此编写一些项目笔记。</p><h2 id="关于-quip" tabindex="-1"><a class="header-anchor" href="#关于-quip"><span>关于 QUIP</span></a></h2><p>QUIP是笔者第一次动手设计一个应用层协议，相比已经成熟的协议，QUIP的简化主要体现在以下几点：</p><ul><li>不实现复杂编码，名义上只支持 UTF-8 （基于Rust String）</li><li>不支持文件传输</li><li>暂不支持复杂的用户验证</li></ul><p>截至笔者撰写本文时， QUIP 已经实现了如下功能：</p><ul><li>基于内存的用户存储后端</li><li>简单（无加密）用户验证</li><li>消息传递和服务器主动推送</li><li>消息缓存</li></ul><p>详情请见：</p>',7)),N(Z,{repo:"Dessera/quip"}),s[1]||(s[1]=x(`<h2 id="参考-imap4-协议框架" tabindex="-1"><a class="header-anchor" href="#参考-imap4-协议框架"><span>参考 IMAP4 协议框架</span></a></h2><p>对于<strong>任何</strong>基于 TCP 的应用层协议来说，我们要解决的第一件事永远都是——如何解决粘包拆包问题，或者说更本质的，我们要保证客户端能够分辨一条完整的响应，服务端能够分辨一条完整的请求。</p><p>除此之外，我们还要求客户端能够对应它发送的请求和服务端返回的响应，这是为了客户端程序能够正确分响应。</p><p>我们可以借鉴 IMAP4 来构建最基本的消息，IMAP4 的请求格式大致如下：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>&lt;TAG&gt; &lt;COMMAND&gt; &lt;ARG1&gt; &lt;ARG2&gt; ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>譬如，对于 IMAP4 来说，一条登录指令应该为如下样式：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>A000 LOGIN &quot;Dessera&quot; &quot;Password&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>发送时，还需要为消息添加<code>\\r\\n</code>作为分隔符，这是为了在发生粘包拆包问题时，我们能够正确的分辨一条消息，同样地，响应也应当添加分隔。</p><p>每一条指令都有一个<code>TAG</code>，这是为了让客户端对应请求与响应，当服务器返回响应时，<code>TAG</code>会作为响应头被加入到响应之中。</p><p>响应的格式有两种（对于 IMAP4 而言则不止如此，但我们这里只做简要介绍）：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>* &lt;STATUS&gt; &lt;MSG&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>&lt;TAG&gt; &lt;STATUS&gt; &lt;MSG&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>比如 IMAP4 可能会返回如下响应：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>* OK Some message</span></span>
<span class="line"><span>A000 AUTHENTICATE XOAUTH2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种响应代表没有对应的请求、或者响应的数据部分，而后者则对应着请求的<code>TAG</code>，一般用来表示请求的响应状态。</p><p>同样地，响应也以<code>\\r\\n</code>结束。</p><p>基于对 IMAP4 的简单理解，我们可以实现一个简单的协议模型。</p><h2 id="quip-基本请求和响应" tabindex="-1"><a class="header-anchor" href="#quip-基本请求和响应"><span>QUIP 基本请求和响应</span></a></h2><p>QUIP 的基本请求和响应格式与 IMAP4 类似，每条消息由若干个 Tokens 组成，Tokens 之间以空格分隔，Token 的格式如下：</p><ul><li>没有空格的纯文本，通过<code>\\</code>转义特殊字符：<code>Login</code>、<code>Hello</code>、<code>Some\\ Message</code>等</li><li>带有引号的文本，内部的空格将被保留，同样可以通过<code>\\</code>进行转义：<code>&quot;Hello \\&quot;world\\&quot;!&quot;</code>等</li></ul><p>请求格式如下，每个尖括号代表一个 Token ：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>&lt;TAG&gt; &lt;COMMAND&gt; &lt;ARG1&gt; &lt;ARG2&gt; ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于 QUIP 来说，所有的参数都是字符串，协议支持的命令如下：</p><ul><li><code>Send</code>：<code>A000 Send Receiver Message</code></li><li><code>Login</code>：<code>A000 Login Username Password</code></li><li><code>Nop</code>：<code>A000 Nop</code></li><li><code>Logout</code>：<code>A000 Logout</code></li></ul><p>响应格式如下：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>&lt;TAG&gt;|* &lt;STATUS&gt; (&lt;MSG&gt;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果没有对应请求则返回<code>*</code>，如果没有消息则不返回，所有响应状态如下：</p><ul><li><code>Recv</code>：<code>* Recv Sender Message</code></li><li><code>Success</code>：<code>A000 Success Message</code>（可能没有消息）</li><li><code>Error</code>：<code>A000 Error ErrorCode</code>（如果命令解析失败则没有<code>TAG</code>）</li></ul>`,29))]))}},X=JSON.parse('{"path":"/article/px5k17km/","title":"项目笔记-QUIP聊天服务器01-协议设计","lang":"zh-CN","frontmatter":{"title":"项目笔记-QUIP聊天服务器01-协议设计","createTime":"2025/09/28 21:58:58","permalink":"/article/px5k17km/","tags":["计算机网络","Rust","草稿"],"description":"笔者最近在编写一个由 Rust 实现的聊天服务器，本意是作为协程应用的练习，在这个过程中收获颇丰，因 此编写一些项目笔记。 关于 QUIP QUIP是笔者第一次动手设计一个应用层协议，相比已经成熟的协议，QUIP的简化主要体现在以下几点： 不实现复杂编码，名义上只支持 UTF-8 （基于Rust String） 不支持文件传输 暂不支持复杂的用户验证 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目笔记-QUIP聊天服务器01-协议设计\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-08T11:03:23.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/px5k17km/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"项目笔记-QUIP聊天服务器01-协议设计"}],["meta",{"property":"og:description","content":"笔者最近在编写一个由 Rust 实现的聊天服务器，本意是作为协程应用的练习，在这个过程中收获颇丰，因 此编写一些项目笔记。 关于 QUIP QUIP是笔者第一次动手设计一个应用层协议，相比已经成熟的协议，QUIP的简化主要体现在以下几点： 不实现复杂编码，名义上只支持 UTF-8 （基于Rust String） 不支持文件传输 暂不支持复杂的用户验证 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-08T11:03:23.000Z"}],["meta",{"property":"article:tag","content":"草稿"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:modified_time","content":"2025-10-08T11:03:23.000Z"}]]},"readingTime":{"minutes":3,"words":899},"git":{"createdTime":1759921403000,"updatedTime":1759921403000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"8822e76d8d2b38cdc55efc7d8980256c70213d4a","time":1759921403000,"email":"dessera@qq.com","author":"Dessera","message":"MNN01"}]},"autoDesc":true,"filePathRelative":"草稿/项目笔记-QUIP聊天服务器01-协议设计.md","headers":[],"categoryList":[{"id":"22b433","sort":10007,"name":"草稿"}]}');export{K as comp,X as data};
