import{_ as h,c as t,a as l,b as a,d as n,e,r as k,o as p}from"./app-BYecpAAQ.js";const d={};function r(A,s){const i=k("Mermaid");return p(),t("div",null,[s[0]||(s[0]=l('<p>好吧，这个标题稍微有那么一点“标题党”的嫌疑，我们不可能脱离<code>Linux</code>去实现一个完整的伙伴系统（除非我们亲手实现一个<code>Linux</code>内核），但是我们可以实现一个简化版的伙伴系统，这个简化版的伙伴系统可以用于理解伙伴系统的工作原理。</p><p>我们要实现的简化版伙伴系统，运行在<code>i386</code>架构，假定系统中只有<code>DMA</code>、<code>NORMAL</code>和<code>HIGHMEM</code>三个内存域，除此之外，我们涉及到的一些伙伴系统以外的API将不会过多提及，这些API如下：</p><ul><li><code>bootmem</code>相关：是伙伴系统之前的自举内存分配器</li><li><code>e820</code>相关：是<code>BIOS</code>提供的内存布局信息</li><li><code>list_head</code>相关：是内核中常用的链表结构体</li></ul><p>达成以上共识之后，我们可以开始我们的简化版伙伴系统的实现。</p><blockquote><p>本文的环境是<code>gcc14</code>，标准为<code>c23</code></p></blockquote><h2 id="伙伴系统简介" tabindex="-1"><a class="header-anchor" href="#伙伴系统简介"><span>伙伴系统简介</span></a></h2><p>伙伴系统是著名的物理内存管理方案，它将内存页组织为一块块连续的内存块（这些内存块都必须是<code>4KB</code>的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> 倍），并将他们两两配对，形成<strong>伙伴</strong>，当分配内存时，伙伴系统会按照需求的内存块大小查找满足要求的内存块，如果找不到，它会查找更大的内存块并将他分裂为两个伙伴，并分配其中一块，如果还找不到，则递归进行以上操作，直到找到满足要求的内存块。</p><p>这里说的内存块的大小，我们一般将其称为内存块的阶数，例如，<code>4KB</code>的内存块称为<code>0</code>阶内存块，<code>8KB</code>的内存块称为<code>1</code>阶内存块，<code>16KB</code>的内存块称为<code>2</code>阶内存块，以此类推。</p><p>举个例子，我们在一个有两个<code>16KB</code>伙伴的系统中尝试分配一个<code>4KB</code>内存块，下面是伙伴系统内部的变化：</p>',9)),a(i,{code:"eJxLyslPztZNSi1J5ErOzynNzStWMORSUAALWzmFurhEGpp5AwUUFByjlYBMpVgwxwnBSc1L4QIA37kSaA=="}),s[1]||(s[1]=l("<p>当我们请求一个<code>4KB</code>内存块时，伙伴系统会先查找是否有<code>4KB</code>的伙伴，显然没有，于是伙伴系统会查找是否有<code>8KB</code>的伙伴，也没有，于是伙伴系统会查找是否有<code>16KB</code>的伙伴，找到了，于是伙伴系统将<code>16KB</code>的伙伴分裂为两个<code>8KB</code>的伙伴：</p>",1)),a(i,{code:"eJxLyslPztZNSi1J5ErOzynNzStWMORSUAALWzmFurhEGpp5AwUUFByjlYBMpVggJzUvBVWNBUSJU7SSBUSFgoIznA1SDQDqoxqQ"}),s[2]||(s[2]=n("p",null,[e("然后伙伴系统将其中一个"),n("code",null,"8KB"),e("的伙伴再次分裂为两个"),n("code",null,"4KB"),e("的伙伴，并分配其中一块：")],-1)),a(i,{code:"eJxLyslPztZNSi1J5ErOzynNzStWMORSUAALWzmFurhEGpp5AwUUFByjlYBMpVggJzUvBVWNBUSJU7SSBQ4VJhAVztFKJggVAJFYIJM="}),s[3]||(s[3]=n("p",null,"当释放内存块时，伙伴系统会先查找该内存块的伙伴是否空闲，如果空闲的话，伙伴系统会将两个伙伴合并为一个更大的伙伴，并试图将这个更大的伙伴合并到更大的伙伴中，直到无法合并为止。",-1)),s[4]||(s[4]=n("p",null,[e("还是上面的例子，现在用户希望释放刚刚申请的"),n("code",null,"4KB"),e("内存块，伙伴系统会先查找该内存块的伙伴是否空闲，显然是空闲的，于是伙伴系统将两个伙伴合并为一个更大的伙伴：")],-1)),a(i,{code:"eJxLyslPztZNSi1J5ErOzynNzStWMORSUAALWzmFurhEGpp5AwUUFByjlYBMpVggJzUvBVWNBUSJU7SSBUSFgoIznA1SDQDqoxqQ"}),s[5]||(s[5]=n("p",null,"伙伴系统发现，合并后，两个伙伴可以合并为一个更大的伙伴，于是伙伴系统将两个伙伴合并为一个更大的伙伴：",-1)),a(i,{code:"eJxLyslPztZNSi1J5ErOzynNzStWMORSUAALWzmFurhEGpp5AwUUFByjlYBMpVgwxwnBSc1L4QIA37kSaA=="}),s[6]||(s[6]=l(`<p>当然，我们这里假设我们最大的内存块是<code>16KB</code>，所以不再进行合并。</p><p>值得注意的是，所有的伙伴内存块都必须是<strong>物理连续</strong>的，例如，我们其中一个<code>4KB</code>的内存块地址为<code>0x0000</code>，那么它的伙伴内存块地址就为<code>0x1000</code>，该伙伴关系是当物理页初始化时就确定的，伙伴系统不会对伙伴关系进行修改，它只会标记伙伴内存块是否空闲。</p><h2 id="实现伙伴系统-初始化物理内存页" tabindex="-1"><a class="header-anchor" href="#实现伙伴系统-初始化物理内存页"><span>实现伙伴系统 - 初始化物理内存页</span></a></h2><p>首先，为了标记物理内存页的状态，我们需要一组结构体来代表所有的物理内存页，我们编写如下代码：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> page</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 内存阶</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  u8 order;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 内存页类型</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  enum</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_zone_type zone_type;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 内存页链表节点</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> list_head node;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 是否被保留（被bootmem使用、被e820标记为非RAM等）</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  bool</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> reserved;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 是否在伙伴系统中</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  bool</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> buddy;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现实实现我们可以酌情优化一下数据结构的大小，比如将<code>reserved</code>、<code>buddy</code>和任何你想放进去的标志合并为一个<code>flags</code>，但是为了方便理解，我们这里就不做优化了。</p><p>这里的<code>enum mem_zone_type</code>是内存域类型，我们这里只实现三个内存域，他们分别是<code>MEM_ZONE_DMA</code>、<code>MEM_ZONE_NORMAL</code>和<code>MEM_ZONE_HIGH</code>。</p><p>接下来，我们初始化物理内存页：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_pages </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> e820_get_memory_pages_cnt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">             // 获取系统中所有的物理内存页数量</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">__pages </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> bootmem_alloc</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">sizeof</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> *</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> mem_pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">));</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // 分配物理内存页结构体数组</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">kmemset</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">__pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> sizeof</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> *</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> mem_pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">       // 将物理内存页结构体数组清零</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">e820_pre_init_pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">__pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> mem_pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">                    // 将e820中非\`RAM\`类型的内存页标记为\`reserved\`</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">bootmem_pre_init_pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">__pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> mem_pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">                 // 将bootmem已使用的内存标记为\`reserved\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们实现一组对物理内存页的操作函数：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 获取物理内存页的索引</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">page_get_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> page </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> __pages;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 获取对应索引的物理内存页</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">page_get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">__pages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[index];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 获取物理内存页的物理地址</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">uintptr_t</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">page_get_phys</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> page_get_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(page) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_PAGE_SIZE;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里我们可以将<code>__pages</code>导出，用宏或者<code>inline</code>实现这些函数，但是为了方便理解，我们这里就不做优化了。</p></blockquote><p>接下来我们进入伙伴系统的初始化：</p><h2 id="实现伙伴系统-初始化伙伴系统" tabindex="-1"><a class="header-anchor" href="#实现伙伴系统-初始化伙伴系统"><span>实现伙伴系统 - 初始化伙伴系统</span></a></h2><p>伙伴系统是的职责之一是将内存分类，在非<code>NUMA</code>架构下，我们的数据结构划分如下：</p>`,15)),a(i,{code:"eJxLy8kvT85ILCpR8AniUlCoys9LVdDVtVNILEpNBDMKEtNTuQDwsQt/"}),s[7]||(s[7]=l("<p>感觉有些迷惑？我们先来介绍一下这些结构：</p><ul><li><code>zone</code>：内存域，代表一块连续的内存，例如<code>DMA</code>内存域、<code>NORMAL</code>内存域和<code>HIGHMEM</code>内存域</li><li><code>area</code>：内存区，代表按照一定阶数划分的内存，例如，<code>0</code>阶内存区、<code>1</code>阶内存区、<code>2</code>阶内存区等</li><li><code>page</code>：物理内存页，代表一块物理内存</li></ul><p>我们重新画一下数据结构图，以<code>DMA</code>为例：</p>",3)),a(i,{code:"eJxLy8kvT85ILCpR8AniUlCIcvF1jFaqys9L1QCyNJViFXR17RQcDaKVEotSEzUMgCJQVRAJQ6iEIbqEEVTCCF3CJFpJT08PLOhoABYKAJpu4q1QkJieWgyXMoRIAc23QJcygkgBbTA0Q5czgcjBLQEAW9408g=="}),s[8]||(s[8]=l(`<p>好，了解了这些，我们来实现一下这些数据结构：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_area</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 当前内存区中空闲的内存块，使用链表组织以动态管理内存</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> list_head mem_blocks;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 当前内存区中空闲的内存块数量</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> blocks_free;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_zone</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 当前内存域中所有的内存区</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_area </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[MEM_BUDDY_MAX_ORDER </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">+</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 当前内存域物理页起始</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_start;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 当前内存域物理页数量</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_cnt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 当前内存域中空闲的物理页数量</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_free;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们留下一个全局变量：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_zone </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">__zones</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[MEM_ZONE_SIZE];</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // 内存域数组</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们使用到了两个宏，他们分别是<code>MEM_ZONE_SIZE</code>和<code>MEM_BUDDY_MAX_ORDER</code>，他们的定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> MEM_ZONE_SIZE</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 3</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">         // 内存域数量，和内存类型枚举的数量相同</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> MEM_BUDDY_MAX_ORDER</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 10</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 最大内存阶，10表示最大的内存块为\`4MB\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们实现<code>mem_zone</code>的初始化：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">static</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__init_zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> mem_zone</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            enum</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> mem_zone_type </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> pg_start</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> pg_end</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 将内存域清零</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">pg_free</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 检查起始物理页和结束物理页是否合法，不合法则该域为空域</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (pg_start </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_end) {</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">    zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">pg_cnt</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">else</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">    zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">pg_cnt</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_end </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_start </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">+</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 设置内存域起始物理页</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">pg_start</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_start;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 初始化每一个内存区，将他们清空</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  for</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> i </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; i </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_BUDDY_MAX_ORDER; i</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">++</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">    list_init</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[i].</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">mem_blocks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">    zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[i].</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">blocks_free</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 查找每一个内存页，标记内存页类型</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 如果没有被保留（已使用），通过\`buddy_free_page\`将内存页加入伙伴系统</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  for</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> i </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_start; i </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pg_end; i</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">++</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    AUTO pg </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> page_get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(i);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">    pg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">zone_type</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> type;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">pg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">reserved</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">      buddy_free_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(pg, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先说明一下参数，<code>pg_start</code>和<code>pg_end</code>分别表示内存域的起始物理页和结束物理页，<code>type</code>表示内存域类型，<code>zone</code>表示要初始化的内存域。</p><blockquote><p>实际上我们可以通过偏移计算内存域类型，但这里为了方便，我们直接传入。</p><p>另外，我们在实现中大量使用了<code>AUTO</code>宏，它是<code>GNU</code>拓展的封装，原型为<code>__auto_type</code>，表示自动推导类型。</p></blockquote><p>这里涉及到了<code>buddy_free_page</code>函数，这个函数的作用是将物理内存页加入伙伴系统，我们稍后实现。</p><p>接下来，我们实现伙伴系统的初始化：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">init_buddy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  uintptr_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_size </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> e820_get_memory_size</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取系统中所有的物理内存大小</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // init zones</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  __init_zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">__zones</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[MEM_ZONE_DMA],</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">              MEM_ZONE_DMA,</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">              PAGE_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(MEM_TYPE_DMA_START),</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">              PAGE_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(MEM_TYPE_NORMAL_START) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  __init_zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">__zones</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[MEM_ZONE_NORMAL],</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">              MEM_ZONE_NORMAL,</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">              PAGE_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(MEM_TYPE_NORMAL_START),</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">              PAGE_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">MIN</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(MEM_TYPE_HIGH_START, mem_size)) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  __init_zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">__zones</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[MEM_ZONE_HIGH],</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">              MEM_ZONE_HIGH,</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">              PAGE_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(MEM_TYPE_HIGH_START),</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">              PAGE_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(mem_size) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>PAGE_INDEX</code>是一个宏，用于计算物理页的索引：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> PAGE_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">addr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) ((addr) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">/</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_PAGE_SIZE)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来的几个宏都表示了内存类型的起始点</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> MEM_TYPE_DMA_START</span><span style="--shiki-dark:#E06C75;--shiki-light:#986801;"> 0x</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">00000000</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> MEM_TYPE_NORMAL_START</span><span style="--shiki-dark:#E06C75;--shiki-light:#986801;"> 0x</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">01000000</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> MEM_TYPE_HIGH_START</span><span style="--shiki-dark:#E06C75;--shiki-light:#986801;"> 0x</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">30000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现伙伴系统-分配和释放" tabindex="-1"><a class="header-anchor" href="#实现伙伴系统-分配和释放"><span>实现伙伴系统 - 分配和释放</span></a></h2><p>我们来实现核心的分配和释放操作，注意，我们并没有在实现完整的操作系统，所以我们这里的操作都是无锁的，现实中的实现可以参考<code>Linux</code>内核使用自旋锁和开关中断的方式保证访问内存页的安全。</p><h3 id="分配内存块" tabindex="-1"><a class="header-anchor" href="#分配内存块"><span>分配内存块</span></a></h3><p>相对分配来说，释放是一个比较简单的操作，但我们先实现分配，否则我们没有办法很好的理解释放操作：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">buddy_alloc_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">enum</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> mem_zone_type </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">zone_type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> u8 </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">order</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 断言，保证\`order\`合法，你可以通过其他方式限制\`order\`的范围</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  KASSERT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_BUDDY_MAX_ORDER, </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;order too large, received </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%u</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, order);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取对应的内存域</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  AUTO zone </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">__zones</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[zone_type];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 循环查找，向上查找能够分配的内存区</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> alloc_order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> order;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_area</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> area;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  while</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (alloc_order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_BUDDY_MAX_ORDER) {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    area </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[alloc_order];</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">blocks_free</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &gt;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">      break</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    alloc_order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">++</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 没找到，该类型内存已经分配完，返回NULL</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (alloc_order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_BUDDY_MAX_ORDER) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> NULL</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取该内存区中的第一个内存块，检查它是否受到伙伴系统的管理</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 实际上这里可以不做断言，但为了严谨性我们还是做了</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  AUTO page </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> LIST_ENTRY</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">mem_blocks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> page, node);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  KASSERT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">          &quot;broken buddy system, page </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> is not part of a block&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">          page_get_phys</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(page));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 从当前内存区中删除该内存块</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  __area_delete_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(area, page);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 递归向下分裂内存块，直到分裂到\`order\`阶</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 分裂后会产生两个内存块，将后者分配给用户</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  while</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (alloc_order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> order) {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    alloc_order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">--</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    area </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[alloc_order];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">    __area_add_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(area, page);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">    page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> alloc_order;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    page </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">+=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &lt;&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> alloc_order;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 相应减少内存域中空闲页的数量</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">pg_free</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> -=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_ORDER_PAGES</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(order);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 检查我们拿出的内存块是否仍然受到伙伴系统的管理</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  KASSERT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">          &quot;broken buddy system, allocated page </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> is still part of a block&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">          page_get_phys</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(page));</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> page;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有点迷糊？没关系，我们一点点来分析。</p><p>首先，我们通过<code>zone_type</code>找到对应的内存域后，按照最开始的对伙伴系统的描述，我们向上查找能够分配该内存的内存区：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> alloc_order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> order;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> mem_area</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> area;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">while</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (alloc_order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_BUDDY_MAX_ORDER) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取当前内存区</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  area </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[alloc_order];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 如果该内存区有空闲页，找到，退出循环</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">blocks_free</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &gt;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    break</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 否则，继续向上查找</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  alloc_order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">++</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们会得到<code>alloc_order</code>，表示我们找到的能够分配的内存区阶数，和<code>area</code>，表示我们找到的内存区。</p><p>然后我们拿出这个区内的第一个内存块，等等，我们之前一直隐藏了一个问题：每阶存储的内存块的大小都是不同的，我们凭什么使用大小等于<code>4K</code>的物理内存抽象来存储它呢？</p><p>当然，我们用<code>order</code>来指定了这个页的阶数，但要记得，我们的物理页大小永远是<code>4K</code>，我们有两种方法管理在<code>area</code>中的内存块：</p><ol><li>将内存块的所有内存页都放入链表，这样绝对符合逻辑，但难以管理。</li><li>只将内存块的第一个内存页放入链表，这样管理起来方便，但需要通过<code>order</code>来在不同的内存块之间跳转。</li></ol><p>我们实际上使用了第二种方法，这样，我们的一个内存页往往有多种身份，取决于它当前的阶数：</p><blockquote><p>下划线代表该位用于索引该内存块</p></blockquote><table><thead><tr><th style="text-align:center;">所在容器</th><th style="text-align:center;">所属索引</th><th style="text-align:center;">所属索引</th><th style="text-align:center;">所属索引</th><th style="text-align:center;">所属索引</th></tr></thead><tbody><tr><td style="text-align:center;">内存页</td><td style="text-align:center;"><u>0</u></td><td style="text-align:center;"><u>1</u></td><td style="text-align:center;"><u>2</u></td><td style="text-align:center;"><u>3</u></td></tr><tr><td style="text-align:center;">0阶</td><td style="text-align:center;"><u>0</u></td><td style="text-align:center;"><u>1</u></td><td style="text-align:center;"><u>2</u></td><td style="text-align:center;"><u>3</u></td></tr><tr><td style="text-align:center;">1阶</td><td style="text-align:center;"><u>0</u></td><td style="text-align:center;">0</td><td style="text-align:center;"><u>1</u></td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">2阶</td><td style="text-align:center;"><u>0</u></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr></tbody></table><p>理解了这个，我们就可以继续了，接下来，我们先从当前内存区删除该块，这里用到了<code>__area_delete_page</code>：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">static</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__area_delete_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> mem_area</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 从链表中删除</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  list_del</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">node</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 减少空闲块的数量</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">blocks_free</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">--</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 脱离伙伴系统管理</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> false</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们还有<code>__area_add_page</code>：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">static</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__area_add_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> mem_area</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 将该内存块添加到链表</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  list_add</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">node</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">mem_blocks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 增加空闲块的数量</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">blocks_free</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">++</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 加入伙伴系统管理</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> true</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从<code>alloc_order</code>向下分裂内存块，直到分裂到<code>order</code>阶：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 循环直到分裂到\`order\`阶</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">while</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (alloc_order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> order) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 将\`order\`下移</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  alloc_order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">--</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取当前内存区</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  area </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[alloc_order];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 修改内存块的阶数</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> alloc_order;</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 将该内存块添加到当前内存区</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  __area_add_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(area, page);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取新的内存块索引</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  page </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">+=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &lt;&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> alloc_order;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的我们都很好理解，为什么我们原封不动地将<code>page</code>直接插入了新的内存区呢？我们刚才讲过了，内存页的身份取决于当前阶数，并且，<strong>更高阶数的内存块索引总是分裂后第一个低阶内存块的索引</strong>，所以，我们直接将<code>page</code>插入新的内存区，因为它就是第一个低阶内存块。</p><p>很明显地，我们这么做实际上就是分配第二个分裂内存块给下一阶，所以最后的左移操作也好理解了，我们通过平移<code>page</code>的方式找到它的伙伴，然后递归向下分裂，直到分裂到<code>order</code>阶。</p><p>为什么左移操作能够找到对应的伙伴呢？我们举个例子：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>0阶：0 += 1 &lt;&lt; 0 = 1</span></span>
<span class="line"><span>1阶：0 += 1 &lt;&lt; 1 = 2</span></span>
<span class="line"><span>2阶：0 += 1 &lt;&lt; 2 = 4</span></span>
<span class="line"><span>3阶：0 += 1 &lt;&lt; 3 = 8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，左移操作实际上就是将当前索引加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{order}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span></span></span></span></span></span></span></span></span></span></span></span>，正好是下一个内存块的索引，因为我们刚才使用的<code>page</code>是分裂出来的第一个内存块，这样查找到的就一定是分裂后的第二个内存块，因此二者必然是伙伴。</p><p>同时，后者一定没有被加入伙伴系统，因为它在上一阶不是索引，自然不在链表中，其<code>buddy</code>字段也一定为<code>false</code>。</p><p>最后，我们相应减少内存域中空闲页的数量，并将分配的内存块返回，这就是分配内存块的全部过程。</p><h3 id="释放内存块" tabindex="-1"><a class="header-anchor" href="#释放内存块"><span>释放内存块</span></a></h3><p>最后，我们来实现释放操作：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">buddy_free_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> u8 </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">order</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 检查页状态</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  KASSERT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_BUDDY_MAX_ORDER, </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;order too large, received </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%u</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, order);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  KASSERT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">reserved</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;cannot free reserved page </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">page_get_phys</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(page));</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  KASSERT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">          &quot;cannot free page </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> that is part of a buddy block&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">          page_get_phys</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(page));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取页索引，检查该索引是否按照阶数对齐</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  AUTO idx </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> page_get_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(page);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">BUDDY_ALIGN_CHECK</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(idx, order)) {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">    KWARNING</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;page </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> is not aligned to order </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%u</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">page_get_phys</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(page), order);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  AUTO zone </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">__zones</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">zone_type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">];</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">pg_free</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> +=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_ORDER_PAGES</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(order);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 递归合并内存块</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  AUTO area </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[order];</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  while</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_BUDDY_MAX_ORDER) {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    AUTO buddy_idx </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_GET_BUDDY_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(idx, order);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    AUTO buddy </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> page_get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(buddy_idx);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // another block is not free or another block is not of the same order</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> ||</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> buddy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> !=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> order) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">      break</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">    __area_delete_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(area, buddy);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    idx </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_GET_ASCEND_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(idx, order);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">++</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    area </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[order];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取最终合并的内存块索引</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  page </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> page_get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(idx);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> order;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 将内存块添加到对应的内存区</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  __area_add_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(area, page);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了分配时的理解，我们可以很轻松地理解释放内存块的过程，首先我们对参数进行一系列的检查，确保它确实可以被释放，这些检查可以被总结为：</p><ul><li>阶数符合要求</li><li>页没有被保留</li><li>页不在伙伴系统中</li><li>页按照当前阶数对齐</li></ul><p>满足以上条件，代表这个内存块确实是可以被释放的，这里涉及到对齐检查，该宏实现为：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_ALIGN_CHECK</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">idx</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">order</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((idx) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ((</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &lt;&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (order)) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们知道内存块的索引与阶数有关，他们的步长都是2的幂，我们列举几个：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-plaintext"><span class="line"><span>0阶：0 + 0b1 * n</span></span>
<span class="line"><span>1阶：0 + 0b10 * n</span></span>
<span class="line"><span>2阶：0 + 0b100 * n</span></span>
<span class="line"><span>3阶：0 + 0b1000 * n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，如果整个系统的物理内存页从0起始，那么0阶内存块的索引可以是任何整数；1阶内存块的索引必须是偶数（二进制最后一位为0），2阶内存块的索引必须是4的倍数（二进制后两位为0），3阶内存块的索引必须是8的倍数（二进制后三位为0），以此类推。</p><p>检查这个下标是否满足阶数对齐，只要检查这个下标最后的<code>n</code>个二进制位是否全为0即可，这就是我们的<code>BUDDY_ALIGN_CHECK</code>宏所做的事情。</p><p>我们将<code>zone</code>中的空闲页数量增加，然后递归合并内存块：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">AUTO area </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">zone</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[order];</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">while</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> MEM_BUDDY_MAX_ORDER) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取伙伴索引</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  AUTO buddy_idx </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_GET_BUDDY_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(idx, order);</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取伙伴页</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  AUTO buddy </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> page_get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(buddy_idx);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 检查两项，伙伴是否被加入伙伴系统，以及伙伴的阶数是否与当前阶数相同</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 不满足则停止合并</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">buddy</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> ||</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> buddy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> !=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> order) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    break</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 满足，将伙伴页从内存区中删除以进行合并</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  __area_delete_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(area, buddy);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 获取上级内存块的索引</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  idx </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_GET_ASCEND_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(idx, order);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 阶数加1，内存区指针指向上级内存区</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  order</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">++</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  area </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">zone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">areas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[order];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每次循环时，我们需要获取伙伴，并检查伙伴状态，如果能够合并则向上合并，否则停止合并。</p><p>这里有一个问题，在我们分配的时候，我们的伙伴固定是分裂后的第二个内存块，但在释放时，我们不知道我们内存块的伙伴是哪一个，我们实现的<code>BUDDY_GET_BUDDY_INDEX</code>需要做到：对于任意两个伙伴，它都能在二者的索引之间相互转换。</p><p>还记得我们之前对于步长的讨论吗？我们对它的讨论更进一步，因为整个系统的物理内存页索引从0开始，对于任意两个伙伴，他们都应当有如下关系：</p>`,61)),a(i,{code:"eJxLy8kvT85ILCpR8AnicoxWMkgyUIpV0NW1U3ACcQyVYrmcwaIwYRewMJDH5QoRh0m4QSRAMu5QGZiUB1QKJAcATuIacw=="}),s[9]||(s[9]=l(`<p>显然，我们实际上希望的是，当我们输入1时，能够得到0，输入0时，能够得到1，这是什么操作？异或！</p><p>因此我们的<code>BUDDY_GET_BUDDY_INDEX</code>宏实现为：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_GET_BUDDY_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">idx</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">order</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) ((idx) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">^</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &lt;&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (order)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，我们检查内存块是否可以释放，这里涉及到两个问题：</p><ol><li>伙伴可能已经被申请了，我们无法释放</li><li>伙伴目前的身份（阶数）可能与我们不同，我们无法释放</li></ol><p>实际上这两种情况都属于<strong>伙伴内存块已经被分配</strong>，前者是因为分配给了用户，后者是因为分配给了下一阶内存区。</p><p>如果该内存块已经被分配，那么我们的循环就停止，意味着内存块应当保存在该阶。如果该内存块没有被分配，那么我们合并二者，进入下一阶，继续检查。</p><p>合并内存块实际上就是把伙伴从当前阶删除，然后获取上级内存块的索引，何为上级内存块的索引？我们刚刚在分裂时提到，上级内存块索引会分裂为两个下级内存块索引，其中一个索引和上级内存块索引相同。在合并时，我们要获取的就是这个<strong>相同</strong>的索引。</p><p>还记得我们进行异或操作时候画的图吗？我们重新观察这张图，不难发现第一个内存块索引在其对应的阶位上永远是0，第二个内存块索引在其对应的阶位上永远是1，我们通过按位与操作来将此位置为0，即可得到上级内存块的索引：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BUDDY_GET_ASCEND_INDEX</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">idx</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">order</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) ((idx) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> ~</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &lt;&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (order)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>经过这个循环，我们找到该内存块最终归属的阶数和<code>area</code>，然后将其插入到该内存区中：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 获取最终合并的内存块索引</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">page </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> page_get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">idx</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">page</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">order </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> order;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 将内存块添加到对应的内存区</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__area_add_page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">area</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> page</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们完成了伙伴内存块的释放。</p><h2 id="一些感想" tabindex="-1"><a class="header-anchor" href="#一些感想"><span>一些感想</span></a></h2><p>笔者目前正在进行一个玩具内核的编写工作，最开始参考了郑刚老师的《操作系统真象还原》，以及笔者朋友编写的<a href="https://github.com/Charliechen114514/CCOperateSystem" target="_blank" rel="noopener noreferrer">CCOperateSystem</a>，不过，在内存管理方面，笔者对这部分的实现并不满意，因为这些实现依赖了内核低<code>1MB</code>中的固定内存区域，导致内核大小被限制在<code>1MB</code>，因为管理内存所使用的位图也被限制在低<code>1MB</code>的可用内存中，其实际能够管理的内存大约在<code>256MB</code>左右，这是笔者不愿意接受的。</p><p>因此，笔者参考了很多开源项目，尤其是<a href="https://github.com/chobits/tinyos" target="_blank" rel="noopener noreferrer">tinyos</a>，来实现一套基于<code>bootmem</code>自举分配器的动态内存管理，在<code>bootmem</code>自举分配器完成使命后，由伙伴系统接管内存管理，本文即为笔者在实现伙伴系统过程中的一些心得体会。</p><p>后续该文章会整合进笔者的《动手搭建自己的操作系统》笔记中，敬请期待。</p>`,17))])}const c=h(d,[["render",r]]),y=JSON.parse('{"path":"/article/lnvtavkf/","title":"操作系统实践-实现伙伴系统","lang":"zh-CN","frontmatter":{"title":"操作系统实践-实现伙伴系统","createTime":"2025/03/19 22:00:12","permalink":"/article/lnvtavkf/","tags":["操作系统","内存管理","C"],"description":"好吧，这个标题稍微有那么一点“标题党”的嫌疑，我们不可能脱离Linux去实现一个完整的伙伴系统（除非我们亲手实现一个Linux内核），但是我们可以实现一个简化版的伙伴系统，这个简化版的伙伴系统可以用于理解伙伴系统的工作原理。 我们要实现的简化版伙伴系统，运行在i386架构，假定系统中只有DMA、NORMAL和HIGHMEM三个内存域，除此之外，我们涉及...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统实践-实现伙伴系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-20T03:20:34.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/lnvtavkf/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"操作系统实践-实现伙伴系统"}],["meta",{"property":"og:description","content":"好吧，这个标题稍微有那么一点“标题党”的嫌疑，我们不可能脱离Linux去实现一个完整的伙伴系统（除非我们亲手实现一个Linux内核），但是我们可以实现一个简化版的伙伴系统，这个简化版的伙伴系统可以用于理解伙伴系统的工作原理。 我们要实现的简化版伙伴系统，运行在i386架构，假定系统中只有DMA、NORMAL和HIGHMEM三个内存域，除此之外，我们涉及..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-20T03:20:34.000Z"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:tag","content":"内存管理"}],["meta",{"property":"article:tag","content":"操作系统"}],["meta",{"property":"article:modified_time","content":"2025-03-20T03:20:34.000Z"}]]},"readingTime":{"minutes":18.89,"words":5666},"git":{"createdTime":1742400972000,"updatedTime":1742440834000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"f8af4fe9b41b5781750bc402c73f81cb3c00cf9c","time":1742440834000,"email":"dessera@qq.com","author":"Dessera","message":"伙伴系统"},{"hash":"328913c6993e8b1b5aff6136565b0d63764dc91d","time":1742400972000,"email":"dessera@qq.com","author":"Dessera","message":"[WIP]伙伴系统"}]},"autoDesc":true,"filePathRelative":"操作系统/操作系统实践-实现伙伴系统.md","headers":[],"categoryList":[{"id":"30d23e","sort":10001,"name":"操作系统"}]}');export{c as comp,y as data};
