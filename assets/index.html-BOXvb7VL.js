import{_ as s,c as a,a as e,o as n}from"./app-BYecpAAQ.js";const l={};function h(t,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p>笔者认为，要熟练掌握某项技术或工具，就需要深入地亲自体会它，强迫自己进入“探索-碰壁-再探索”这一良性循环。学习某一语言如此，学习使用某个工具亦如。</p><p>以笔者本人为例，笔者以大一的某次比赛为契机接触了Linux，并花费进一年的时间扎根于Linux系统的使用，从Ubuntu到Manjaro，再到ArchLinux，最后深入NixOS，这个过程为笔者带来了大量的实践经验。</p><p>笔者举上面的例子旨在说明，学习Nix的过程十分艰难，我们如果认定学习Ubuntu的难度不高，学习Arch的难度较高，那么学习Nix的难度就是非常高。因为它不像Arch那样有完整的文档和成熟的社区支持，Nix的文档是灾难性的——它分布及广、信息量低且几乎没有中文支持。</p><p>为了解决一些共性问题和分享一些见解，笔者计划编写新的系列文章，本文是该系列文章的第一篇。</p><h2 id="所以-什么是nix" tabindex="-1"><a class="header-anchor" href="#所以-什么是nix"><span>所以，什么是Nix？</span></a></h2><p>事实上，上文我们将Nix与其他Linux发行版并列的做法是错误的，严格意义上说，Nix可以是一门编程语言，也可以是一个通用Linux包管理器，但它实际上不是发行版本身。而基于Nix包管理器的Linux发行版被称为NixOS。</p><blockquote><p>事实上，社区还维护了一个基于Nix的发行版，叫做<a href="https://github.com/nix-community/NixNG" target="_blank" rel="noopener noreferrer">NixNG</a>，这里不做讨论</p></blockquote><p>Nix是一个“函数式”的软件包管理器，它以配置文件的方式管理系统中所有的软件和其配置，这样的好处是，其完全遵守函数式编程中纯函数的理念，能够保证同样的配置文件能够产出完全相同的配置结果。</p><p>当然，Nix的神秘魅力并不能用上面那句“假大空”的宣传语概括，只有我们深入了解它，我们才能体会到它带给我们的各种便利。</p><h2 id="flake" tabindex="-1"><a class="header-anchor" href="#flake"><span>Flake</span></a></h2><blockquote><p>到现在为止，Flake在事实上仍然是一个实验性项目，但鉴于其使用的广泛程度，本文不会介绍旧的配置方法，而是直接使用Flake</p></blockquote><p>Flake是Nix生态最重要的组成部分，它是大多数Nix项目的基石。</p><p>Flake本质上是一个函数，它接受其他Flakes作为输入，并返回一个巨大的结构，其返回内容可以是一个软件包、一个开发环境、一个系统配置等等。</p><p>举个例子，我的项目是一个软件<code>my-tool</code>，那么我就可以使用Flake将我的软件分发给其他Nix使用者，其他人拿到我的软件包，只需要运行<code>nix build .</code>就可以构建我的软件，如果他们想要使用我的软件，只要将我的Flake加入到他们系统的Flake中，就可以在整个系统中安装我的软件。</p><p>要创建一个Flake，需要在任意项目的根目录初始化一份<code>flake.nix</code>，下面是一个简单的Flake：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  description</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;A very basic flake&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">url</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;github:nixos/nixpkgs?ref=nixos-unstable&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  outputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = { </span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> }: {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">x86_64-linux</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">hello</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">legacyPackages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">x86_64-linux</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">hello</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">x86_64-linux</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">x86_64-linux</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">hello</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个最基础的<code>Hello World</code>配置，会导出一个名为<code>hello</code>的程序，我们主要关注其<code>inputs</code>和<code>outputs</code>两项。</p><p><code>inputs</code>是<code>outputs</code>的参数，它的来源是其他的Flakes，在这里，我们通过引用<code>nixos/nixpkgs</code>来导入Nix官方软件源，<code>outputs</code>就是我们想要导出的内容，<code>packages</code>下的内容意为导出软件包，这里，我们将软件源中的<code>hello</code>导出。</p><p>接着，我们运行<code>nix run .</code>就可以运行该软件包：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">❯</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> nix</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> run</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> .</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">世界你好！</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用<code>nix build .</code>来构建该软件包</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">❯</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> nix</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> build</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> .</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">❯</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ls</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">flake.lock</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">  flake.nix</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">  result</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>result/bin</code>中，我们就可以看到构建的软件：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">❯</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ls</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> result/bin/</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用<code>nix develop .</code>进入这个包的开发环境：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">❯</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> nix</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> develop</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[your_name@your_pc:/path/to/project]$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这，有些朋友可能发现了，在Nix中，只要我们定义好了我们的软件包，那么我们就可以一键完成其构建过程、构建环境和开发环境。而更可怕的是，这才是Flake的冰山一角。</p><p>除却<code>packages</code>之外，我们还有<code>devShells</code>、<code>nixosConfigurations</code>等等配置项，足够支撑Flake进行几乎<strong>任何</strong>项目的开发。</p><h2 id="使用flake进行开发" tabindex="-1"><a class="header-anchor" href="#使用flake进行开发"><span>使用Flake进行开发</span></a></h2><p>要使用Flake,首先要进行一次系统配置，在没有启动Flake之前，NixOS的系统配置存在于<code>/etc/nixos</code>中，我们需要在配置文件中加入下面的内容：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">nix</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">settings</span><span style="--shiki-dark:#FFFFFF;--shiki-light:white;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  experimental-features</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [ </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;nix-command&quot;</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;flakes&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span><span style="--shiki-dark:#FFFFFF;--shiki-light:white;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">programs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">direnv</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">enable</span><span style="--shiki-dark:#FFFFFF;--shiki-light:white;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> true</span><span style="--shiki-dark:#FFFFFF;--shiki-light:white;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用<code>sudo nixos-rebuild switch</code>切换系统配置，使用以上的配置，我们启用了Flake实验功能，并下载了<code>direnv</code>。</p><p>接下来，我们来到我们的项目文件夹下，例如，我的项目文件夹在<code>/data/project/my-tool</code>，我们先编写一个最简单的C程序：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// my-tool.c</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#include</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;hello world!</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们准备该程序的打包文件：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># default.nix</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{ </span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">stdenv</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> }:</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">stdenv</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">mkDerivation</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  name</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;my-tool&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">./.</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  </span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  buildPhase</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    $CC -o my-tool my-tool.c</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">  &#39;&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  installPhase</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    mkdir -p $out/bin</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    cp my-tool $out/bin</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">  &#39;&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该文件是一个通用Nix包格式，能被<code>pkgs</code>中的<code>callPackage</code>函数调用，在这段逻辑中，我们引入了标准环境<code>stdenv</code>，其中包含<code>gcc</code>和相应的C标准库。</p><p>在<code>buildPhase</code>中，我们定义了该包的构建逻辑，这里使用<code>$CC</code>引用<code>gcc</code>。</p><p>在<code>installPhase</code>中，我们定义该包的安装逻辑，我们使用<code>$out</code>引用导出路径，先创建<code>bin</code>文件夹，然后将构建好的程序复制到指定位置。</p><p>最后，我们创建<code>flake.nix</code>，将该包暴露出去：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  description</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;A flake that builds a simple my-tool&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  inputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">url</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;github:NixOS/nixpkgs/nixpkgs-unstable&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  outputs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = { </span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> }: </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">x86_64-linux</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">my-tool</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">nixpkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">legacyPackages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">x86_64-linux</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">callPackage</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ./default.nix</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">x86_64-linux</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">packages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">x86_64-linux</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">my-tool</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的写法和上文的<code>hello</code>几乎一致，值得一提的是，因为包是我们自己写的，所以要使用<code>callPackage</code>函数将其转化为正确的包格式。</p><p>现在，我们可以使用<code>nix build</code>、<code>nix run</code>和<code>nix develop</code>，其效果和上文基本一致。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">❯</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> nix</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> run</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> .</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">hello</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以使用上面安装的<code>direnv</code>，它可以让我们一进入该目录，就进入包的开发环境，首先编写<code>.envrc</code>：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># .envrc</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">use</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> flake</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在项目目录下运行<code>direnv allow</code>：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">❯</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> direnv</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> allow</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">direnv:</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> loading</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> /data/projects/my-tool/.envrc</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">direnv:</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> using</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> flake</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">direnv:</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> nix-direnv:</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> Renewed</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> cache</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">direnv:</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> export</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +AR</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +AS</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +CC</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +CONFIG_SHELL</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +CXX</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +HOST_PATH</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +IN_NIX_SHELL</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +LD</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_BINTOOLS</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_BUILD_CORES</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_CC</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_CFLAGS_COMPILE</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_ENFORCE_NO_NATIVE</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_HARDENING_ENABLE</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_LDFLAGS</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NIX_STORE</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +NM</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +OBJCOPY</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +OBJDUMP</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +RANLIB</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +READELF</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +SIZE</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +SOURCE_DATE_EPOCH</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +STRINGS</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +STRIP</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +__structuredAttrs</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +buildInputs</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +buildPhase</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +builder</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +cmakeFlags</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +configureFlags</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +depsBuildBuild</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +depsBuildBuildPropagated</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +depsBuildTarget</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +depsBuildTargetPropagated</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +depsHostHost</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +depsHostHostPropagated</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +depsTargetTarget</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +depsTargetTargetPropagated</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +doCheck</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +doInstallCheck</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +dontAddDisableDepTrack</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +installPhase</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +mesonFlags</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +name</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +nativeBuildInputs</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +out</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +outputs</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +patches</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +propagatedBuildInputs</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +propagatedNativeBuildInputs</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +shell</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +src</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +stdenv</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +strictDeps</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> +system</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ~PATH</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ~XDG_DATA_DIRS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们就可以使用这个开发环境安装的所有软件，查看一下<code>gcc</code>：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">❯</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> gcc</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -v</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">使用内建</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> specs。</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">COLLECT_GCC</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">/nix/store/x8rg4vhgd20i8vzykm1196f9qdb8klhh-gcc-13.3.0/bin/gcc</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">COLLECT_LTO_WRAPPER</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">/nix/store/x8rg4vhgd20i8vzykm1196f9qdb8klhh-gcc-13.3.0/libexec/gcc/x86_64-unknown-linux-gnu/13.3.0/lto-wrapper</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">目标：x86_64-unknown-linux-gnu</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">配置为：../gcc-13.3.0/configure</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --prefix=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-gcc-13.3.0</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-gmp-include=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-gmp-6.3.0-dev/include</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-gmp-lib=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-gmp-6.3.0/lib</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-mpfr-include=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-mpfr-4.2.1-dev/include</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-mpfr-lib=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-mpfr-4.2.1/lib</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-mpc=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-libmpc-1.3.1</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-native-system-header-dir=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-glibc-2.39-52-dev/include</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-build-sysroot=/</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-gxx-include-dir=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-gcc-13.3.0/include/c++/13.3.0/</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --program-prefix=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --enable-lto</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --disable-libstdcxx-pch</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --without-included-gettext</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-system-zlib</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --enable-static</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --enable-languages=c,c++</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --disable-multilib</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --enable-plugin</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --disable-libcc1</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-isl=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-isl-0.20</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --disable-bootstrap</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --build=x86_64-unknown-linux-gnu</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --host=x86_64-unknown-linux-gnu</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --target=x86_64-unknown-linux-gnu</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">线程模型：posix</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">支持的</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> LTO</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> 压缩算法：zlib</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">gcc</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> 版本</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 13.3.0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (GCC)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="未完待续" tabindex="-1"><a class="header-anchor" href="#未完待续"><span>未完待续</span></a></h2><p>本文我们简单了解了Flake如何构建软件，之后的文章我们会探讨Flake构建系统、以及高级软件包构建流程。</p>`,52)]))}const p=s(l,[["render",h]]),d=JSON.parse('{"path":"/article/szm6xukr/","title":"初探Nix-01-包与Flake","lang":"zh-CN","frontmatter":{"title":"初探Nix-01-包与Flake","createTime":"2024/09/14 15:36:04","permalink":"/article/szm6xukr/","tags":["Linux","Nix","Flake"],"description":"笔者认为，要熟练掌握某项技术或工具，就需要深入地亲自体会它，强迫自己进入“探索-碰壁-再探索”这一良性循环。学习某一语言如此，学习使用某个工具亦如。 以笔者本人为例，笔者以大一的某次比赛为契机接触了Linux，并花费进一年的时间扎根于Linux系统的使用，从Ubuntu到Manjaro，再到ArchLinux，最后深入NixOS，这个过程为笔者带来了大...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"初探Nix-01-包与Flake\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-20T16:09:54.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/szm6xukr/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"初探Nix-01-包与Flake"}],["meta",{"property":"og:description","content":"笔者认为，要熟练掌握某项技术或工具，就需要深入地亲自体会它，强迫自己进入“探索-碰壁-再探索”这一良性循环。学习某一语言如此，学习使用某个工具亦如。 以笔者本人为例，笔者以大一的某次比赛为契机接触了Linux，并花费进一年的时间扎根于Linux系统的使用，从Ubuntu到Manjaro，再到ArchLinux，最后深入NixOS，这个过程为笔者带来了大..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-20T16:09:54.000Z"}],["meta",{"property":"article:tag","content":"Flake"}],["meta",{"property":"article:tag","content":"Nix"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2025-05-20T16:09:54.000Z"}]]},"readingTime":{"minutes":6.52,"words":1955},"git":{"createdTime":1726304631000,"updatedTime":1747757394000,"contributors":[{"name":"Dessera","username":"Dessera","email":"1533653159@qq.com","commits":4,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"c8a4dd6f1ea3a831c30c72f289305bd8faab7b54","time":1747757394000,"email":"dessera@qq.com","author":"Dessera","message":"嵌入式Linux-移植触摸屏"},{"hash":"70eb9e4ef815527f818ed196ae3bf6227ed8de6e","time":1730009735000,"email":"lord.changed@foxmail.com","author":"Dessera","message":"添加评论功能"},{"hash":"861ac2dd535dd02044be3c584208c3c49930c5c5","time":1726574635000,"email":"1533653159@qq.com","author":"Dessera","message":"chore: 更新Nix-01-包与Flake文档"},{"hash":"cb013071ed35de12b1886ee6fa948953e8ec113c","time":1726304631000,"email":"1533653159@qq.com","author":"Dessera","message":"chore: 添加Nix-01-包与Flake文档"}]},"autoDesc":true,"filePathRelative":"Nix/初探Nix-01-包与Flake.md","headers":[],"categoryList":[{"id":"a5ea3f","sort":10003,"name":"Nix"}]}');export{p as comp,d as data};
