import{_ as i,c as a,a as n,o as l}from"./app-BYecpAAQ.js";const h={};function k(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>笔者近期比较沉迷于 Qt ，朋友非常热情的跟我说了很多关于 Qt 的话题，勾起了我对它的兴趣，作为前端程序员，我也很好奇 Qt 是如何实现的 MVC 架构，于是便有了这篇文章。</p><blockquote><p>代码来自笔者的Qt练习项目</p></blockquote><h2 id="关于mvc" tabindex="-1"><a class="header-anchor" href="#关于mvc"><span>关于MVC</span></a></h2><p>MVC实际上就是 Model-View-Controller 的缩写，它代表了一种用户交互方式，简单来说就是：</p><ul><li>Model： 负责存储数据</li><li>View： 负责展示数据</li><li>Controller： 负责对数据的操作</li></ul><p>三者构成了循环关系， Model 为 View 提供了渲染内容， View 又引导用户进行操作， Controller 改变数据的内容，进而引发重新渲染，因为 MVC 清晰的区分了三者的关系，因此以这样的方式构建 UI 可以提高代码的健壮性和可读性，某种程度上，分离的模块也为其提供了可复用性。</p><h2 id="qt-的-mvc" tabindex="-1"><a class="header-anchor" href="#qt-的-mvc"><span>Qt 的 MVC</span></a></h2><p>事先要说明的是，笔者<strong>不认为</strong> Qt 实现了标准的 MVC 架构，因为在 Qt MVC 中，实际上是没有 Controller 的，这是因为 Qt 本身存在一套元对象系统，交互是依赖信号和槽进行的，特地去封装 Controller 显得没那么重要。</p><blockquote><p>笔者认为，相比 Model 和 View ， Controller 确实没那么重要，比如在前端我们的架构通常被称为 MVVM ，这是因为 Controller 被嵌入了 View 和 Model 中</p></blockquote><h2 id="编写一个-model" tabindex="-1"><a class="header-anchor" href="#编写一个-model"><span>编写一个 Model</span></a></h2><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h3><p>一切的 Model 都是从<code>QAbstractItemModel</code>延伸的，为了实现一个 Model ，我们需要重写它身上的方法，但在那之前，我们需要先有需要表示的数据结构，以<code>TodoTask</code>为例子：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">enum</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TodoTaskStatus</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  InProgress</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  Done</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">enum</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TodoTaskPriority</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  Low</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  Medium</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  High</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TodoTask</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  constexpr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> static</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> INVALID_ID </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> -</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  constexpr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> static</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> INVALID_TASK </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> nullptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  using</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> ConstPtr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TodoTask</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  using</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TodoTask</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> id;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  QString name;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  QString description;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  QDateTime start;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  QDateTime end;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  TodoTaskStatus status{ TodoTaskStatus::InProgress };</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  TodoTaskPriority priority{ TodoTaskPriority::Medium };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> parent_id{ INVALID_ID };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  static</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> bool</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(TodoTask::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">ConstPtr</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  static</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> bool</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(TodoTask::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Ptr</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码简要描述了一个任务，我们为其继承一个 Model ：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> : </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QAbstractItemModel</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  Q_OBJECT</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QList</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">tasks</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {}, </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QObject</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> parent</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> nullptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  ~TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">private:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  QList</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> m_tasks;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在重写方法之前，我们需要先了解<code>ModelIndex</code>类。</p><h3 id="qmodelindex" tabindex="-1"><a class="header-anchor" href="#qmodelindex"><span>QModelIndex</span></a></h3><p>为了能让 Model 传送任意类型的数据和适配任意类型的 View ， Qt 抽象了模型的索引，它表示在 View 的角度下，一个数据的位置。</p><p>如果 Model 只需要支持列表，那么我们甚至不必为它实现索引方法，参考 <a href="https://doc.qt.io/qt-6/model-view-programming.html" target="_blank" rel="noopener noreferrer">Qt 的官方教程</a>，只需要实现<code>rowCount</code>和<code>data</code>即可。</p><p>但如果 Model 需要支持树形视图，事情就变得复杂了，因为一个索引必须能够找到它的父子和兄弟索引。同时，之前对<code>data</code>方法的实现也会失效。</p><p>我们需要先实现针对索引的方法：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> : </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QAbstractItemModel</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  Q_OBJECT</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QList</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">tasks</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {}, </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QObject</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> parent</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> nullptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  ~TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  [[nodiscard]] </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QModelIndex</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    int</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> row</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    int</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> column</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QModelIndex</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> parent</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> QModelIndex</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  [[nodiscard]] </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QModelIndex</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> parent</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QModelIndex</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  [[nodiscard]] </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QModelIndex</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> sibling</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> row</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                                    int</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> column</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                                    const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QModelIndex</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  [[nodiscard]] </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">bool</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> hasChildren</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QModelIndex</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> parent</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">private:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  QList</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> m_tasks;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们马上就能发现问题，<code>data</code>方法依赖<code>index</code>的创建，但<code>index</code>的创建又依赖数据结构本身（因为要引用<code>parent_id</code>），那么，该如何防止循环调用呢？</p><p>答案在于根 index 的创建，我们观察<code>index</code>函数的声明，在<code>parent</code>为默认值时，该函数实际上在请求根 index ，我们看一下该函数的实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">QModelIndex</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> row, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> column, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QModelIndex</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> parent) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (row </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> ||</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> row </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">rowCount</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent) </span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">||</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> column </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> ||</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">      column </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">columnCount</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent)) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> parent_task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">from_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> current_tasks </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    TodoTask::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent_task) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">?</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> parent_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">id</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> :</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::INVALID_ID);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (row </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> current_tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">size</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> current_tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">at</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(row);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createIndex</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(row, column, task);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们推理一下该函数在<code>parent</code>为默认值时的行为，首先<code>rowCount</code>函数此时不需要依赖父索引数据，它在根索引时只需要查找所有<code>parent_id</code>为<code>INVALID_ID</code>的数据即可：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">rowCount</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QModelIndex</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> parent) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> parent_task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">from_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> count </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">    this</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">      -&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent_task)) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">?</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> parent_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">id</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> :</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::INVALID_ID)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">      .</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">size</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#A626A4;"> static_cast</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;int&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(count);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TodoTask::from_index</code>是工具函数，它调用<code>internalPointer</code>返回<strong>我们插入的自定义数据</strong>，因此，对无效的索引，该指针一定无效。</p><p>根索引不需要依赖任何父子，因此对于默认情况，<code>index</code>函数不会造成循环引用。因为根索引已经被创建，其它索引都可以通过根索引一步步获得。我们将数据指针放入了<code>internalPointer</code>，因此获得了索引就相当于获得了数据本身。</p><p>依据此，我们可以实现<code>data</code>方法：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">QVariant</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">data</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QModelIndex</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> index, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> role) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">from_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(index);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task)) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (role </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">==</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Qt::DisplayRole </span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">||</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> role </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">==</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Qt::EditRole) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">name</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更多索引函数" tabindex="-1"><a class="header-anchor" href="#更多索引函数"><span>更多索引函数</span></a></h3><p>我们还可以实现寻找父索引和兄弟索引的方法：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">QModelIndex</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">parent</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QModelIndex</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> index) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">from_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(index);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task)) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> parent_task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get_parent</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent_task)) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> v_row </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">row_of_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> v_column </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">column</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createIndex</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(v_row, v_column, parent_task);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面也涉及到几个 Helper ，分别是<code>get_parent</code>和<code>row_of_task</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">TodoTask::ConstPtr</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get_parent</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(TodoTask::ConstPtr task) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task)) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::INVALID_TASK;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> it_parent </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    std::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">find_if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">m_tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">begin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(), </span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">m_tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">end</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(), [</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">](</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">      return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">id</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> ==</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">parent_id</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    });</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> it_parent </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">!=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> m_tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">end</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">?</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">it_parent) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::INVALID_TASK;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">row_of_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(TodoTask::ConstPtr task) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> tasks </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">parent_id</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#A626A4;"> static_cast</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;int&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">indexOf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task));</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他们分别寻找当前节点的父节点和当前节点在父节点中的位置。</p><p>获取兄弟索引同理，先获取父索引下的节点列表，然后通过传入的位置寻找对应的数据：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">QModelIndex</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">sibling</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> row, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> column, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QModelIndex</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> index) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (row </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> ||</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> column </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> ||</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> !</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">isValid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> current_task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">from_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(index);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(current_task)) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> tasks </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">current_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">parent_id</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (row </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">size</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> sibling_task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">at</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(row);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createIndex</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(row, column, sibling_task);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是<code>hasChildren</code>函数，它只是把当前索引的数据拿出来，根据<code>id</code>查找子节点：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">bool</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">hasChildren</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QModelIndex</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> parent) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> parent_task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">from_index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(parent_task)) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> true</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> tasks </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">parent_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">id</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> !</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">isEmpty</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="支持修改-model" tabindex="-1"><a class="header-anchor" href="#支持修改-model"><span>支持修改 Model</span></a></h3><p>我们需要实现两个函数以支持 Model 的修改，分别是<code>flags</code>和<code>setData</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> : </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QAbstractItemModel</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  Q_OBJECT</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QList</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">tasks</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {}, </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">QObject</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> parent</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> nullptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  ~TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  [[nodiscard]] Qt::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">ItemFlags</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> flags</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QModelIndex</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  [[nodiscard]] </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">bool</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> setData</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QModelIndex</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                             const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> QVariant</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> value</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                             int</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> role</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Qt::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">EditRole</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">private:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  QList</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> m_tasks;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flags</code>是对索引的标记，标记它能够进行什么操作，我们重写这个函数，并添加<code>Qt::ItemIsEditable</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Qt::ItemFlags</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">flags</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QModelIndex</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> index) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  Qt::ItemFlags flags </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QAbstractItemModel::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">flags</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(index);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">index</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">isValid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> flags;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  flags </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">|=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Qt::ItemIsSelectable </span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">|</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Qt::ItemIsEnabled </span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">|</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Qt::ItemIsEditable;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> flags;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setData</code>并没有什么特殊的，因为我们只展示了<code>name</code>，所以<code>setData</code>只设置数据的<code>name</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">bool</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTaskModel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">setData</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QModelIndex</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> index,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                       const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> QVariant</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> value,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                       int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> role)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (role </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">!=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Qt::EditRole) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> false</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TodoTask::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">from_index_mut</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(index);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">!</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">TodoTask</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">is_valid</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task)) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> false</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">name</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> value</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">toString</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  emit </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">dataChanged</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(index, index);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> true</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>写下来感觉我贴了太多代码，没有什么说明，但我本人也比较纠结。实现 TreeModel 的根本是通过<code>internalPointer</code>传递数据，只要理解了这个，其他的内容都不需要解释什么。</p><p>这个例子比较原始，我们用的还是<code>QList</code>模拟真实的数据，如果读者感兴趣的话，可以参考 Qt 自己的<a href="https://github.com/qt/qt/blob/4.8/src/gui/dialogs/qfilesystemmodel.h" target="_blank" rel="noopener noreferrer">QFileSystemModel</a>（虽然是4.8的实现，但仍然非常有用）。</p>`,51)]))}const p=i(h,[["render",k]]),d=JSON.parse('{"path":"/article/jya0uzwf/","title":"Qt-MVC实践01-编写树形Model","lang":"zh-CN","frontmatter":{"title":"Qt-MVC实践01-编写树形Model","createTime":"2024/11/15 23:26:58","permalink":"/article/jya0uzwf/","tags":["C++","Qt","GUI","MVC"],"description":"笔者近期比较沉迷于 Qt ，朋友非常热情的跟我说了很多关于 Qt 的话题，勾起了我对它的兴趣，作为前端程序员，我也很好奇 Qt 是如何实现的 MVC 架构，于是便有了这篇文章。 代码来自笔者的Qt练习项目 关于MVC MVC实际上就是 Model-View-Controller 的缩写，它代表了一种用户交互方式，简单来说就是： Model： 负责存储数...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qt-MVC实践01-编写树形Model\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-16T02:16:01.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/jya0uzwf/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"Qt-MVC实践01-编写树形Model"}],["meta",{"property":"og:description","content":"笔者近期比较沉迷于 Qt ，朋友非常热情的跟我说了很多关于 Qt 的话题，勾起了我对它的兴趣，作为前端程序员，我也很好奇 Qt 是如何实现的 MVC 架构，于是便有了这篇文章。 代码来自笔者的Qt练习项目 关于MVC MVC实际上就是 Model-View-Controller 的缩写，它代表了一种用户交互方式，简单来说就是： Model： 负责存储数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-16T02:16:01.000Z"}],["meta",{"property":"article:tag","content":"MVC"}],["meta",{"property":"article:tag","content":"GUI"}],["meta",{"property":"article:tag","content":"Qt"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2024-11-16T02:16:01.000Z"}]]},"readingTime":{"minutes":6.15,"words":1846},"git":{"createdTime":1731723361000,"updatedTime":1731723361000,"contributors":[{"name":"Dessera","username":"Dessera","email":"lord.changed@foxmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"874d93a7f384c6b62992bc7817d7dff249f2e945","time":1731723361000,"email":"lord.changed@foxmail.com","author":"Dessera","message":"Qt-MVC实践01-编写树形Model"}]},"autoDesc":true,"filePathRelative":"GUI/Qt-MVC实践01-编写树形Model.md","headers":[],"categoryList":[{"id":"1e3042","sort":10005,"name":"GUI"}]}');export{p as comp,d as data};
