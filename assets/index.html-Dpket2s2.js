import{_ as s,c as a,a as e,o as n}from"./app-BYecpAAQ.js";const l={};function h(t,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p>我们按照<a href="https://en.cppreference.com/w/cpp/11.html" target="_blank" rel="noopener noreferrer">cppreference</a>给出的顺序整理一下C++11的重要特性：</p><h2 id="auto" tabindex="-1"><a class="header-anchor" href="#auto"><span><code>auto</code></span></a></h2><p><code>auto</code>在C中本来是界定变量存储方式的关键字，在C++11之后，该关键字行为被改变为进行类型推导，最简单的方法是通过<code>auto</code>声明变量：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> bar </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译器会通过<code>foo()</code>自动推导类型，我们也可以添加类型标记：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> bar </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> bar </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> bar </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么<code>auto</code>要有类型标记？这是因为某些情况下我们需要对类型进行进一步的解释，假如<code>foo()</code>返回的是一个<code>reference</code>，<code>auto</code>的行为就会产生歧义，标记可以消除这种歧义：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> bar </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">   // 拷贝</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> bar </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 引用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>C++11的<code>auto</code>也可以用来声明函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-&gt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是我们常说的<code>trailing-return-type</code>，某些时候我们需要这个特性来引用参数类型，比如下面这个函数返回<code>int</code>类型变量：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> -&gt; </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">decltype</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(a) </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++11的<code>auto</code>关键字尚且十分稚嫩，我们会在后续章节介绍更新标准的<code>auto</code>。</p><h2 id="decltype" tabindex="-1"><a class="header-anchor" href="#decltype"><span><code>decltype</code></span></a></h2><p><code>decltype</code>也是编译期类型推导的手段之一，它是编译器扩展<code>typeof</code>的标准化，简单来说，我们可以用他来推导已经存在变量的类型：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">decltype</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) bar;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样，在C++11时它也没有什么特殊之处，不过值得一提的是，对于括号表达式，<code>decltype</code>将其处理为左值引用，这个例子来自<a href="https://en.cppreference.com/w/cpp/language/decltype.html" target="_blank" rel="noopener noreferrer">cppreference</a>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> A</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">double</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> x; };</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> A</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">decltype</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">x</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) y;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">       // type of y is double (declared type)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">decltype</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">x</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)) z </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> y;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // type of z is const double&amp; (lvalue expression)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="default和delete" tabindex="-1"><a class="header-anchor" href="#default和delete"><span><code>default</code>和<code>delete</code></span></a></h2><p>以前，我们都知道编译器会帮助我们默认实现一些函数（析构、构造、拷贝等），现在我们可以显化这种默认行为：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  Foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 默认实现构造函数</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  ~Foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> delete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 删除析构函数实现</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果某个函数被标记为<code>delete</code>，那么编译时，如果有人引用这个符号，编译将会失败。</p><h2 id="final和override" tabindex="-1"><a class="header-anchor" href="#final和override"><span><code>final</code>和<code>override</code></span></a></h2><p>它们是面向对象工具的扩展，<code>final</code>用来标记虚函数不应被子类重写、或者类不应被继承：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Foo</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> final</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> : </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Base</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> bar</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">final</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>override</code>用来标记函数由另一个虚函数覆盖而来，它的目的是保证函数是虚函数，且由父类继承而来</p><h2 id="右值引用" tabindex="-1"><a class="header-anchor" href="#右值引用"><span>右值引用</span></a></h2><p>左值和右值是一个相当庞大的话题，一般来说：左值是被绑定到具体符号上的变量，他们的生命周期和符号作用域绑定，右值是那些表达式结束之后就不会再存在的临时对象（比如函数的返回值、表达式的结果、非字符字面量）。</p><p>我们非常了解左值引用，它就是为已经存在的左值创建一个<code>alias</code>,但右值引用是什么呢？在语义上，它代表将值的所有权进行转移，举个例子：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::vector</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;int&gt;</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> rval) </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这往往代表着经过这个函数之后，<code>rval</code>所指向的变量便走向了它的终结，所以，<code>foo</code>这个函数获得了<strong>处分</strong>这个变量的权利，那么，明确地知道变量即将消失有什么好处吗？答案是我们可以通过不拷贝的方式转移对象，为了达成这个目的，我们有了移动构造函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  Foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Foo</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> other</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // 不必执行深拷贝</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们也同时有了移动赋值函数，其二者大致相同，为了调用这样的函数，我们需要为其传入右值：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Foo a;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">());</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">std</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">move</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(a));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>std::move</code>是一个工具函数，其将左值的引用转换为右值引用，含义是：我们不会再使用该左值，因此将其移交（给其他函数或者移动构造）</p><p>但是需要注意，在进入函数之后，右值引用参数就变成了左值：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::vector</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;int&gt;</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> rval) </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 从此开始，\`rval\`是左值</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么是左值呢？因为现在的<code>rval</code>在各种意义上都符合左值的定义：和符号绑定、生命周期和作用域相当、所有权位于当前作用域。</p><p>如何重新将其变为右值引用？要么我们再std::move一次，要么我们可以使用<code>std::forward</code>，该函数将类型完美转发给其他函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::vector</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;int&gt;</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> rval) </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  bar</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">std</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">forward</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;&gt;(rval));</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>std::forward</code>利用了引用折叠机制，简单来说，我们的引用标记会被折叠，本例来源于<a href="https://en.cppreference.com/w/cpp/language/reference.html" target="_blank" rel="noopener noreferrer">cppreference</a>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">typedef</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">typedef</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> int</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  lref;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">typedef</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> int</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> rref;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> n;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">lref</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  r1 </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> n;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // type of r1 is int&amp;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">lref</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> r2 </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> n;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // type of r2 is int&amp;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">rref</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  r3 </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> n;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // type of r3 is int&amp;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">rref</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> r4 </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // type of r4 is int&amp;&amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解了这个，我们再来观察最后一个现象，那就是万能引用：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">template</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> &lt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">typename</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">T</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> val</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么<code>T</code>既能引用左值，也能引用右值？那是因为模板在展开时进行了引用折叠，如果推导为右值引用，仍然折叠为右值引用，如果推导为左值引用，仍然折叠为左值引用。</p><h2 id="有命名空间的枚举" tabindex="-1"><a class="header-anchor" href="#有命名空间的枚举"><span>有命名空间的枚举</span></a></h2><p>我们可以声明带有命名空间的枚举来隔离枚举符号：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">enum</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Color</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  RED</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  GREEN</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  BLUE</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用时，我们不能像C枚举一样直接使用<code>RED</code>，而是需要使用<code>Color::RED</code>，这样有效地隔离了枚举符号对命名空间的污染。</p><blockquote><p>也可以使用<code>enum struct</code></p></blockquote><h2 id="constexpr和字面类型" tabindex="-1"><a class="header-anchor" href="#constexpr和字面类型"><span><code>constexpr</code>和字面类型</span></a></h2><p>简单来说，<code>constexpr</code>是对字面量的扩展，其表示变量和函数可以在编译期展开，利用这个关键字，部分操作可以直接在编译期完成，对于变量我们可以这么声明：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">constexpr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Foo value{};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在C++11时，能被声明为<code>constexpr</code>的类型，其必须是字面量类型，任何函数想要声明为<code>constexpr</code>，其参数和返回值类型必须是字面量类型。</p><blockquote><p>关于字面量类型，请参考<a href="https://en.cppreference.com/w/cpp/language/constant_expression.html#Literal_type" target="_blank" rel="noopener noreferrer">cppreference</a>。</p></blockquote><p>有关<code>constexpr</code>的特性无比庞大，且每个版本都有一定程度的修订，不过如果读者围绕C++11或者C++17进行工作，并且不需要元编程特性，则<code>constexpr</code>没有什么太大用处（除了给我们定义一些常量之外）</p><h2 id="列表初始化" tabindex="-1"><a class="header-anchor" href="#列表初始化"><span>列表初始化</span></a></h2><p>过去，我们自定义的列表类型不能直接兼容<code>c-style</code>的数组初始化方式，C++11为了统一类型初始化，创造了列表初始化和<code>std::initializer_list</code>。</p><p>列表初始化允许我们使用大括号调用类型的构造函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Foo obj{ arg1, arg2 };</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // 直接初始化</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Foo obj </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { arg1, arg2 };</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"> // 拷贝初始化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>基于这个特性，配合<code>std::initializer_list</code>，我们可以支持自定义列表类型的初始化：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">std::vector</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;int&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> arr{ </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">4</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="nullptr" tabindex="-1"><a class="header-anchor" href="#nullptr"><span><code>nullptr</code></span></a></h2><p><code>c-style</code>的空指针<code>NULL</code>一般被定义为：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> NULL</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ((</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们如果将<code>void*</code>看作<code>any</code>的话，实际上使用这个定义是极其危险的，因为<code>NULL</code>实际上不仅可以是指针类型，也可以转换为任何类型，在拥有函数重载功能的C++中，这种性质很容易造成多义性。</p><p><code>nullptr</code>是<code>std::nullptr_t</code>的字面量实例，它只能被隐式转换成任何<strong>指针类型</strong>，避免了我们对函数重载中指针和整形变量的误判。</p><h2 id="using" tabindex="-1"><a class="header-anchor" href="#using"><span><code>using</code></span></a></h2><p><code>using</code>是对<code>typedef</code>的升级，其作用是对类型进行重命名：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">using</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> num_t</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">using</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> num_vec_t</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在重命名时保留模板：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">template</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> &lt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">typename</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">using</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> vec_t</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可变参数模板" tabindex="-1"><a class="header-anchor" href="#可变参数模板"><span>可变参数模板</span></a></h2><p>我们可以使用<code>...</code>声明可变参数模板：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">template</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> &lt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">typename</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">... </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Args</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(Args... args) </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  bar</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">args...);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在作用域内部，我们可以使用<code>...</code>解包可变参数，<code>&amp;args...</code>将参数包解包为指针，再传递给<code>bar</code>，我们也可以使用<code>[]</code>访问具体参数。</p><blockquote><p><code>fold-expression</code>于C++17引入</p></blockquote><h2 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span><code>lambda</code>表达式</span></a></h2><p><code>lambda</code>表达式是源于数学的概念，在编程语言中一般代指嵌套函数声明，或者更为本质的函数对象。</p><p>在C++11后，我们可以通过如下方式声明<code>lambda</code>表达式：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> f </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> [](</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) { </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">+</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">f</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中括号标记的部分被称为捕获列表，可以将当前作用域中的符号以拷贝或引用的方式传递给<code>lambda</code>表达式：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> base </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 10</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> f </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> [</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">base</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">](</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) { </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">+</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> base; };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">f</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">   // 11</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，编译器实现<code>lambda</code>表达式的方法是构造一个匿名类，并重写其<code>operator()</code>，捕获列表则作为参数传递给类，这也是为什么我们不能写出具体的<code>lambda</code>类型。</p><p>如果想要引用<code>lambda</code>作为参数，需要使用模板参数，或者<code>std::function</code>。</p><h2 id="静态断言" tabindex="-1"><a class="header-anchor" href="#静态断言"><span>静态断言</span></a></h2><p><code>static_assert</code>用来进行编译期断言，可以作为一种模板类型检查手段，例子来源于<a href="https://en.cppreference.com/w/cpp/language/static_assert.html" target="_blank" rel="noopener noreferrer">cppreference</a>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">template</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> swap</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">T</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">T</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> b</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">noexcept</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    static_assert</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::is_copy_constructible_v</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">T</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                  &quot;Swap requires copying&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    static_assert</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::is_nothrow_copy_constructible_v</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">T</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                  std::is_nothrow_copy_assignable_v</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">T</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                  &quot;Swap requires nothrow copy/assign&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> c </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> b;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    b </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> a;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    a </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> c;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,88)]))}const k=s(l,[["render",h]]),d=JSON.parse('{"path":"/article/sgasmc62/","title":"C++整理-C++11重要特性","lang":"zh-CN","frontmatter":{"title":"C++整理-C++11重要特性","createTime":"2025/08/28 16:04:47","permalink":"/article/sgasmc62/","tags":["C++"],"description":"我们按照cppreference给出的顺序整理一下C++11的重要特性： auto auto在C中本来是界定变量存储方式的关键字，在C++11之后，该关键字行为被改变为进行类型推导，最简单的方法是通过auto声明变量： 编译器会通过foo()自动推导类型，我们也可以添加类型标记： 为什么auto要有类型标记？这是因为某些情况下我们需要对类型进行进一步的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++整理-C++11重要特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-01T05:34:41.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/sgasmc62/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"C++整理-C++11重要特性"}],["meta",{"property":"og:description","content":"我们按照cppreference给出的顺序整理一下C++11的重要特性： auto auto在C中本来是界定变量存储方式的关键字，在C++11之后，该关键字行为被改变为进行类型推导，最简单的方法是通过auto声明变量： 编译器会通过foo()自动推导类型，我们也可以添加类型标记： 为什么auto要有类型标记？这是因为某些情况下我们需要对类型进行进一步的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T05:34:41.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2025-09-01T05:34:41.000Z"}]]},"readingTime":{"minutes":7.88,"words":2365},"git":{"createdTime":1756704881000,"updatedTime":1756704881000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"4bba06d9b785537f52e46870bcdeeebfdf47cbac","time":1756704881000,"email":"dessera@qq.com","author":"Dessera","message":"C++11"}]},"autoDesc":true,"filePathRelative":"C&CPP/C++整理-C++11重要特性.md","headers":[],"categoryList":[{"id":"135ccb","sort":10006,"name":"C&CPP"}]}');export{k as comp,d as data};
