import{_ as t,c as h,a as e,b as l,d as s,e as a,r as k,o as p}from"./app-BYecpAAQ.js";const d={};function r(c,i){const n=k("Mermaid");return p(),h("div",null,[i[0]||(i[0]=e('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>某种意义上说，<code>C</code>在语言层面支持的抽象能力非常有限，我们都对<code>C++</code>或者<code>Python</code>中利用面向对象的方式组织和抽象代码的方式印象深刻，但一旦谈论到<code>C</code>语言，大家往往都只会认为它粗糙、原始，但笔者看来，某些时候原始的<code>C</code>语言反而能带来更大的灵活性。</p><p>几个月前跟朋友说过关于<code>C</code>的抽象问题，我们最后达成的共识之一是，<code>C</code>能够模拟几乎所有的编程范式，但它无法完美兼容这些范式，它总是缺少诸如继承类型检查、生命周期钩子等等<strong>锦上添花</strong>的特性。</p><p>这篇文章从简单抽象方法入手，讨论一下对于<code>C</code>语言来说，可用的抽象手段有哪些。</p><h2 id="首先-为什么抽象" tabindex="-1"><a class="header-anchor" href="#首先-为什么抽象"><span>首先，为什么抽象？</span></a></h2><p>抽象是一种很常见的代码工程技巧，其最根本的目的就是<strong>代码复用</strong>，什么是代码复用？假设我们正在编写一个程序，它的功能是从不同的源中读取内容并翻译为中文，我们可以用流程图表示如下：</p>',6)),l(n,{code:"eJxLy8kvT85ILCpR8AniUgCCIBfD6Bfrdz+b1v5k97ZYBV1dO4WQIMPo5zP3Pd217Pn+3S/WT4SI+oeGRL/YN/lp+65YLgAZcR+g"}),i[1]||(i[1]=s("p",null,"这段流程图表示从文件读取内容，利用百度翻译翻译为中文，最后输出。",-1)),i[2]||(i[2]=s("p",null,[a("现在，我们需要新增从"),s("code",null,"HTTP"),a("接口和远程"),s("code",null,"SSH"),a("读取内容的功能，我们只需要将流程图修改为：")],-1)),l(n,{code:"eJxLy8kvT85ILCpR8AniUgCCIBfD6Bfrdz+b1v5k97ZYBV1dO4WQIMPo5zP3Pd217Pn+3S/WT4yFKjQCKfQICQmAK4NKGIMkgoM9UMWBNJjvHxoS/WLf5Kftu2K5AHo8L0Y="}),i[3]||(i[3]=s("p",null,"这时候我们其实就已经进行了基本的代码复用，我们并没有写三遍百度翻译，而是为百度翻译设计了一个接口，让不同的读取器都使用这个接口。",-1)),i[4]||(i[4]=s("p",null,"现在，我们需要一个从特殊网站爬取内容，并按特定方式处理后再翻译的功能，我们就需要再新增一个流程：",-1)),l(n,{code:"eJxLy8kvT85ILCpR8AniUgCCIBfD6Bfrdz+b1v5k97ZYBV1dO4WQIMPo5zP3Pd217Pn+3S/WT4yFKjQCKfQICQmAK4NKGIMkgoM90MVNQOLPO9a8mLn6/Z6el4tani5peT6hDVUZkAbz/UNDol/sm/y0fVcsFwCvBkHq"}),i[5]||(i[5]=s("p",null,[a("我们很快就会发现，读爬虫最开始同样是"),s("code",null,"HTTP"),a("请求，我们完全可以复用"),s("code",null,"HTTP"),a("请求的代码，只需要在"),s("code",null,"HTTP"),a("请求后增加一个预处理步骤即可，我们只需要修改流程图：")],-1)),l(n,{code:"eJxLy8kvT85ILCpR8AniUgCCIBfD6Bfrdz+b1v5k97ZYBV1dO4WQIMPo5zP3Pd217Pn+3S/WT4yFKjQCKfQICQmAK4NKGIMkgoM90MWNwPyAINfol4tani5peT6hDWIWUAhFKZAG8/1DQ6Jf7Jv8tH1XLBcAYm48SA=="}),i[6]||(i[6]=e(`<p>这就是最基本的代码复用，我们的目的是尽可能减少代码重复，从而提高代码的可维护性，而抽象就是其最重要的手段之一。根据笔者的经验，你所需要知道的全部抽象技巧，都可以归结为一句话——<strong>依赖接口，而不是实现</strong>。</p><h2 id="如何抽象" tabindex="-1"><a class="header-anchor" href="#如何抽象"><span>如何抽象？</span></a></h2><p>抽象手段是一个<strong>因地制宜</strong>的问题，不同的语言，不同的场景，抽象的手段往往不同，如果我们只讨论<code>C</code>语言的话，我们浅谈以下几种方法：</p><ol><li><p><strong>函数指针</strong>：通过留下全局或者局部函数指针，让用户动态替换这些函数来达到动态抽象的目的，这种方法最为原始，但是是其它动态抽象的基础：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 需要多态的模块</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TextReader</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">read)(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TextReader</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> self, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> src, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">char*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> buf, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> len);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 定义多种实现</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">local_read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> TextReader</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> buf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> len</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">http_read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> TextReader</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> buf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> len</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 使用时，通过函数指针来动态替换实现</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  char</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;"> buf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1024</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">] </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> TextReader rd;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  rd</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">read</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> http_read;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  rd</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">rd, </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;http://example.com&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, buf, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">sizeof</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(buf));</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>选择编译和弱引用</strong>：通过编译期宏选择编译实现或者通过<code>GNU</code>扩展的<code>__attribute__((weak))</code>来覆盖默认实现，因为这两者的手段类似，我们放在一起讨论：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 用宏指定实现</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#ifdef</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> USE_HTTP</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> buf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> len</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#else</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> buf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> len</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 用弱引用指定默认实现</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__attribute__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">weak</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">))</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> buf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> len</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 使用时，如果弱引用被覆盖，则使用覆盖的实现</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  char</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;"> buf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1024</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">] </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;http://example.com&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, buf, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">sizeof</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(buf));</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>面向对象</strong>：通过继承、多态等特性实现基于父子关系的抽象和复用，在<code>C</code>语言中较难实现。</p></li><li><p><strong>接口模式（组合模式）</strong>：实际上是面向对象的弱化版本，但它强调纯虚父类，用一个只包含纯虚函数的父类来约束子类行为。</p></li><li><p><strong>概念concept</strong>：概念是<code>C++</code>引入的概念，是一种元编程的约束手段，在<code>Rust</code>中也有相应的关键字，名为<code>trait</code>，它类似于接口模式，但实际上是函数式编程的副产品，有更强大的约束和复用能力。</p></li></ol><p>前面的方法我们或多或少都有所了解，我们今天主要介绍的是<code>concept</code>，也就是<code>trait</code>。</p><h2 id="trait-简介" tabindex="-1"><a class="header-anchor" href="#trait-简介"><span>trait 简介</span></a></h2><blockquote><p>下面的介绍是对<code>Rust trait</code>的简介，详情请参考<a href="https://kaisery.github.io/trpl-zh-cn/ch10-02-traits.html" target="_blank" rel="noopener noreferrer">Rust程序设计语言</a>。</p></blockquote><p><code>trait</code>某种意义上是对组合模式的延伸版本，它定义了一个类<strong>能够做什么</strong>或者<strong>是什么</strong>，比如我们接着上面的话题，从源读取内容可以被抽象为一个<code>Readable</code>或者<code>Reader</code>，它能够读取内容，那么我们就可以定义一个<code>trait</code>：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-rust"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">pub</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> trait</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    fn</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(&amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">str</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，任何实现了<code>Readable</code>的类型都可以被当作<code>Reader</code>来使用，比如：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-rust"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">pub</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> struct</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> HttpReader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">impl</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> Readable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> for</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> HttpReader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    fn</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(&amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">str</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">        // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数可以声明他们返回一个实现了<code>Readable</code>的类型，或者需要一个实现了<code>Readable</code>的类型作为参数，这被称为约束，比如：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-rust"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">fn</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> get_reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() -&gt; </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">impl</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> Readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">fn</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> inspect_read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: &amp;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">impl</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> Readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就可以在函数中返回一个实现了<code>Readable</code>的类型，而不用关心它具体是什么，只需要知道它能够被读取即可。</p><p>一个<code>trait</code>的实现可以依赖其他的<code>trait</code>，我们可以参考<code>Rust</code>文档中的一段：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-rust"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">impl</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">Display</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">ToString</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> for</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // --snip--</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码为任何实现了<code>Display</code>的类型实现了<code>ToString</code>，而<code>Display</code>是一个类型序列化的<code>trait</code>。</p><p><code>trait</code>另一个特性是可以复合约束泛型，比如：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-rust"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">fn</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> some_function</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">U</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;(</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">u</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">U</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; </span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">i32</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">where</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">    T</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">Display</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> + </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">Clone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">    U</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">Clone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> + </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;">Debug</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数要求输入参数分别实现了<code>Display</code>和<code>Clone</code>，以及<code>Clone</code>和<code>Debug</code>，这种复合约束能进一步限制函数的输入和输出类型，从而提高函数的可用性。</p><p>我们可以总结出以下几个特性：</p><ul><li>规定类的行为</li><li><code>trait</code>选择实现</li><li>对泛型的单约束/多约束</li></ul><h2 id="案例-linux中的抽象" tabindex="-1"><a class="header-anchor" href="#案例-linux中的抽象"><span>案例：Linux中的抽象</span></a></h2><p>笔者实际上对<code>Linux</code>的了解并不深刻，不过对其中<strong>代码复用</strong>的方式略知一二，这里提及几个经典范例：</p><ol><li><code>VFS</code>：<code>VFS</code>是<code>Linux</code>虚拟文件系统，它将不同文件系统的实现抽象为一个统一的接口（函数指针），从而实现了抽象。</li></ol><blockquote><p>可以参考开源项目<code>fibdrv</code>中的<a href="https://github.com/sysprog21/fibdrv/blob/master/fibdrv.c#L112" target="_blank" rel="noopener noreferrer">fibdrv.c</a></p></blockquote><ol start="2"><li><code>list_head</code>：<code>list_head</code>是一个链表节点，它将链表操作从真正的链表中抽离出来，通过<code>container_of</code>宏和实际链表元素之间相互转换，从而实现了链表操作的复用。</li></ol><p>结合<code>VFS</code>（函数指针）和<code>list_head</code>的抽象方式，我们能够近似地在<code>C</code>中实现<code>trait</code>。</p><blockquote><p><code>Linux</code>抽象的精妙之处就在于它在合适的地方选用了合适的抽象方式，达到了性能和代码可维护性的最佳平衡。</p></blockquote><h2 id="在-c-中实现-trait" tabindex="-1"><a class="header-anchor" href="#在-c-中实现-trait"><span>在 C 中实现 trait</span></a></h2><p>为什么说<code>list_head</code>对<code>trait</code>的实现有启发式的帮助呢？如果我们不把它当作<code>list_head</code>，而当作<code>Iterable</code>，那么我们很快就能发现，<code>list_head</code>实际上是一个类似<code>trait</code>的抽象，而针对它的一系列方法，则相当于上文提到的<code>trait</code>约束。</p><p>但<code>list_head</code>只能启发针对约束的<code>trait</code>实现，而对于<code>trait</code>的规定类的行为，我们要借助<code>VFS</code>的启发，在构造<code>trait</code>派生结构体时，我们可以为<code>trait</code>结构体动态指定函数指针来达到统一接口，约束类行为的目的。</p><p>基于以上的思想，我们可以写出如下代码，仍然以<code>Reader</code>为例：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Readable</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">read)(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Readable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> self, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> src, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">char*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> buf, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> len);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trait" tabindex="-1"><a class="header-anchor" href="#trait"><span>trait</span></a></h3><p>如果一个类要实现该<code>trait</code>，则只需要将该<code>trait</code>结构体嵌入到类中，并实现<code>read</code>函数即可：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> HttpReader</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Readable readable;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">http_read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> Readable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> src</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> buf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> len</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">init_http_reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> HttpReader</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">read</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> http_read;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trait-约束" tabindex="-1"><a class="header-anchor" href="#trait-约束"><span>trait 约束</span></a></h3><p>一个函数如果依赖<code>Readable</code>，则只需要声明该函数的参数为<code>struct Readable*</code>即可，而不用关心具体是什么类型，比如：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">do_read</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> Readable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 在这里尽情地使用 reader-&gt;read</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们也可以为返回值添加约束，比如：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Readable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get_reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 通常是一个 Factory 函数，记得同时提供一个 destroy 函数</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们甚至可以为结构体添加约束，比如：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Application</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Readable </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">reader;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> some_magic_number;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">run_app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> Application</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 在这里尽情地使用 app-&gt;reader-&gt;read</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多约束" tabindex="-1"><a class="header-anchor" href="#多约束"><span>多约束</span></a></h3><p>我们可以引入一个中间结构体实现多约束，实际上，在多约束的场景中，我们只在乎返回或者接受的类型具体实现了哪几个<code>trait</code>，而不在乎具体是什么类型，因此我们可以提炼出一个只包含<code>trait</code>指针的结构体，比如：</p><blockquote><p>假设我们现在已经实现了 <code>Writable</code> 和 <code>Readable</code> 两个 <code>trait</code>，分别代表可写和可读（只是举例子）</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ReadableAndWritable</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Readable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> readable;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Writable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> writable;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">do_read_write</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> ReadableAndWritable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> rw</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 在这里，通过这个纯粹的\`trait\`结构体，我们就可以同时使用 readable 和 writable</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们实现一个<code>Port</code>：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> HttpPort</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Readable readable;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Writable writable;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">init_http_port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> HttpPort</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">read</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> http_read;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">writable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">write</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> http_write;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何将其传入<code>do_read_write</code>呢？我们只需要将<code>HttpPort</code>中的<code>readable</code>和<code>writable</code>提取出来即可：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> HttpPort port;</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  init_http_port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">port);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ReadableAndWritable rw;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  rw</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">readable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  rw</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">writable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">writable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  do_read_write</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">rw);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值同理：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ReadableAndWritable</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get_reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 无论用什么方法，我们在此创建了一个 Writable + Readable 的对象 port</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ReadableAndWritable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> rw </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> malloc</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">sizeof</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ReadableAndWritable));</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  rw</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">readable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  rw</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">writable</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">port</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">writable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> rw;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里使用值传递显然更好，因为<code>rw</code>只是一个中间变量，不需要关心它的生命周期。</p></blockquote><p>如何在其他函数中获取到<code>Port</code>本体呢？我们只需要一个<code>container_of</code>宏即可：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> container_of</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">member</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) ({                      </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  const</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> typeof</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">( </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">type </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">member</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> )</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> *</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">__mptr </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (ptr);          </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  (type </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)( (</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">char</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> *</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)__mptr </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> offsetof</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">(type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">member)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> );})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就可以通过<code>container_of</code>宏获取到<code>HttpPort</code>本体了：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> HttpPort</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> port </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> container_of</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">rw</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> struct</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> HttpPort</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>这里实际上有一个问题，就能<code>readable</code>和<code>writable</code>的来源很可能不是同一个<code>HttpPort</code>，但笔者没有找到好的办法。</p></blockquote><h3 id="选择实现" tabindex="-1"><a class="header-anchor" href="#选择实现"><span>选择实现</span></a></h3><p>选择实现的本质上是一个<code>trait</code>实现依赖另一个<code>trait</code>，在实现它之前，我们需要总结一下上文中出现的两种包括<code>trait</code>的方法：</p><ol><li><code>trait</code>结构体嵌入类中，这样表示了该类是<code>trait</code>的实例，并且实现了<code>trait</code>中的方法。</li><li>包含<code>trait</code>指针，这表示该类/函数依赖这个<code>trait</code>，并且只关心这个<code>trait</code>包括的操作。</li></ol><p>那么，我们可以发现，一个<code>trait</code>实现依赖另一个<code>trait</code>，本质上就是将一个<code>trait</code>指针嵌入到另一个<code>trait</code>实现的结构体中，比如：</p><blockquote><p>假设 HttpReader 依赖 Sync</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> HttpReader</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Readable readable;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Sync </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">sync;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，<code>HttpReader</code>依赖<code>Sync</code>，实现了<code>Readable</code>，在创建它时，我们需要同时传入<code>Sync</code>的实现：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">init_http_reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> HttpReader</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> Sync</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> sync</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">readable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">read</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> http_read;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  reader</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">sync</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> sync;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>值得注意的是，我们刻意地闭口不谈内存管理，读者如果希望实践这套抽象方法，应当自行实现内存管理，这取决于每个人的代码风格，笔者不在此赘述。</p><p>正如我上文做说的，知道抽象的方法是写出好代码的第一步，更难能可贵的是，如何在合适的地方使用合适的抽象，这需要我们不断积累经验，不断学习，不断实践。</p><p>我们所介绍的<code>trait</code>在其他语言中是静态实现，几乎是零成本抽象，但在C语言中，我们只能通过动态实现，通过<code>trait</code>结构体嵌入类中，或者通过<code>trait</code>指针包含类中，来实现抽象，这无疑增加了代码的复杂度和成本，因此它不可能作为一种通用的抽象方法，读者应当根据具体场景选择合适的抽象方法。</p>`,72))])}const g=t(d,[["render",r]]),B=JSON.parse('{"path":"/article/3acise8k/","title":"C语言抽象-实践trait","lang":"zh-CN","frontmatter":{"title":"C语言抽象-实践trait","createTime":"2025/02/27 15:17:55","permalink":"/article/3acise8k/","tags":["C","GNU","代码复用","抽象"],"description":"前言 某种意义上说，C在语言层面支持的抽象能力非常有限，我们都对C++或者Python中利用面向对象的方式组织和抽象代码的方式印象深刻，但一旦谈论到C语言，大家往往都只会认为它粗糙、原始，但笔者看来，某些时候原始的C语言反而能带来更大的灵活性。 几个月前跟朋友说过关于C的抽象问题，我们最后达成的共识之一是，C能够模拟几乎所有的编程范式，但它无法完美兼容...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C语言抽象-实践trait\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-27T15:02:43.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/3acise8k/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"C语言抽象-实践trait"}],["meta",{"property":"og:description","content":"前言 某种意义上说，C在语言层面支持的抽象能力非常有限，我们都对C++或者Python中利用面向对象的方式组织和抽象代码的方式印象深刻，但一旦谈论到C语言，大家往往都只会认为它粗糙、原始，但笔者看来，某些时候原始的C语言反而能带来更大的灵活性。 几个月前跟朋友说过关于C的抽象问题，我们最后达成的共识之一是，C能够模拟几乎所有的编程范式，但它无法完美兼容..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T15:02:43.000Z"}],["meta",{"property":"article:tag","content":"抽象"}],["meta",{"property":"article:tag","content":"代码复用"}],["meta",{"property":"article:tag","content":"GNU"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-02-27T15:02:43.000Z"}]]},"readingTime":{"minutes":10.98,"words":3295},"git":{"createdTime":1740647042000,"updatedTime":1740668563000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":4,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"8f81f32a1cd36ff91306b579591fa6a8737e3445","time":1740668563000,"email":"dessera@qq.com","author":"Dessera","message":"重写"},{"hash":"359f0735375fc710e04910530f1786031e082d4f","time":1740647632000,"email":"dessera@qq.com","author":"Dessera","message":"修改代码部分"},{"hash":"6c6f5c6ac9fd808a4c40dacd495efc8f3c73b4c6","time":1740647139000,"email":"dessera@qq.com","author":"Dessera","message":"添加标签"},{"hash":"e5f56b43fcd5898d27e50267f92351a758899f56","time":1740647042000,"email":"dessera@qq.com","author":"Dessera","message":"ctrait和一部分nix文档"}]},"autoDesc":true,"filePathRelative":"C&CPP/C语言抽象-实践trait.md","headers":[],"categoryList":[{"id":"135ccb","sort":10006,"name":"C&CPP"}]}');export{g as comp,B as data};
