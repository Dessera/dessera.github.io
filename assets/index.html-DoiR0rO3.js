import{_ as s,c as a,a as n,o as l}from"./app-BYecpAAQ.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="进程的内存模型" tabindex="-1"><a class="header-anchor" href="#进程的内存模型"><span>进程的内存模型</span></a></h2><p>无论在什么平台上，一个完整的进程都应该具有以下部分：</p><ul><li>代码段（<code>.text*</code>）</li><li>数据段（包括<code>.data</code>、<code>.bss</code>和<code>.rodata</code>等）</li><li>堆区</li><li>栈区</li><li>内核区域</li></ul><p>在Linux中，进程的内存空间看起来是这样的（由高地址到低地址）：</p><table><thead><tr><th>区域</th><th>内容</th></tr></thead><tbody><tr><td>内核</td><td>控制程序执行的操作系统功能</td></tr><tr><td>栈</td><td>环境变量、argv、argc、main函数的局部变量，其他函数的局部变量（向下增长）</td></tr><tr><td>闲置</td><td>栈的增长空间</td></tr><tr><td>共享内存</td><td>动态链接库</td></tr><tr><td>闲置</td><td>堆的增长空间</td></tr><tr><td>堆</td><td>需要申请的大内存空间（向上增长）</td></tr><tr><td>数据段</td><td>初始化数据，未初始化数据</td></tr><tr><td>代码段</td><td>静态链接库函数、其他程序函数、main函数、启动例程（crt0.o）</td></tr></tbody></table><p>我们可以用一个例程简单验证一下上面的模型：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#include</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#include</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">static</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> gval </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 10</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> argc</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char**</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> argv</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        int*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> hval </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">malloc</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">sizeof</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;in stack:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&amp;argc:   </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">argc);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&amp;argv:   </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, argv);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&amp;&amp;hval:  </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">hval);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;in shared:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&amp;printf: </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, printf);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;in heap:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&amp;hval:   </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, hval);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;in data:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&amp;gval:   </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">gval);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;in text:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        printf</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;&amp;main:   </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, main);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        free</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(hval);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在无优化、调试模式（<code>-O0 -g</code>）下编译，运行结果可能是（注意，这里的&amp;符号不代表我们取实际程序中的符号地址）：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">in stack:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&amp;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">argc:</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">   0x7ffe19d8478c</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&amp;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">argv:</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">   0x7ffe19d848b8</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&amp;&amp;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">hval:</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  0x7ffe19d84790</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">in shared:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&amp;</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">printf</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">:</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0x7fdd6685b6c0</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">in heap:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&amp;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">hval:</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">   0x372202a0</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">in data:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&amp;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">gval:</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">   0x404010</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">in text:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&amp;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">main:</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">   0x401166</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，他们的地址确实是按照上述模型分布的。</p><blockquote><p>有读者可能会疑问为什么<code>argv</code>的地址更高，其实是因为我们传递<code>argc</code>使用的是值传递，所以实际上<code>argc</code>的生命周期是<code>main</code>函数，创建的时间自然比<code>argv</code>要晚，如果我们查看的是<code>argv</code>这个指针的地址，那么此时三者应当是按顺序的。</p></blockquote><h2 id="静态库" tabindex="-1"><a class="header-anchor" href="#静态库"><span>静态库</span></a></h2><p>事实上，静态库就是打包的目标文件集合，链接一个静态库的含义就是将这些目标文件重新拆开，与当前项目的目标文件一起链接，我们可以使用<code>ar</code>工具从目标文件创建静态库：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ar</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> rcs</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libxxx.a</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> filea.o</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> fileb.o</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以使用<code>ar</code>对静态库进行修改：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ar</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> t</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libxxx.a</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">           # 查看静态库中的文件</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ar</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> x</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libxxx.a</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">           # 提取静态库中的文件</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ar</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> r</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libxxx.a</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> filen.o</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">   # 加入新文件到静态库</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ar</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> d</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libxxx.a</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> filex.o</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">   # 从静态库中删除文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态库" tabindex="-1"><a class="header-anchor" href="#动态库"><span>动态库</span></a></h2><p>静态库有显而易见的二进制膨胀问题，为了解决该问题，我们需要引入动态库，它在程序运行时动态加载到进程的内存空间中（使用内存映射），要实现动态库的动态装载，我们需要保证：</p><ul><li>用户程序可以找到动态库的ABI符号</li><li>动态库可以找到自己的ABI符号</li></ul><p>为此，我们实现了两种技术：</p><h3 id="装载时重定位-ltr" tabindex="-1"><a class="header-anchor" href="#装载时重定位-ltr"><span>装载时重定位（LTR）</span></a></h3><p>在加载动态库时修补动态库的<code>.text</code>段，硬编码内存中外部符号的位置，其会产生如下问题：</p><ul><li>因为进程内存空间的不同，针对每一个程序都需要将动态库修补成不同的样子（使用不同的绝对地址），导致多个相同的动态库被载入内存</li><li>对于动态库中的每一个符号<strong>引用</strong>都需要进行修补，在用户程序引入很多动态库时，加载时间陡然增长</li><li>可写的<code>.text</code>段会造成安全问题</li></ul><h3 id="位置无关代码-pic" tabindex="-1"><a class="header-anchor" href="#位置无关代码-pic"><span>位置无关代码（PIC）</span></a></h3><p>现在，我们引入一个<code>GOT</code>表（全局偏移量表）：对所有外部符号，我们都不直接访问符号，而是通过<code>GOT</code>表作为跳板访问符号（<code>GOT</code>表和代码段的距离在编译期已知）。这样，我们在装载时只需要修改这个<code>GOT</code>表即可，避免了修改<code>.text</code>段的危险行为，除此之外，我们将变化封装在了GOT表内，因此我们可以简单地复用动态库的其他部分，包括代码段和数据段等。</p><blockquote><p>为了正确调用外部函数，我们还引入了<code>PLT</code>表，在第一次调用外部函数时，我们会先跳转到<code>PLT</code>表，其负责解析外部函数的实际位置，并设置好<code>GOT</code>表对应的符号关系，并在下次调用时经由<code>PLT</code>直接使用<code>GOT</code>表项。</p></blockquote><p>除此之外，<code>PIC</code>既适用于解析自己的符号，也适用于解析来自其加载的库的引用，可以应用同一套方案解决我们的两个问题。</p><h3 id="动态库的符号冲突" tabindex="-1"><a class="header-anchor" href="#动态库的符号冲突"><span>动态库的符号冲突</span></a></h3><p>当链接动态库的程序发生符号冲突时，链接器一般会按照一定优先级抉择符号：</p><ul><li>用户二进制文件符号</li><li>动态库可见符号</li><li>静态符号</li></ul><p>事实上只有前二者会发生冲突，如果冲突发生在用户二进制文件符号之间（非<code>static</code>），那么毋庸置疑，编译期即会出现错误，如果用户二进制文件符号与动态库ABI冲突，则优先选择用户二进制文件符号，如果两个动态库的ABI相互冲突，则按照链接顺序选择！</p><h3 id="单例问题" tabindex="-1"><a class="header-anchor" href="#单例问题"><span>单例问题</span></a></h3><p>显而易见地，我们不应当将单例放置于静态库中，因为这会导致不可避免的单例重复，放置在动态库中，因其保证了内存中每个动态库只有一份，所以单例也只有一份。</p>`,33)]))}const k=s(t,[["render",e]]),d=JSON.parse('{"path":"/article/7ql8hkus/","title":"读书笔记-高级C&C++编译技术：进程内存模型","lang":"zh-CN","frontmatter":{"title":"读书笔记-高级C&C++编译技术：进程内存模型","createTime":"2025/08/07 14:48:42","permalink":"/article/7ql8hkus/","tags":["C","C++"],"description":"进程的内存模型 无论在什么平台上，一个完整的进程都应该具有以下部分： 代码段（.text*） 数据段（包括.data、.bss和.rodata等） 堆区 栈区 内核区域 在Linux中，进程的内存空间看起来是这样的（由高地址到低地址）： 我们可以用一个例程简单验证一下上面的模型： 在无优化、调试模式（-O0 -g）下编译，运行结果可能是（注意，这里的&...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"读书笔记-高级C&C++编译技术：进程内存模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-08T11:03:23.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/7ql8hkus/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"读书笔记-高级C&C++编译技术：进程内存模型"}],["meta",{"property":"og:description","content":"进程的内存模型 无论在什么平台上，一个完整的进程都应该具有以下部分： 代码段（.text*） 数据段（包括.data、.bss和.rodata等） 堆区 栈区 内核区域 在Linux中，进程的内存空间看起来是这样的（由高地址到低地址）： 我们可以用一个例程简单验证一下上面的模型： 在无优化、调试模式（-O0 -g）下编译，运行结果可能是（注意，这里的&..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-08T11:03:23.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-10-08T11:03:23.000Z"}]]},"readingTime":{"minutes":4.8,"words":1439},"git":{"createdTime":1754576933000,"updatedTime":1759921403000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"8822e76d8d2b38cdc55efc7d8980256c70213d4a","time":1759921403000,"email":"dessera@qq.com","author":"Dessera","message":"MNN01"},{"hash":"cb551bc6622726436389726f04ca664dc2d51c36","time":1754576933000,"email":"dessera@qq.com","author":"Dessera","message":"读书笔记"}]},"autoDesc":true,"filePathRelative":"笔记/读书笔记-高级C&C++编译技术：进程内存模型.md","headers":[],"categoryList":[{"id":"7051dc","sort":10000,"name":"笔记"}]}');export{k as comp,d as data};
