import{_ as i,c as a,a as n,o as l}from"./app-BYecpAAQ.js";const h={};function k(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>面向对象是一种以对象为中心的编程思想，其三大特征是封装、继承和多态，这是比较官方的说法。</p><p>笔者认为，面向对象和面向过程，实际上是从两个方面去思考问题，我们最终的目的都是要解决需求，我们举一个例子，现在我们要烹饪：</p><ul><li>对于面向过程来说，我们必须要知道要做什么菜，比如我们要做炒鸡蛋，那么面向过程才能告诉你：我们要先打蛋，切葱切辣椒，起锅烧油...</li><li>对于面向对象来说，我们不需要知道我们要做什么，因为无论要做什么，我们都需要原料和厨具，而他们的处理和使用方法都是大体一致的，而将二者组合在一起的流程，我们需要的其实是菜谱。</li></ul><p>这里关键的区别在于，面向对象在达成目的之前，会先将需求拆分为由对象组织成的逻辑链，每个对象之间不知道对方的工作细节，只知道对方<strong>是什么</strong>，这样的好处就是任何<strong>是</strong>该对象的组件都能够轻易地替换原先的组件，不必对整个流程大动干戈。</p><p>说回刚刚烹饪的例子，原材料就是一个对象，而鸡蛋、葱和辣椒<strong>是</strong>原材料，这体现了原材料和后者之间的<strong>继承关系</strong>；此三者都能够进行“处理”，但处理的过程不尽相同，这就是<strong>多态</strong>，外界不必全然了解我们的“处理”操作，这就叫做<strong>封装</strong>。</p><h2 id="现实案例" tabindex="-1"><a class="header-anchor" href="#现实案例"><span>现实案例</span></a></h2><p>我们来一个比较实际的例子，笔者正在编写一个邮件客户端，该客户端要支持多种邮件协议（SMTP、POP3、IMAP4），按照常理，我们要编写三段完全不同的客户端逻辑，这是不可避免的。但我们的UI层不应该去了解这些细节，如果使用面向过程的逻辑编写，每次我们用到客户端功能，都要判断一下正在使用哪个协议，进行不同的操作，这样不现实也难以维护！这个时候，面向对象的思维告诉我们，我们需要的一个<strong>客户端接口</strong>，也就是基类：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> BaseClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  BaseClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  virtual</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> ~BaseClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  virtual</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> login</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">string</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> username</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">string</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> password</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  virtual</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> send</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> data</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们有了一个基类，也就是上文提到的对象或者接口，它声明，一切符合<code>Client</code>的类都需要有<code>login</code>和<code>send</code>方法。现在，我们让实际的客户端分别继承该类：</p><blockquote><p>当然，这里的类只是笔者需求的简化版本，笔者的项目实际上有更为复杂的需求</p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> IMAPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> : </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> BaseClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  IMAPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  ~IMAPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> login</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">string</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> username</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">string</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> password</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // imap login logic</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> send</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> data</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // imap send logic</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> SMTPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> : </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> BaseClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  SMTPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  ~SMTPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> login</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">string</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> username</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">string</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> password</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // smtp login logic</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }  </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  </span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> send</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> data</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // smtp send logic</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> POPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> : </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> BaseClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  POPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  ~POPClient</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> default</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> login</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">string</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> username</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">string</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> password</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // pop login logic</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> send</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> char*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> data</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // pop send logic</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何依赖了一个客户端的过程，我们都可以声明一个<code>BaseClient</code>的指针或引用，当使用该过程时，我们可以任意传入一个<code>IMAPClient</code>、<code>SMTPClient</code>或者<code>POPClient</code>的指针或引用，这样就达成了逻辑复用，比如，下面这个函数对三种客户端全部适用：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> </span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">send_hello_email</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(BaseClient</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> client,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                 const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::string</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> username,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                 const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::string</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> password)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  client</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">login</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  client</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">send</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;HELLO!&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="c-面向对象的背后" tabindex="-1"><a class="header-anchor" href="#c-面向对象的背后"><span>C++面向对象的背后</span></a></h2><p>我们现在聊完了面向对象能干什么，现在我们该聊聊，C++是怎么实现它的。</p><p>我们都知道，在一般的编译器实现中，一个类实例的内存模型实际上与结构体并没有什么太大的区别（在没有面向对象时），它们实例的所有内存空间都用来存储其成员变量，至于成员函数，他们实际上就是带有隐式<code>this</code>参数的全局函数，静态函数和成员就更不用提了，因此，要让一个类<strong>继承</strong>另一个类，我们首先需要解决的便是成员变量：</p><blockquote><p>当然，上面我们只是讨论了实例的内存模型，类本身还有其元信息和我们提到的成员函数、静态成员这些部分，他们广义上也应该算作类的一部分。</p></blockquote><h3 id="成员变量" tabindex="-1"><a class="header-anchor" href="#成员变量"><span>成员变量</span></a></h3><p>成员变量如何被容纳进子类中，这个问题实际上很简单：继承一个类，相当于同时包含了这个类所有的成员变量，至于实际的变量顺序，没有标准规定，不过对于GCC和Clang，他们一般会将基类的内存空间放在子类后面。</p><blockquote><p>继承要保证基类结构的完整性，所以编译器不会将基类的内存对齐空间让渡给子类的成员变量。</p></blockquote><p>在这种情况下，我们可以认为子类的大小是基类大小和子类实际大小的和，当然，这是我们不考虑虚函数得到的。</p><h3 id="成员函数-虚函数" tabindex="-1"><a class="header-anchor" href="#成员函数-虚函数"><span>成员函数（虚函数）</span></a></h3><p>我们多态的实现依靠了虚函数，其行为相交一般函数有很大不同，虚函数是由基类规范的，根据子类不同而实现不同的函数，为了实现虚函数，我们需要一种方法能在运行时判断我们该调用什么函数。</p><p>不难注意到，即便在使用时我们无法区分各个子类，但在构造时我们是清楚地知道它是谁的，于是，我们可以在构造时为这个类塞入一个列表，这个表标记了我们类中所有的虚函数，在调用虚函数时，我们不直接使用函数符号，而是在这张表内索引到函数指针，再调用这个函数指针，就能够找到我们真正要调用的函数。这个表，就是我们说的<strong>虚表</strong>或者<strong>虚函数表</strong>。</p><p>我们的下一个问题是，这张表在类模型中的什么位置？我们简单地汇编一下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Base</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">private:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _a{</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    virtual</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() {}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Derive</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> : </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Base</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">private:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _b{</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">public:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">override</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    Base b{};</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    Derive d{};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    Base</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> pd </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;"> &amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">d;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">    pd</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用GCC15，得到以下汇编（这里使用的是<code>Compiler Explorer</code>，其输出与正常编译器有细微的不同）：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-asm"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Base:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:foo():</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        push</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    rbp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rsp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rdi</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        nop</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        pop</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rbp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        ret</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Derive:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:foo():</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        push</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    rbp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rsp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rdi</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        nop</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        pop</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rbp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        ret</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">main:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        push</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    rbp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rsp</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        sub</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rsp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">48</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     eax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, OFFSET </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">FLAT:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">vtable for Base+</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">16</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">32</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     DWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">24</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">0</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     eax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, OFFSET </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">FLAT:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">vtable for Derive+</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">16</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">48</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     DWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">40</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">0</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     DWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">36</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">1</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        lea</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">48</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rdx</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rdi</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        call</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    rdx</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     eax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">0</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        leave</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        ret</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">vtable for </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Derive:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">0</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   typeinfo for Derive</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Derive:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:foo()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">vtable for </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Base:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">0</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   typeinfo for Base</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Base:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:foo()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">typeinfo for </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Derive:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   vtable for </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__cxxabiv1:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:__si_class_type_info+</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">16</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   typeinfo name for Derive</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   typeinfo for Base</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">typeinfo name for </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Derive:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .string &quot;6Derive&quot;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">typeinfo for </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Base:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   vtable for </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__cxxabiv1:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:__class_type_info+</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">16</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .quad   typeinfo name for Base</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">typeinfo name for </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Base:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        .string &quot;4Base&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们单独截取构造函数：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-asm"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     eax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, OFFSET </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">FLAT:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">vtable for Derive+</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">16</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">48</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     DWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">40</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">0</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">     DWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">36</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">], </span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们要知道栈底在高地址，栈是向低地址增长的，也就是说，<code>rbp-48</code>的位置一定在类的末尾，而<code>rbp-36</code>的位置一定在类的最开始。</p><p>我可以发现，在GCC15中，虚表位于类的末尾，其中包括类中所有的虚函数和类的部分元信息地址，在构造时，构造函数会按照虚表，基类，成员变量的顺序对实例进行构造（但这并不代表构造只能这么进行）。</p><p>我们来看调用虚函数的部分：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-asm"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rdx</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rax</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">QWORD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> PTR [</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rbp</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#C678DD;--shiki-light:#986801;">8</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        mov</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">     rdi</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">rax</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#383A42;">        call</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">    rdx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的栈中存储着我们的对象实例，可见，调用虚函数时会先从虚表中取出函数指针再调用，这比一般的函数调用多了一个步骤，会导致性能损失。</p><h3 id="虚继承" tabindex="-1"><a class="header-anchor" href="#虚继承"><span>虚继承</span></a></h3><p>虚继承是为了解决菱形继承问题而存在的，我们现在很少遇到这种场景。</p><p>菱形继承的含义是两组中间子类源于相同的基类，又被同一个类继承，形成了菱形的形状，这样会导致最开始的基类在最终的子类中有两份，解决问题的最终方案是使用虚继承，即继承最开始的基类时，使用<code>public virtual</code>而非简单的<code>public</code>：</p><p>在GCC中，虚继承会将基类从子类中提出并放在最终子类中，在构造两个中间子类时，将基类以某种方式隐式传递给他们，受限于笔者能力和篇幅，我们不在此分析其汇编。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>很多时候，笔者相比具体实现还是更看重语义的正确性，面向对象实际上是给予了我们更强大的逻辑工具，让我们能够构建更灵活的代码语义。笔者认为，我们应该培养从语义角度出发看待一些编程问题的能力，在某些情况下，这样的能力有助于我们化繁为简，窥视复杂结构中的真谛。</p>`,41)]))}const t=i(h,[["render",k]]),d=JSON.parse('{"path":"/article/nin3762j/","title":"C++漫谈-面向对象","lang":"zh-CN","frontmatter":{"title":"C++漫谈-面向对象","createTime":"2025/08/08 14:35:34","permalink":"/article/nin3762j/","tags":["C++"],"description":"面向对象是一种以对象为中心的编程思想，其三大特征是封装、继承和多态，这是比较官方的说法。 笔者认为，面向对象和面向过程，实际上是从两个方面去思考问题，我们最终的目的都是要解决需求，我们举一个例子，现在我们要烹饪： 对于面向过程来说，我们必须要知道要做什么菜，比如我们要做炒鸡蛋，那么面向过程才能告诉你：我们要先打蛋，切葱切辣椒，起锅烧油... 对于面向对...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++漫谈-面向对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-09T04:22:04.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/nin3762j/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"C++漫谈-面向对象"}],["meta",{"property":"og:description","content":"面向对象是一种以对象为中心的编程思想，其三大特征是封装、继承和多态，这是比较官方的说法。 笔者认为，面向对象和面向过程，实际上是从两个方面去思考问题，我们最终的目的都是要解决需求，我们举一个例子，现在我们要烹饪： 对于面向过程来说，我们必须要知道要做什么菜，比如我们要做炒鸡蛋，那么面向过程才能告诉你：我们要先打蛋，切葱切辣椒，起锅烧油... 对于面向对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-09T04:22:04.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2025-08-09T04:22:04.000Z"}]]},"readingTime":{"minutes":8.25,"words":2474},"git":{"createdTime":1754656094000,"updatedTime":1754713324000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"5a650c0d2aabafadb3588062677805b0e481e6de","time":1754713324000,"email":"dessera@qq.com","author":"Dessera","message":"fix: BaseClient"},{"hash":"67046dbd83485ca3805d85689973fd12fe910b0a","time":1754656094000,"email":"dessera@qq.com","author":"Dessera","message":"面向对象"}]},"autoDesc":true,"filePathRelative":"C&CPP/C++漫谈-面向对象.md","headers":[],"categoryList":[{"id":"135ccb","sort":10006,"name":"C&CPP"}]}');export{t as comp,d as data};
