import{_ as e,c as n,d as t,a as h,e as i,b as l,w as k,r as p,o as d}from"./app-BYecpAAQ.js";const r={};function A(g,s){const a=p("VPLink");return d(),n("div",null,[t("p",null,[s[1]||(s[1]=i("接续")),l(a,{href:"./%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-MNN%E4%B8%8A%E4%BD%8D%E6%9C%BA%E7%BC%96%E8%AF%91.md"},{default:k(()=>s[0]||(s[0]=[i("上一次构建流程")])),_:1}),s[2]||(s[2]=i("，在构建完成后，我们直接来看推理相关的 API ，根据 MNN 文档，目前一共有两套推理 API："))]),s[3]||(s[3]=h(`<ul><li>Session：提供会话式的推理接口</li><li>Module：提供表达式的推理接口</li></ul><p>本文首先分析 Session 接口，主要聚焦在<code>Interpreter</code>类以上的逻辑部分。</p><h2 id="创建一个推理会话" tabindex="-1"><a class="header-anchor" href="#创建一个推理会话"><span>创建一个推理会话</span></a></h2><p>为了进行模型推理，用户需要按顺序创建<code>Interpreter</code>和<code>Session</code>，二者分别有各自的职责：</p><ul><li><code>Interpreter</code>：负责模型数据的管理</li><li><code>Session</code>：负责推理相关资源的管理</li></ul><p>这样听起来有些模糊，首先要理清模型和推理资源的关系。</p><p>抛却 MNN 本身来谈，如果要进行一次推理，任何框架大概率都会进行如下步骤：</p><ol><li>从文件中读取模型数据</li><li>将模型转化为计算图</li><li>进行计算</li></ol><p>上文我们提到的“模型数据”即从文件中读取的模型数据，而“推理资源”则是转化的计算图（张量、算子等计算时数据）。</p><p>按照 MNN 文档的说法，就是：</p><blockquote><p><code>Interpreter</code>是模型数据的持有者；<code>Session</code>通过<code>Interpreter</code>创建，是推理数据的持有者。</p></blockquote><p>我们可以查看<code>tools/cpp/mobilenetTest.cpp</code>了解其创建流程，为了方便阅读，笔者删去了<code>config</code>的初始化：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">shared_ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Interpreter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">Interpreter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createFromFile</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">argv</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">ScheduleConfig config;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Session</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> session </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createSession</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(config);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="interpreter-的创建细节" tabindex="-1"><a class="header-anchor" href="#interpreter-的创建细节"><span>Interpreter 的创建细节</span></a></h2><p>上面的代码通过<code>createFromFile</code>创建了解释器，实际上，所有的<code>createFrom</code>族函数都只做了两件事，其一是加载<code>Content</code>类，其二是调用<code>createFromBufferInternal</code>。</p><p>抛除文件加载部分，我们可以通过<code>createFromBuffer</code>来分析最简单的创建流程：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Interpreter</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> Interpreter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createFromBuffer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> void*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> buffer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> size</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其首先初始化了一个<code>Content</code>，然后将指针和长度赋值给它：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> net </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Content;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">    net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">buffer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">reset</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)size);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    ::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">memcpy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">buffer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(), buffer, size);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后调用<code>createFromBufferInternal</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> createFromBufferInternal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(net, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">true</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>createFromBufferInternal</code>的签名如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Interpreter</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> Interpreter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createFromBufferInternal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Content</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">bool</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> enforceAuth</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>虽然它有<code>enforceAuth</code>这个参数，但实际上没有任何作用，该函数会先检查模型有效性，再检查模型<code>oplists</code>的有效性。</p><p>检查模型有效性，并初始化模型：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 检查模型有效性</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> valid </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> OpCommonUtils::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">checkNet</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">buffer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(), </span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">buffer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">size</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 从 buffer 中还原网络</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> GetNet</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">buffer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查<code>oplists</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // 获取 oplists ，检查其有效性</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">nullptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> ==</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">oplists</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()) {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">        MNN_ERROR</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;Model has no oplist</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        delete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> net;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> nullptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // 检查其中每一个 Op 的有效性</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> opSize </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">oplists</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">size</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    for</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> i </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; i </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> opSize; </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">++</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">i) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> op </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">oplists</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">GetAs</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Op</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(i);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">nullptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> ==</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> op </span><span style="--shiki-dark:#56B6C2;--shiki-light:#A626A4;">||</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> nullptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> ==</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> op</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">outputIndexes</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()) {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">            MNN_ERROR</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;Invalid Model, the </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%d</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> op is empty</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, i);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            delete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> net;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            return</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> nullptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="网络和算子" tabindex="-1"><a class="header-anchor" href="#网络和算子"><span>网络和算子</span></a></h3><p>我们在编译时通过脚本生成了<code>schema</code>，而<code>Net</code>和<code>oplists</code>相关的内容结构就是在这个时候被生成的，以<code>Net</code>为例，其本质是<code>flatbuffers::Table</code>实现的偏移量表，而获取<code>oplists</code>，实际上就是按照偏移量获取其某个位置的指针：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> flatbuffers::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;flatbuffers::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Offset</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Op</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;&gt; </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">oplists</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> GetPointer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> flatbuffers::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;flatbuffers::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Offset</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Op</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;&gt; </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">10</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="session-的创建细节" tabindex="-1"><a class="header-anchor" href="#session-的创建细节"><span>Session 的创建细节</span></a></h2><p><code>Session</code>的创建依赖于<code>createSession</code>族函数，其中涉及到两个配置结构：</p><ul><li><code>ScheduleConfig</code>: <code>Session</code>的运行时信息（推理运行时类型/线程数量等）</li><li><code>BackendConfig</code>：后端需要注意的配置信息（精度/内存策略/供电策略）</li></ul><p>所有的<code>Session</code>创建流程最终都会汇集到<code>createMultiPathSession</code>，其签名为：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Session</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> Interpreter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createMultiPathSession</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">ScheduleConfig</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> configs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> RuntimeInfo</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> runtime</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>值得注意的是，<code>Session</code>可以将模型推导分为多个子路径，<code>createMultiPathSession</code>支持传入一个配置列表来创建多个推理路径，每个路径拥有不同的配置选项。</p><p>该接口的第二参数是运行时信息，其本质是一张包含了所有推理运行时的<code>std::map</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">typedef</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::pair</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">std::map</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">MNNForwardType, std::shared_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Runtime</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,  std::shared_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Runtime</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> RuntimeInfo;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Runtime</code>是推理使用的运行时实例，而<code>MNNForwardType</code>是推理运行时类型，其典型值为：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">typedef</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> enum</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">    MNN_FORWARD_CPU</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">    MNN_FORWARD_AUTO</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 4</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">    MNN_FORWARD_CUDA</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">    MNN_FORWARD_OPENCL</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">    MNN_FORWARD_OPENGL</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 6</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">    MNN_FORWARD_VULKAN</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 7</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">} MNNForwardType;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RuntimeInfo</code>的第一项是所有可用的运行时列表，第二项是固定的 CPU 运行时。</p><h3 id="运行时创建" tabindex="-1"><a class="header-anchor" href="#运行时创建"><span>运行时创建</span></a></h3><p><code>createSession</code>会调用<code>createMultiPathSession</code>的变体，其接口如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Session</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> Interpreter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createMultiPathSession</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">ScheduleConfig</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> configs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该函数会根据我们填写的配置自动创建<code>RuntimeInfo</code>，通过<code>createRuntime</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">RuntimeInfo</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> Interpreter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">createRuntime</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">ScheduleConfig</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> configs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其实现可以总结为通过<code>configs</code>创建不同的运行时，并自动创建 CPU 作为备用运行时（如果之前没有创建），限于篇幅不做展开。</p><blockquote><p>如果有相同类型但不同配置的运行时，后初始化的会覆盖先初始化的。</p></blockquote><h3 id="session的创建" tabindex="-1"><a class="header-anchor" href="#session的创建"><span>Session的创建</span></a></h3><p>当创建好运行时之后，就可以继续创建<code>Session</code>了，<code>createMultiPathSession</code>的后续流程可以总结为以下部分：</p><ul><li>配置运行时（<code>setRuntimeHint</code>）</li><li>创建<code>SessionInfo</code>（张量和其他运行时数据的真正位置）</li><li>设置会话缓存（加速部分后端初始化）</li><li>创建<code>Session</code></li><li>写入会话缓存</li></ul><p>我们主要看<code>SessionInfo</code>和<code>Session</code>的创建。</p><p><code>SessionInfo</code>的创建使用了<code>Schedule::schedule</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">bool</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> Schedule</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">schedule</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">ScheduleInfo</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> scheduleInfo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Net</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> net</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">vector</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">ScheduleConfig</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> configs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">const</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> RuntimeInfo</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> runtimeInfo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该函数的流程非常复杂，这里暂且把它看作一个黑盒子，其大致实现就是将模型复原为张量，并保存在<code>info</code>中，如果创建失败则返回<code>false</code>。</p><p>创建好<code>SessionInfo</code>后，函数会初始化一个<code>Session</code>的<code>unique_ptr</code>，其由<code>Interpreter</code>托管，最终返回给用户的是<code>unique_ptr</code>的 Handle，也就是指针本身。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> newSession </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    std::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">unique_ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Session</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">new</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> Session</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">std</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">move</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(info), </span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">mNet</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">modes</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, std::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">move</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(rt)));</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">auto</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> result </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> newSession</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">mNet</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">sessions</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">emplace_back</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">std</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">move</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(newSession));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> result;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>笔者在这里省略了大部分内部实现，这些部分笔者可能会放在其他专题展开分析。</p></blockquote><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记"><span>后记</span></a></h2><p>笔者后续还会继续分析 Session API 的其他部分实现细节，尽请期待。</p>`,61))])}const B=e(r,[["render",A]]),o=JSON.parse('{"path":"/article/swxazfys/","title":"深度学习笔记-MNN Session创建流程","lang":"zh-CN","frontmatter":{"title":"深度学习笔记-MNN Session创建流程","createTime":"2025/10/23 22:54:30","permalink":"/article/swxazfys/","tags":["C++","深度学习","MNN"],"description":"接续，在构建完成后，我们直接来看推理相关的 API ，根据 MNN 文档，目前一共有两套推理 API： Session：提供会话式的推理接口 Module：提供表达式的推理接口 本文首先分析 Session 接口，主要聚焦在Interpreter类以上的逻辑部分。 创建一个推理会话 为了进行模型推理，用户需要按顺序创建Interpreter和Sessi...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深度学习笔记-MNN Session创建流程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-26T09:25:48.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/swxazfys/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"深度学习笔记-MNN Session创建流程"}],["meta",{"property":"og:description","content":"接续，在构建完成后，我们直接来看推理相关的 API ，根据 MNN 文档，目前一共有两套推理 API： Session：提供会话式的推理接口 Module：提供表达式的推理接口 本文首先分析 Session 接口，主要聚焦在Interpreter类以上的逻辑部分。 创建一个推理会话 为了进行模型推理，用户需要按顺序创建Interpreter和Sessi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-26T09:25:48.000Z"}],["meta",{"property":"article:tag","content":"MNN"}],["meta",{"property":"article:tag","content":"深度学习"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2025-10-26T09:25:48.000Z"}]]},"readingTime":{"minutes":5.09,"words":1527},"git":{"createdTime":1761410505000,"updatedTime":1761470748000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"4edc14c523eba3acecad118200249b3e06bd6662","time":1761470748000,"email":"dessera@qq.com","author":"Dessera","message":"勘误：后端->运行时"},{"hash":"a8e17b3ffe80d310421dd35c94510acb0c4091ab","time":1761470004000,"email":"dessera@qq.com","author":"Dessera","message":"移除算子相关迷惑表述"},{"hash":"5a0d60be5ea905a439680e59d912edb286007e8f","time":1761469910000,"email":"dessera@qq.com","author":"Dessera","message":"移除算子相关迷惑表述"},{"hash":"425820a40f3a3de3e6ac7fa1a7854be7b671c374","time":1761467484000,"email":"dessera@qq.com","author":"Dessera","message":"fix some text"},{"hash":"942bc45491aebba3c625339b93bd8152b0180c20","time":1761410545000,"email":"dessera@qq.com","author":"Dessera","message":"rename"},{"hash":"09cd98b8040a0da9b3f5b676459c6265a9a5cf5e","time":1761410505000,"email":"dessera@qq.com","author":"Dessera","message":"session create"}]},"autoDesc":true,"filePathRelative":"笔记/深度学习笔记-MNN Session创建流程.md","headers":[],"categoryList":[{"id":"7051dc","sort":10000,"name":"笔记"}]}');export{B as comp,o as data};
