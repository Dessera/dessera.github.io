import{_ as s,c as a,a as e,o as n}from"./app-BYecpAAQ.js";const l="/assets/cpython%E4%BF%AE%E6%94%B9-Dp49ymmc.png",h="/assets/cpython%E6%B5%8B%E8%AF%95-Cue01wW1.png",t="/assets/cpython%E6%8A%A5%E9%94%99-BtreISie.png",d={};function p(k,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p><code>cpython</code>的移植相比起其他的基础库略显复杂，我们需要先编译它的前置库，再编译<code>cpython</code>，老样子，我们的工作环境如下：</p><ul><li>正点原子<code>I,MX6ULL ALPHA</code>开发板</li><li>Docker Ubuntu 25.04 上位机</li><li>Linux 6.12.3</li><li>zlib 1.3.1</li><li>libffi 3.4.8</li><li>ncurses 6.5</li><li>cpython 3.13.3</li></ul><h2 id="一-什么是-cpython" tabindex="-1"><a class="header-anchor" href="#一-什么是-cpython"><span>一，什么是 cpython</span></a></h2><p>在讲如何移植<code>cpython</code>之前，我们肯定需要了解它是什么，如果你对该内容已经有所了解，<em>可以直接跳过本节</em>。</p><p><code>Python</code>作为解释型编程语言，其在运行时一定要有名为<strong>解释器</strong>的程序来解析和执行<code>Python</code>代码，<code>cpython</code>就是<code>Python</code>的官方解释器，同时，它也是<code>Python</code>名义上的标准。</p><p>除了<code>cpython</code>之外，<code>Python</code>还有很多第三方解释器：</p><ul><li><a href="https://github.com/pypy/pypy" target="_blank" rel="noopener noreferrer">pypy</a>：针对性能优化的解释器。</li><li><a href="https://github.com/jython/jython" target="_blank" rel="noopener noreferrer">jython</a>：针对<code>Java</code>环境的解释器。</li><li><a href="https://github.com/micropython/micropython" target="_blank" rel="noopener noreferrer">micropython</a>：针对微控制器环境的解释器。</li><li><a href="https://github.com/RustPython/RustPython" target="_blank" rel="noopener noreferrer">RustPython</a>：用<code>Rust</code>编写的解释器。</li></ul><h2 id="二-移植依赖库" tabindex="-1"><a class="header-anchor" href="#二-移植依赖库"><span>二，移植依赖库</span></a></h2><p>根据笔者的整理，<code>cpython</code>需要<code>zlib</code>、<code>libffi</code>和<code>ncurses</code>三个前置库。</p><h3 id="_1-zlib" tabindex="-1"><a class="header-anchor" href="#_1-zlib"><span>1. zlib</span></a></h3><p><code>zlib</code>相对较好移植，我们先下载它的源码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">git</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> clone</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> https://github.com/madler/zlib.git</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">cd</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> zlib</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">git</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> checkout</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -b</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> release_1_3_1</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> v1.3.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>zlib</code>已经支持了<code>cmake</code>构建，因此我们采用<code>cmake</code>构建：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">cmake</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -S</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> .</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -B</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> build</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  -D</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> CMAKE_BUILD_TYPE=Release</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -D</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> CMAKE_C_COMPILER=arm-linux-gnueabihf-gcc</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  -DINSTALL_BIN_DIR=/tmp/zlib_build/bin</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  -DINSTALL_LIB_DIR=/tmp/zlib_build/lib</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  -DINSTALL_MAN_DIR=/tmp/zlib_build/share/man/</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  -DINSTALL_PKGCONFIG_DIR=/tmp/zlib_build/lib/pkgconfig</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  -DINSTALL_INC_DIR=/tmp/zlib_build/include</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们指定构建Release版本，编译器为<code>arm-linux-gnueabihf-gcc</code>，并指定安装路径，实际编译时，请将路径指向你的安装目录。</p><p>如果没有出现错误，我们就可以开始编译和安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">cmake</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --build</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> build</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">cmake</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --install</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-libffi" tabindex="-1"><a class="header-anchor" href="#_2-libffi"><span>2. libffi</span></a></h3><p>最近的<code>libffi</code>版本有相当严重的构建bug（至少包含了3.4.6和3.4.8两个版本），为了规避该问题，我们需要先下载其<code>release</code>中的源码并解压：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">wget</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> https://github.com/libffi/libffi/releases/download/v3.4.8/libffi-3.4.8.tar.gz</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">tar</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -xvf</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libffi-3.4.8.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，克隆源码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">git</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> clone</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> https://github.com/libffi/libffi.git</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">cd</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libffi</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">git</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> checkout</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -b</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> release_3_4_8</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> v3.4.8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入源码目录，先进行<code>autogen</code>（确保<code>libtool</code>、<code>autoconf</code>、<code>automake</code>和<code>m4</code>已安装）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">./autogen.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，最重要的，我们要把提前下载的源码中的<code>Makefile.in</code>复制到<code>libffi</code>目录下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">cp</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ../libffi-3.4.8/Makefile.in</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>为什么？因为<code>libffi</code>不兼容新的<code>autoconf</code>，导致其生成了错误的<code>Makefile.in</code>，详情请参考<a href="https://github.com/libffi/libffi/issues/853" target="_blank" rel="noopener noreferrer">Issue#853</a></p></blockquote><p>然后，我们再运行<code>configure</code>，同样，<code>--prefix</code>指向你的安装目录：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">./configure</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --host=arm-linux-gnueabihf</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --prefix=/tmp/libffi_build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译并安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -j</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-ncurses" tabindex="-1"><a class="header-anchor" href="#_3-ncurses"><span>3. ncurses</span></a></h3><p><code>ncurses</code>源码保存在<code>gnu</code>的镜像中，我们直接下载：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">wget</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.5.tar.gz</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">tar</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -xvf</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ncurses-6.5.tar.gz</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">cd</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ncurses-6.5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行如下配置，同样，<code>--prefix</code>指向你的安装目录：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">./configure</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --prefix=/tmp/ncurses_build</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --host=arm-linux-gnueabihf</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  --with-shared</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --without-debug</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --without-ada</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --enable-pc-files</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  --with-cxx-binding</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-cxx-shared</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --enable-ext-colors</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --enable-ext-mouse</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  --enable-overwrite</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --without-progs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的参数笔者不做详细解释，读者可以参考<code>./configure --help</code>。</p><p>编译并安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -j</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装后，我们需要创建<code>libncursesw</code>到<code>libncurses</code>的符号链接，虽然<code>python</code>用不到它们，但其他程序可能需要（比如<code>bash</code>）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">cd</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> /tmp/ncurses_build/lib</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ln</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -s</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncursesw.so.6.5</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses.so.6.5</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ln</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -s</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncursesw.so.6</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses.so.6</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ln</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -s</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncursesw.so</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses.so</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ln</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -s</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncursesw.a</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses.a</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ln</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -s</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses++w.so.6.5</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses++.so.6.5</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ln</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -s</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses++w.so.6</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses++.so.6</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ln</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -s</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses++w.so</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses++.so</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">ln</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -s</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses++w.a</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> libncurses++.a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-移植-cpython" tabindex="-1"><a class="header-anchor" href="#三-移植-cpython"><span>三，移植 cpython</span></a></h2><p>我们下载<code>cpython</code>的源码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">git</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> clone</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> https://github.com/python/cpython</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">cd</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> cpython</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">git</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> checkout</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -b</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> release_3_13_3</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> v3.13.3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置之前，我们需要手动修改<code>Makefile.pre.in</code>，因为现在的<code>cpython</code>实际上是不支持交叉编译的！</p><p>在<code>Makefile.pre.in</code>中，找到并注释如下内容：</p><p><img src="`+l+`" alt="cpython修改"></p><blockquote><p>光凭上面的注释我们也能猜到这是为什么，这个地方会引用构建好的<code>python</code>测试模块，但我们是交叉编译的，这东西不能执行！</p></blockquote><p>接着，我们进行配置：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">CFLAGS</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;...&quot;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;"> LDFLAGS</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;...&quot;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> ./configure</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  --host=arm-linux-gnueabihf</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --build=x86_64-linux-gnu</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  --prefix=/tmp/cpython_build</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-build-python</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --enable-shared</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  --enable-ipv6</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ac_cv_file__dev_ptmx=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> ac_cv_file__dev_ptc=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> \\</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  --enable-optimizations</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --disable-test-modules</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --with-ensurepip=no</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<code>CFLAGS</code>和<code>LDFLAGS</code>我们需要做的实际上只是把刚刚构建的依赖传送给编译器，这里的工作就是把<code>include</code>和<code>lib</code>目录添加到编译器的搜索路径中，例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">CFLAGS</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;-I/tmp/zlib_build/include -I/tmp/libffi_build/include -I/tmp/ncurses_build/include -L/tmp/zlib_build/lib -L/tmp/libffi_build/lib -L/tmp/ncurses_build/lib&quot;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">LDFLAGS</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;-L/tmp/zlib_build/lib -L/tmp/libffi_build/lib -L/tmp/ncurses_build/lib&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果你将他们安装到了相同的路径中，就不必添加如此多的路径了。</p><p><code>--build</code>参数实际是构建机器的架构（上位机），这里笔者不确定这种写法是否正确，但是可以正常编译。</p><p><code>ac_cv_file__dev_ptmx=0 ac_cv_file__dev_ptc=0</code>表示不检查<code>/dev/ptmx</code>和<code>/dev/ptc</code>文件，因为我们的上位机很有可能没有这两个文件，会导致编译失败。</p><p>最后，我们禁用了<code>test</code>模块和<code>pip</code>，因为我们不需要它。</p><p>编译并安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -j</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-验证" tabindex="-1"><a class="header-anchor" href="#四-验证"><span>四，验证</span></a></h2><p>将所有文件拷贝到根文件系统上，上电测试：</p><p><img src="`+h+'" alt="cpython测试"></p><p>一般情况下，解释器可能会报错，它会导致<code>python</code>的交互终端缺失部分功能，不过不影响使用：</p><p><img src="'+t+'" alt="cpython报错"></p><p>这是因为缺少<code>terminfo</code>，安装<code>ncurses</code>时，该文件夹会被一同安装，我们在<code>/etc/profile</code>中添加如下内容：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">export</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;"> TERMINFO</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">/</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">usr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">/</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">lib</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">/</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">terminfo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>笔者的<code>terminfo</code>位于此处，读者可以根据实际情况修改。</p><h2 id="五-总结" tabindex="-1"><a class="header-anchor" href="#五-总结"><span>五，总结</span></a></h2><p>笔者的构建流程通过<code>Makefile</code>的方式托管在<a href="https://github.com/Dessera/imx6ull-dev" target="_blank" rel="noopener noreferrer">imx6ull-dev</a>仓库，包括构建环境的<code>Dockerfile</code>和所有的构建脚本，仅供参考。</p>',68)]))}const c=s(d,[["render",p]]),o=JSON.parse('{"path":"/article/ukts2q61/","title":"嵌入式Linux-基于I.MX6ULL移植cpython","lang":"zh-CN","frontmatter":{"title":"嵌入式Linux-基于I.MX6ULL移植cpython","createTime":"2025/05/26 13:47:08","permalink":"/article/ukts2q61/","tags":["Linux","嵌入式","Python"],"description":"cpython的移植相比起其他的基础库略显复杂，我们需要先编译它的前置库，再编译cpython，老样子，我们的工作环境如下： 正点原子I,MX6ULL ALPHA开发板 Docker Ubuntu 25.04 上位机 Linux 6.12.3 zlib 1.3.1 libffi 3.4.8 ncurses 6.5 cpython 3.13.3 一，什么...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"嵌入式Linux-基于I.MX6ULL移植cpython\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-27T03:18:58.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/ukts2q61/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"嵌入式Linux-基于I.MX6ULL移植cpython"}],["meta",{"property":"og:description","content":"cpython的移植相比起其他的基础库略显复杂，我们需要先编译它的前置库，再编译cpython，老样子，我们的工作环境如下： 正点原子I,MX6ULL ALPHA开发板 Docker Ubuntu 25.04 上位机 Linux 6.12.3 zlib 1.3.1 libffi 3.4.8 ncurses 6.5 cpython 3.13.3 一，什么..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-27T03:18:58.000Z"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"嵌入式"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2025-05-27T03:18:58.000Z"}]]},"readingTime":{"minutes":4.69,"words":1408},"git":{"createdTime":1748257066000,"updatedTime":1748315938000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":4,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"8d95a4b62f49519f440f2eb68c3e8bc1ea789bb8","time":1748315938000,"email":"dessera@qq.com","author":"Dessera","message":"嵌入式LInux-基于I.MX6ULL移植cpython 修订3"},{"hash":"b3c72e2df17b3bb05aee8545ddeb679e9b0ab865","time":1748275109000,"email":"dessera@qq.com","author":"Dessera","message":"嵌入式LInux-基于I.MX6ULL移植cpython 修订2"},{"hash":"c4a551464a19b304acd214a2eb9968d0f8a16af7","time":1748258226000,"email":"dessera@qq.com","author":"Dessera","message":"嵌入式LInux-基于I.MX6ULL移植cpython 修订1"},{"hash":"8cb2d44c0dc2d6bbd3c0c9794ea57f2367d1cb96","time":1748257066000,"email":"dessera@qq.com","author":"Dessera","message":"嵌入式LInux-基于I.MX6ULL移植cpython"}]},"autoDesc":true,"filePathRelative":"Linux/嵌入式Linux-基于I.MX6ULL移植cpython.md","headers":[],"categoryList":[{"id":"edc9f0","sort":10004,"name":"Linux"}]}');export{c as comp,o as data};
