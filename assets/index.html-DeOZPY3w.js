import{_ as s,c as a,a as n,o as e}from"./app-BYecpAAQ.js";const t={};function h(l,i){return e(),a("div",null,i[0]||(i[0]=[n(`<p>笔者近期正在阅读 <em>深入Linux内核架构 (Wolfgang Mauerer)</em> 作为Linux内核学习的入门书籍，几个月前，我的朋友曾极力向我推荐这本书，他对于内核数据结构实现的赞美勾起了我的兴趣。</p><p>本文的目的是拆解最简单的Linux数据结构<code>list_head</code>，并分析其最重要的宏调用<code>container_of</code>，我们不会关注太多的操作系统细节（包括内存同步、实现优化等）。</p><blockquote><p>本文的构建环境是Linux-2.6.24 和 gcc-4.8.5</p></blockquote><h2 id="最基本的数据结构" tabindex="-1"><a class="header-anchor" href="#最基本的数据结构"><span>最基本的数据结构</span></a></h2><p>链表，或者说循环链表，是整个内核中最基本的数据结构之一，它的头文件位于<code>include/linux/list.h</code>，如果我们没有启用<code>CONFIG_DEBUG_LIST</code>，<code>list_head</code>的所有方法都在该文件内实现，且不会进行参数检查，我们以私有函数<code>__list_add</code>为例，在DEBUG模式下，它的实现如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__list_add</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> list_head</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">           struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> list_head</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> prev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">           struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> list_head</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">unlikely</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">prev</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> !=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> prev)) {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">    printk</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(KERN_ERR </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;list_add corruption. next-&gt;prev should be &quot;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                    &quot;prev (</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">), but was </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">. (next=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">).</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">           prev,</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">           next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">prev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">           next);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">    BUG</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">unlikely</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">prev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">next</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> !=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> next)) {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">    printk</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(KERN_ERR </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;list_add corruption. prev-&gt;next should be &quot;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                    &quot;next (</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">), but was </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">. (prev=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">%p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">).</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">           next,</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">           prev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">           prev);</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">    BUG</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">prev</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> new;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">next</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> next;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">prev</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> prev;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  prev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">next</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> new;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该实现会先检查函数参数的有效性，如果参数无效，会调用<code>printk</code>打印日志，通过<code>BUG</code>宏记录错误信息并陷入死循环，该实现是为了调试而存在的。</p><p>如果没有设置<code>CONFIG_DEBUG_LIST</code>，我们最终看到的实现是这样的：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">static</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> inline</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> void</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__list_add</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> list_head</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">           struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> list_head</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> prev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">           struct</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> list_head</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;"> next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">prev</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> new;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">next</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> next;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">prev</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> prev;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">  prev</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">next</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> =</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> new;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该实现不进行任何参数检查，且使用<code>inline</code>将其内联。</p><h2 id="链表数据结构" tabindex="-1"><a class="header-anchor" href="#链表数据结构"><span>链表数据结构</span></a></h2><p>内核实现的<code>list_head</code>是<strong>通用链表</strong>，也就是说，它能够为任何需要链表的数据结构提供该功能，一般而言，这在C语言中是很难做到的，在这里，内核使用了一种取巧的方案，将链表节点作为单独的数据结构拆分了出来，其定义为：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> list_head</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> list_head </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">next, </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">prev;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要为特定的数据结构嵌入链表，我们只需要将该单元插入对应的结构，我们对<code>list_head</code>实现的所有功能就都可以复用于新的数据结构：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> kobject {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  struct</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> list_head entry;</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但在这个过程中，我们忽略了一件事，我们不能使用节点来索引到对应的结构体，因为<code>list_head</code>中没有任何成员指向了它对应的结构体。</p><p>想象一下，我们在C++中是如何做到这件事的？如果我们有一个<code>LinkedList</code>类，要使用它通常要使用如下方法：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">LinkedList</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;int&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> arr </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但现在，我们只有<code>list_head</code>这一个符号，我们缺少什么？我们缺少了目标类（准确来说，是它的元信息）！我们发现，在C++中我们默认知道了链表的目标类，还在链表实现中指定了二者的关系。</p><p>C++能够自动帮我们维护这三者的关系，但在C语言中，我们需要自己来做这件事，因此，我们很容易想到创建一个宏，它的参数分别是链表节点、目标类名和二者之间的关系，这就是<code>container_of</code>宏的由来。</p><p>比较抽象的一点是，什么是链表和目标类之间的关系？在C++中，我们可以认为目标类实例是链表结构的一个成员，表示为<code>node.data</code>，在C中，我们认为链表节点是目标类的一个成员，表示为<code>data.node</code>，这是二者之间存在关系的浅显表示。实际上，这样的关系指明了二者在内存上的连续关系，只要我们获得了二者之间的偏移量，就能够轻易的在二者之间转换。</p><p>幸运的是，<code>&lt;stddef.h&gt;</code>提供了<code>offsetof</code>宏，它计算结构体成员在结构体内的偏移量，出于各种原因，你可能需要自己实现一个，你可以参考Linux内核：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#ifdef</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> __compiler_offsetof</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> offsetof</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">TYPE</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">MEMBER</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">__compiler_offsetof</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">(TYPE</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">MEMBER)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#else</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> offsetof</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">TYPE</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">MEMBER</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) ((</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">size_t</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&amp;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((TYPE </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">MEMBER</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内核的备用实现模拟了一个位于地址<code>0</code>的结构体，并获取它对应成员的指针，将其强转为<code>size_t</code>即为该成员的内存位置，因为结构体起始于<code>0</code>，所以该内存位置即为该成员的偏移量。</p><h2 id="container-of" tabindex="-1"><a class="header-anchor" href="#container-of"><span><code>container_of</code></span></a></h2><p>一旦我们知道了该成员的偏移量，我们就可以从该成员的内存位置反推目标位置，这就是<code>container_of</code>实现的功能：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> container_of</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">member</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)                                        </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  ({                                                                           </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    const</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> typeof</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">((</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">type</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">-&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">member</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">)</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> __mptr </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (ptr);                          </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    (type</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)((</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">char*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)__mptr </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> offsetof</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">(type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> member)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);                           </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>container_of</code>使用了大量的GNU拓展，<code>typeof()</code>获取对应变量的类型，因此<code>typeof(((type*)0)-&gt;member)</code>的意思是：<code>type</code>结构体中<code>member</code>成员的类型。</p><p>该宏第一行将传入的指针转换为它的实际类型（可能是<code>list_head</code>、<code>hlist_node</code>等等）。</p><p>在第二行，将该指针强制转换为<code>char*</code>，并减去我们计算好的偏移量，正如上文所说，成员指针减去成员偏移量即为目标类的位置。</p><p>我们注意到没有任何代码将该结果返回给外部，这里利用了GNU表达式的拓展，将该块最后一行作为整个表达式的值。</p><p>我们可以不依靠GNU拓展达成这个目的（但会损失部分安全性）：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-c"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#define</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> container_of_no_gnu</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">member</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)                                 </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  ((type</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)((</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">char*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)(ptr) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">-</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> offsetof</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">(type</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> member)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们移除了第一行的转换来将表达式缩减为一行，这样就不需要任何GNU拓展就能使用该宏，但正如我上面说的，这样的做法可能会损失一些类型安全性，导致错误被隐藏到运行时。</p><h2 id="对链表成员的一些理解" tabindex="-1"><a class="header-anchor" href="#对链表成员的一些理解"><span>对链表成员的一些理解</span></a></h2><p>将<code>list_head</code>嵌入目标类在笔者看来并非一种<strong>无可奈何</strong>之举，如果我们细究其编程思想，可以认为其表达了面向对象的继承思路，因为缺少元编程的支持，所以改为使用继承的方式实现功能复用，以这种视角理解<code>container_of</code>也可以看作对面向对象编程功能的一种补足。</p><h2 id="写在后面" tabindex="-1"><a class="header-anchor" href="#写在后面"><span>写在后面</span></a></h2><p>笔者最近开始了<strong>伟大而漫长的</strong>学习路程，具体来说，一半出于兴趣，一半出于对自己就业方向的考量，我开始了Linux内核和驱动开发的学习，该文章是我内核学习的第一步。</p><p>如果读者不想阅读内核代码，可以借助笔者的练习项目<a href="https://github.com/Dessera/linux-stl-containers" target="_blank" rel="noopener noreferrer">linux-stl-caontainers</a>来速览内核数据结构的使用，该项目跟随我的学习进度，同时练习C/C++的项目组织管理能力。</p><blockquote><p>当然，数据结构实现移除了<code>rcu</code>等特殊方法</p></blockquote><p>之后会介绍笔者的Linux2.6.24的构建笔记。</p>`,41)]))}const p=s(t,[["render",h]]),d=JSON.parse('{"path":"/article/l6rq29eh/","title":"Linux2.6.24-内核数据结构之list_head","lang":"zh-CN","frontmatter":{"title":"Linux2.6.24-内核数据结构之list_head","createTime":"2024/11/06 21:50:09","permalink":"/article/l6rq29eh/","tags":["Linux","C","数据结构"],"description":"笔者近期正在阅读 深入Linux内核架构 (Wolfgang Mauerer) 作为Linux内核学习的入门书籍，几个月前，我的朋友曾极力向我推荐这本书，他对于内核数据结构实现的赞美勾起了我的兴趣。 本文的目的是拆解最简单的Linux数据结构list_head，并分析其最重要的宏调用container_of，我们不会关注太多的操作系统细节（包括内存同步...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux2.6.24-内核数据结构之list_head\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-16T02:16:01.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/l6rq29eh/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"Linux2.6.24-内核数据结构之list_head"}],["meta",{"property":"og:description","content":"笔者近期正在阅读 深入Linux内核架构 (Wolfgang Mauerer) 作为Linux内核学习的入门书籍，几个月前，我的朋友曾极力向我推荐这本书，他对于内核数据结构实现的赞美勾起了我的兴趣。 本文的目的是拆解最简单的Linux数据结构list_head，并分析其最重要的宏调用container_of，我们不会关注太多的操作系统细节（包括内存同步..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-16T02:16:01.000Z"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2024-11-16T02:16:01.000Z"}]]},"readingTime":{"minutes":5.93,"words":1778},"git":{"createdTime":1730906917000,"updatedTime":1731723361000,"contributors":[{"name":"Dessera","username":"Dessera","email":"lord.changed@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"874d93a7f384c6b62992bc7817d7dff249f2e945","time":1731723361000,"email":"lord.changed@foxmail.com","author":"Dessera","message":"Qt-MVC实践01-编写树形Model"},{"hash":"c6a8b907c26903768e368f5a52f574f26f590465","time":1730906917000,"email":"lord.changed@foxmail.com","author":"Dessera","message":"Linux2.6.24-内核数据结构之list_head"}]},"autoDesc":true,"filePathRelative":"Linux/Linux2.6.24-内核数据结构之list_head.md","headers":[],"categoryList":[{"id":"edc9f0","sort":10004,"name":"Linux"}]}');export{p as comp,d as data};
