import{_ as i,c as s,a,o as t}from"./app-BYecpAAQ.js";const n={};function o(d,e){return t(),s("div",null,e[0]||(e[0]=[a(`<p>Linux的发行版浩如烟海，其本质无非是内核搭配一些基础工具，方便用户的使用，随着用户需求的不断复杂化，<strong>包管理器</strong>功能也逐渐被划归到发行版的功能之中，到最后，内核和基础工具也被划归到包管理器的管理范畴。可以说，包管理器就是发行版的基石，其管理着系统中几乎所有的软件（包括内核甚至是Bootloader），而包管理器的不同也作为划分发行版谱系的重要依据之一。</p><p>大部分Linux新人接触到的都是<code>Debian</code>系，它们是基于<code>apt</code>包管理器的发行版，这个家族的成员有<code>Debian</code>、<code>Ubuntu</code>、<code>Deepin</code>等等；比较特殊的还有<code>Arch</code>系，它们是基于<code>pacman</code>包管理器的发行版，典型成员有<code>Archlinux</code>和<code>Manjaro</code>。</p><p>而我们要介绍的<code>NixOS</code>是其中的异类，它基于<code>nix</code>包管理器，是一个声明式的包管理器。</p><blockquote><p>必须要澄清的是，叫做<code>Debain</code>系的原因是这些发行版都衍生自<code>Debain</code>，而基于<code>apt</code>仅仅是其判断依据，<code>Arch</code>系同理。</p></blockquote><h2 id="所以-nix有什么不一样" tabindex="-1"><a class="header-anchor" href="#所以-nix有什么不一样"><span>所以，<code>nix</code>有什么不一样？</span></a></h2><p>在<code>Arch</code>系中，我们使用<code>pacman</code>在终端中安装软件，比如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">pacman</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -S</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> clang</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一旦该命令成功，该软件就会永远留存在你的系统中，除非我们手动卸载该包(<code>pacman -Rs</code>)，这种方式符合直觉，简单易懂，但存在以下缺点：</p><ol><li><strong>配置分散</strong>: 虽然大部分软件都遵守<strong>LFS</strong>规范，但它们的配置文件往往处于不同的位置，使用不同的配置语言，这导致了用户很难管理系统配置。</li><li><strong>依赖管理混乱</strong>: 虽然我们能通过命令获取当前系统中所有的软件和版本，但我们往往没有有效的手段确保这种依赖关系是确定的（因为我们使用的软件源几乎不可能一致），这很可能会导致某开发环境在当前系统中可以运行，但到了另一个系统上就<strong>失效</strong>了。</li><li><strong>难以管理外部软件</strong>: 如果软件源不满足我们的需求，我们很有可能需要寻求手动安装，一般的发行版并没有对这种软件进行约束，在其编译安装过程中，发行版完全不知情，但其安装结果很有可能改变了某些文件布局，导致某些软件无法正常运行，甚至整个系统崩溃。</li></ol><p><code>nix</code>提供了一种全新的方式，它在实际的LFS路径和软件包之间加入了一层中间层(在<code>NixOS</code>中通常位于<code>/nix/store/</code>)，安装软件会在该目录中新建一个由哈希和软件包名组成的路径(来唯一表示该软件包)，这个路径是只读的，只有<code>nix</code>相关命令可以修改该目录。在系统启动时，<code>nix</code>会将这个目录中安装的所有软件映射到真正的LFS目录中(一般是<code>/run/current-system/</code>)。</p><p>为了适配这套软件安装逻辑，<code>nix</code>还需要一套配置来描述整个系统，用来最终导出系统需要的所有软件包和其配置，我们称之为<code>nix</code>配置文件(一般位于<code>/etc/nixos</code>)，每次我们需要安装软件或者修改软件时，我们需要将内容添加到配置文件中，然后重新计算整个配置文件，生成新的系统配置(我们称之为<code>generation</code>或者<code>profile</code>)。</p><p>举个例子，我们的配置文件中如果有如下内容：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-nix"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{ </span><span style="--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, ... }:{</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">  environment</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">systemPackages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> = [ </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">pkgs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">clang_19</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> ];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在重新生成系统配置之后，我们可以在上述目录中找到：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">/nix/store/0jf7aq1bhi5609mylnas50qrsiclbp34-clang-wrapper-19.1.4/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里包含了<code>clang</code>这个软件的构建结果，同时，我们也可以在上述目录中找到：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">/run/current-system/sw/usr/bin/clang</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于上面的所有内容，用户只允许更改配置文件，而后面生成的路径下面的所有内容都是只读的，这极大限制了用户的操作空间，限制系统中所有的软件都只应通过配置文件注入，当然，<code>nix</code>提供了大量的方式增强配置文件的能力，在一般发行版中能做到的事，在<code>nix</code>中几乎都能做到。</p><blockquote><p>上面提到的哈希是笔者在自己的<code>/nix/store</code>中找到的，不代表所有的<code>clang_19</code>均为该哈希。</p></blockquote><h2 id="解决软件源的问题" tabindex="-1"><a class="header-anchor" href="#解决软件源的问题"><span>解决软件源的问题</span></a></h2><p>早年的<code>nix</code>并没有解决软件源的问题，直到<code>flake</code>的出现，<code>flake</code>是<code>nix</code>的项目管理器，它通过将软件源参数化来控制软件源一致性。</p><p>使用过<code>Cargo</code>等现代项目管理器的读者想必很熟悉<code>.lock</code>文件，它通过哈希控制项目中每个依赖的在不同的环境中的一致性，<code>flake</code>也使用了这种方式，它将系统配置转换为一个<code>flake</code>项目，将软件源作为它的一个依赖传入，通过<code>flake.lock</code>确定该源在所有环境中的一致性。</p><p>本教程着重介绍<code>flake</code>特性，不会涉及过多传统<code>nix</code>的操作。</p><blockquote><p>尽管<code>flake</code>现在仍然是一个实验特性，但鉴于其目前的使用情况，其稳定性已经得到了保证。</p></blockquote><h2 id="迁移到nix的注意事项" tabindex="-1"><a class="header-anchor" href="#迁移到nix的注意事项"><span>迁移到<code>nix</code>的注意事项</span></a></h2><p>迁移到<code>nix</code>是非常困难的，因为其几乎不支持任何其他发行版通用的约定，例如LFS路径等，这会导致：</p><ul><li><code>nix</code>构建的二进制文件和其他发行版不兼容(可以通过patchelf解决该问题)</li><li>外部二进制文件很难在<code>NixOS</code>中运行(可以通过手动打包或者<code>nix-ld</code>解决)</li><li>开发环境配置逻辑和其他发行版完全不同</li></ul><h2 id="本教程的目的" tabindex="-1"><a class="header-anchor" href="#本教程的目的"><span>本教程的目的</span></a></h2><p>本教材旨在处理上述提到的注意事项，带领读者一步步接受<code>nix</code>哲学，并体会其中的便利性。</p>`,29)]))}const l=i(n,[["render",o]]),r=JSON.parse('{"path":"/nix/9lk7c55h/","title":"文章简介","lang":"zh-CN","frontmatter":{"title":"文章简介","createTime":"2025/01/29 22:11:42","permalink":"/nix/9lk7c55h/","tags":["Linux","Nix","Flake"],"description":"Linux的发行版浩如烟海，其本质无非是内核搭配一些基础工具，方便用户的使用，随着用户需求的不断复杂化，包管理器功能也逐渐被划归到发行版的功能之中，到最后，内核和基础工具也被划归到包管理器的管理范畴。可以说，包管理器就是发行版的基石，其管理着系统中几乎所有的软件（包括内核甚至是Bootloader），而包管理器的不同也作为划分发行版谱系的重要依据之一。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文章简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-03T04:12:29.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/nix/9lk7c55h/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"文章简介"}],["meta",{"property":"og:description","content":"Linux的发行版浩如烟海，其本质无非是内核搭配一些基础工具，方便用户的使用，随着用户需求的不断复杂化，包管理器功能也逐渐被划归到发行版的功能之中，到最后，内核和基础工具也被划归到包管理器的管理范畴。可以说，包管理器就是发行版的基石，其管理着系统中几乎所有的软件（包括内核甚至是Bootloader），而包管理器的不同也作为划分发行版谱系的重要依据之一。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-03T04:12:29.000Z"}],["meta",{"property":"article:tag","content":"Flake"}],["meta",{"property":"article:tag","content":"Nix"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2025-02-03T04:12:29.000Z"}]]},"readingTime":{"minutes":5.15,"words":1546},"git":{"createdTime":1738160598000,"updatedTime":1738555949000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"8aed796d43c1e40b1490e0dd3f4aefb27f1dba91","time":1738555949000,"email":"dessera@qq.com","author":"Dessera","message":"Nix-打包Tauri应用"},{"hash":"ccdee51a82a75216bd908b67d52c36d596fd315d","time":1738211973000,"email":"dessera@qq.com","author":"Dessera","message":"nix教程前言"},{"hash":"f8d73760c3b7712e435d7b00f85738e27ff514c8","time":1738160598000,"email":"dessera@qq.com","author":"Dessera","message":"美化博客,新系列锐意进取中"}]},"autoDesc":true,"filePathRelative":"notes/nix/文章简介.md","headers":[]}');export{l as comp,r as data};
