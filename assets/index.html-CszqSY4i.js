import{_ as i,c as a,a as n,o as l}from"./app-BYecpAAQ.js";const h={};function e(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>提到 Python 协程，我们一般会想到 Asyncio ，它是 Python 标准库实现的协程框架，代表了 Python 协程事实上的标准实现。</p><p>本系列文章旨在由浅至深地分析 Asyncio 的所有模块，剖析其实现原理。</p><blockquote><p>本系列分析的<code>cpython</code>源码位于<code>main</code>分支，提交时间为 Fri Sep 12 22:25:18 2025 +0100，提交ID为<code>805e3368d6d07e58430654d1365283924fdf4143</code>。</p><p>为了简化代码分析，笔者会删除一部分<code>debug</code>代码。</p></blockquote><h2 id="协程和协程框架" tabindex="-1"><a class="header-anchor" href="#协程和协程框架"><span>协程和协程框架</span></a></h2><p>在开始正式的代码解析之前，我们要先确立一个共识：<strong>协程并不能等同于协程框架</strong>。协程是一种高级函数，它表示一个能随时从某个断点跳出，并且能随时恢复到该断点继续执行的函数；而协程框架（或者说异步框架）是利用协程实现的异步开发框架，其包含了对上层开发需求的封装（例如IO、延时等）。</p><p>根据协程实现的方式不同，我们可以将其分类为<strong>有栈</strong>和<strong>无栈</strong>两种，有栈协程从操作系统的线程和进程切换获得灵感，通过保存和切换上下文实现断点的跳出和恢复；无栈协程则不同，它通过一个状态机维护当前函数的执行点，并用外部结构保存函数的所有状态（将其生命周期提升到函数生命周期之外），通过状态机选择每次进入函数的执行位置，以达成断点的跳出和恢复。</p><p>根据上面的描述，我们不难看出有栈协程和无栈协程的特点：</p><ul><li>有栈协程：便于实现，但在断点必须确定下一个进入的协程，因此协程调度器需要以侵入式的方式传递给协程，并且每个协程都需要维护其栈空间，可能造成内存浪费。</li><li>无栈协程：实现困难（通常需要语言本身对其进行支持），但只需要维护状态机和栈空间，协程本身不与上层调度混杂，只需要固定的内存空间。</li></ul><blockquote><p>实际上，也有方法优化有栈协程的内存浪费，我们称为<strong>共享栈</strong>，但实际上无非是时间效率和空间效率的二选一。</p></blockquote><p>编程语言一般更喜欢对无栈协程进行支持，再由第三方或者语言自身的标准库提供运行时支持，这里比较有名的有 Python 的 Asyncio 、Rust 的 Tokio 和 C++20 协程等。</p><h2 id="asyncio" tabindex="-1"><a class="header-anchor" href="#asyncio"><span>Asyncio</span></a></h2><p>Asyncio 将协程封装为<code>Task</code>，使用事件循环机制调度任务直到所有的任务完成，而<code>Runner</code>是 Asyncio 暴露给外部的任务执行方法，其管理事件循环的生命周期。</p><p><code>Runner</code>类存储于<code>runners.py</code>中，是该库中较为简单的部分。</p><h2 id="asyncio-runner" tabindex="-1"><a class="header-anchor" href="#asyncio-runner"><span>Asyncio Runner</span></a></h2><p>当我们调用<code>asyncio.run(coro)</code>的时候，思考一下，Python 会在这个时候做什么？答案便位于<code>runners.py</code>中：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> run</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> *</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;">, </span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">debug</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> loop_factory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> events.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">_get_running_loop</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        raise</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> RuntimeError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">            &quot;asyncio.run() cannot be called from a running event loop&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    with</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> Runner</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">debug</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">debug, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">loop_factory</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">loop_factory) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">as</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> runner:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> runner.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(main)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数分为两个部分：检查事件循环和启动<code>Runner</code>。</p><p><code>asyncio.run</code>的目的是在一个没有任务的上下文中初始化一个任务，并等待它运行完成，因此，在进入<code>Runner</code>之前，我们必须保证事件循环没有在运行（即将要运行的任务是唯一可运行的任务）。</p><p><code>Runner</code>支持了<code>with</code>语句，保证了<code>Runner</code>在构造和析构时执行初始化和清理操作（但实际上更重要的是清理行为，详见后文）。</p><h3 id="runner-初始化" tabindex="-1"><a class="header-anchor" href="#runner-初始化"><span>Runner 初始化</span></a></h3><p><code>Runner</code>的<code>with</code>表达式会调用<code>_lazy_init</code>，<code>_lazy_init</code>是一种初始化保证，它保证<code>Runner</code>在调用该函数后，一定处于就绪状态：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> __enter__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">_lazy_init</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> _lazy_init</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._state </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _State.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">CLOSED</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            raise</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> RuntimeError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;Runner is closed&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._state </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _State.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">INITIALIZED</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            return</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop_factory </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">            self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> events.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">new_event_loop</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._set_event_loop:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                events.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">set_event_loop</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop)</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">                self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._set_event_loop </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> True</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        else</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">            self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">_loop_factory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._context </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">copy_context</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._state </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _State.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">INITIALIZED</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在解读之前，我们必须说明的是，<code>running_loop</code>和<code>event_loop</code>并不等同，他们是两套体系，一套存储于<code>EventLoopPolicy</code>中，一套存储于<code>thread_local</code>的<code>_running_loop</code>中。</p><p>在<code>_lazy_init</code>中，首先检查状态机：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._state </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _State.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">CLOSED</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:        </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># CLOSE 不应当再次初始化</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            raise</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> RuntimeError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;Runner is closed&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._state </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _State.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">INITIALIZED</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:   </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 已经初始化，直接退出</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，函数会检查<code>Runner</code>初始化时有没有传入事件循环工厂<code>_loop_factory</code>，如果有，直接使用工厂获取事件循环，否则使用默认实现：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">            self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> events.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">new_event_loop</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._set_event_loop:            </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 只设置一次事件循环</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                events.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">set_event_loop</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop)</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">                self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._set_event_loop </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有第一次初始化时，我们才通过<code>set_event_loop</code>设置全局事件循环，这是为了防止在子观察器上多次调用<code>attach_loop</code>，具体细节我们会在分析事件循环时进行解释。</p><p>最后，<code>Runner</code>拷贝了当前环境的上下文，作为新协程的默认上下文：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._context </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">copy_context</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>contextvars</code>是 Python 提供的上下文库，它提供了比<code>thread_local</code>更封闭的<code>task_local</code>隔离。</p><p>其实这里，笔者觉得有些不大合理，如果我们构建如下案例：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> asyncio</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">somevalue </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">ContextVar</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;somevalue&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">somevalue.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;ORIGINAL&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">():</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">    print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(somevalue.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">with</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> asyncio.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">Runner</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">as</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> runner:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    somevalue.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;EDITED&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    runner.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该案例最终的运行结果是<code>ORIGINAL</code>，也就是说，在我们调用<code>run</code>方法时，协程内的初始上下文并不严格等于调用者的上下文。但考虑到我们几乎不会自己调用<code>Runner.run</code>，因此也无伤大雅。</p><h3 id="runner-运行" tabindex="-1"><a class="header-anchor" href="#runner-运行"><span>Runner 运行</span></a></h3><p>实际上，<code>run</code>方法内部已经包含了对<code>running_loop</code>的检查和<code>_lazy_init</code>，这就是为什么笔者说<code>with</code>的作用更多是确保清理行为，移除重复部分后，<code>run</code>方法如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> run</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> coro</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> *</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;">, </span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">context</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> coroutines.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">iscoroutine</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(coro):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> inspect.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">isawaitable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(coro):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> _wrap_awaitable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">awaitable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                    return</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> await</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> awaitable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                coro </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> _wrap_awaitable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(coro)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            else</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                raise</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> TypeError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;An asyncio.Future, a coroutine or an &#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                                &#39;awaitable is required&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> context </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            context </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._context</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        task </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">create_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(coro, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">context</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">context)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (threading.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">current_thread</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> threading.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">main_thread</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            and</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> signal.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">getsignal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(signal.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">SIGINT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> signal.default_int_handler</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        ):</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            sigint_handler </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> functools.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">partial</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._on_sigint, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">main_task</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">task)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            try</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                signal.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">signal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(signal.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">SIGINT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, sigint_handler)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            except</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> ValueError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                sigint_handler </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        else</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            sigint_handler </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._interrupt_count </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        try</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run_until_complete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        except</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> exceptions.CancelledError:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._interrupt_count </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">&gt;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                uncancel </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> getattr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task, </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;uncancel&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> uncancel </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> and</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> uncancel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">==</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                    raise</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> KeyboardInterrupt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            raise</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        finally</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (sigint_handler </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                and</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> signal.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">getsignal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(signal.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">SIGINT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> sigint_handler</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            ):</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                signal.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">signal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(signal.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">SIGINT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, signal.default_int_handler)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来略显复杂，我们可以一步步拆解分析，首先，该函数检查入参是否为协程：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> coroutines.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">iscoroutine</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(coro):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> inspect.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">isawaitable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(coro):   </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 不是协程，但可以等待，进行一次封装</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> _wrap_awaitable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">awaitable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                    return</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> await</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> awaitable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                coro </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> _wrap_awaitable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(coro)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            else</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                raise</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> TypeError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;An asyncio.Future, a coroutine or an &#39;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                                &#39;awaitable is required&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如代码所示，如果入参不是协程而是可等待类型，就用一层包装将其转换为协程，否则抛出异常。</p><blockquote><p><code>iscoroutine</code>表示标记为协程的函数的返回值，<code>isawaitable</code>比较宽松，它只要求类型实现了<code>__await__</code>。</p></blockquote><p>类型检查后，我们根据入参获取协程的上下文，如果没有指定，则使用我们刚刚复制好的上下文，然后，让事件循环创建任务：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        task </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">create_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(coro, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">context</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">context)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>为了正确处理<code>SIGINT</code>，需要拦截<code>SIGINT</code>，但<code>SIGINT</code>回调只注册一次，并且必须在主线程中进行（保证信号处理的唯一性）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">        # 注册 SIGINT 回调</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (threading.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">current_thread</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> threading.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">main_thread</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            and</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> signal.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">getsignal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(signal.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">SIGINT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> signal.default_int_handler</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        ):</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            sigint_handler </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> functools.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">partial</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._on_sigint, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">main_task</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">task)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            try</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                signal.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">signal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(signal.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">SIGINT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, sigint_handler)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            except</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> ValueError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                sigint_handler </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        else</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            sigint_handler </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">        # 初始化中断次数</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._interrupt_count </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册完成后，初始化<code>_interrupt_count</code>，其代表了程序被中断的次数，在<code>_on_sigint</code>中被使用：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> _on_sigint</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> signum</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> frame</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> main_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._interrupt_count </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">+=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._interrupt_count </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">==</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> and</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> main_task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">done</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(): </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 第一次中断，取消</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            main_task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">cancel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">            self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">call_soon_threadsafe</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">lambda</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            return</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        raise</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> KeyboardInterrupt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()                               </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 后续中断，直接结束程序</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果第一次被中断，则取消<code>main_task</code>，并向事件循环推入一个空回调函数防止长时间停滞在<code>select</code>等调用上，这段操作实际上并不保证任务一定被取消。</p><p>如果第二次被中断，则直接触发<code>KeyboardInterrupt</code>，直接结束程序。</p><p>做好完全准备后，执行任务，直到任务完成：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        try</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run_until_complete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task)  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 等待任务完成</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        except</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> exceptions.CancelledError:               </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 处理取消</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._interrupt_count </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">&gt;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                uncancel </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> getattr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task, </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;uncancel&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> uncancel </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> and</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> uncancel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">==</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                    raise</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> KeyboardInterrupt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            raise</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        finally</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">            # 移除 SIGINT 回调</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (sigint_handler </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">                and</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> signal.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">getsignal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(signal.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">SIGINT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> sigint_handler</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            ):</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                signal.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">signal</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(signal.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">SIGINT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, signal.default_int_handler)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果发生了取消异常，分为两种情况：</p><ul><li>该操作是人为的（<code>_interrupt_count &gt; 0</code>），并且任务只被取消了一次（<code>uncancel</code>和<code>cancel</code>成对出现，表示减少取消计数和增加取消计数），是正常的取消操作，将其转换为<code>KeyboardInterrupt</code>。</li><li>不符合以上条件，是非正常的取消，直接抛出取消异常。</li></ul><p>最后，我们移除<code>SIGINT</code>的回调（本次运行结束，不需要继续处理中断）。</p><h3 id="runner-清理" tabindex="-1"><a class="header-anchor" href="#runner-清理"><span>Runner 清理</span></a></h3><p><code>Runner</code>自己的生命周期末期，需要调用<code>close</code>来清理事件循环：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> close</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._state </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _State.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">INITIALIZED</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            return</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        try</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            loop </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">            # 取消所有任务</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">            _cancel_all_tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(loop)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">            # 关闭所有异步生成器</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run_until_complete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">shutdown_asyncgens</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">            # 关闭默认 Executor</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run_until_complete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">shutdown_default_executor</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(constants.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">THREAD_JOIN_TIMEOUT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">))</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        finally</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            if</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._set_event_loop:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">                events.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">set_event_loop</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">close</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">            self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._loop </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">            self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">._state </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> _State.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">CLOSED</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取消操作总共分为三步：</p><ul><li>取消所有任务</li><li>关闭所有异步生成器</li><li>关闭默认<code>executor</code></li></ul><p>在将事件循环内部清理干净之后，我们移除全局时间循环，并将其关闭。</p><p><code>_cancel_all_tasks</code>的逻辑为：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> _cancel_all_tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">loop</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    to_cancel </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> tasks.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">all_tasks</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(loop)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> to_cancel:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    for</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">in</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> to_cancel:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">cancel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run_until_complete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(tasks.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">gather</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(*to_cancel, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">return_exceptions</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">True</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    for</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">in</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> to_cancel:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">cancelled</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">():</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            continue</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">exception</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">call_exception_handler</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">({</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                &#39;message&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;unhandled exception during asyncio.run() shutdown&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                &#39;exception&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">exception</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(),</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                &#39;task&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: task,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数对事件循环中所有的任务调用取消，并等待他们退出（不抛出异常）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    for</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">in</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> to_cancel:  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 循环标记取消所有任务</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">cancel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    # 等待所有任务都退出</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run_until_complete</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(tasks.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">gather</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(*to_cancel, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">return_exceptions</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">True</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，一个个遍历取消的任务，如果有非取消异常，我们需要特殊处理（交给事件循环）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    for</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">in</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> to_cancel:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">cancelled</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">():                </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 取消成功，下一个</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">            continue</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">exception</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">is</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:    </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 有异常，交给事件循环</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            loop.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">call_exception_handler</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">({</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                &#39;message&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;unhandled exception during asyncio.run() shutdown&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                &#39;exception&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: task.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">exception</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(),</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">                &#39;task&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: task,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">            })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><code>Runner</code>是距离我们用户最近的 Asyncio 接口，它的目的是管理事件循环的生命周期并帮助我们执行主任务，其中的设计无疑是值得称赞的——作为暴露给外部的接口，无论用户如何使用<code>Runner</code>，它都尽最大努力保证操作正常完成。</p><p>之后的章节会从<code>Runner</code>延伸，解析 Asyncio 的核心模块。</p>`,69)]))}const p=i(h,[["render",e]]),d=JSON.parse('{"path":"/article/d7zgcrhf/","title":"Asyncio源码解读01-Runner解析","lang":"zh-CN","frontmatter":{"title":"Asyncio源码解读01-Runner解析","createTime":"2025/09/13 16:38:43","permalink":"/article/d7zgcrhf/","tags":["Python","Asyncio"],"description":"提到 Python 协程，我们一般会想到 Asyncio ，它是 Python 标准库实现的协程框架，代表了 Python 协程事实上的标准实现。 本系列文章旨在由浅至深地分析 Asyncio 的所有模块，剖析其实现原理。 本系列分析的cpython源码位于main分支，提交时间为 Fri Sep 12 22:25:18 2025 +0100，提交ID...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Asyncio源码解读01-Runner解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-14T14:44:17.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/d7zgcrhf/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"Asyncio源码解读01-Runner解析"}],["meta",{"property":"og:description","content":"提到 Python 协程，我们一般会想到 Asyncio ，它是 Python 标准库实现的协程框架，代表了 Python 协程事实上的标准实现。 本系列文章旨在由浅至深地分析 Asyncio 的所有模块，剖析其实现原理。 本系列分析的cpython源码位于main分支，提交时间为 Fri Sep 12 22:25:18 2025 +0100，提交ID..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T14:44:17.000Z"}],["meta",{"property":"article:tag","content":"Asyncio"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:modified_time","content":"2025-09-14T14:44:17.000Z"}]]},"readingTime":{"minutes":8.77,"words":2632},"git":{"createdTime":1757861025000,"updatedTime":1757861057000,"contributors":[{"name":"Dessera","username":"Dessera","email":"dessera@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"b7ff20e9d4551092832b7784492ac2fdd57568bb","time":1757861057000,"email":"dessera@qq.com","author":"Dessera","message":"move to Python"},{"hash":"b9caa6cd915ecf7e53419723d46e0afb0b21c445","time":1757861025000,"email":"dessera@qq.com","author":"Dessera","message":"asyncio runners.py"}]},"autoDesc":true,"filePathRelative":"Python/Asyncio源码解读01-Runner解析.md","headers":[],"categoryList":[{"id":"a7f5f3","sort":10002,"name":"Python"}]}');export{p as comp,d as data};
