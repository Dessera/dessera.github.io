import{m as h,bp as M,bq as Y,br as j,bs as H,t as a,W,bt as $,bu as _,bd as q,bv as Q,bi as Z,be as D,bc as z,bw as K,bx as U}from"./mermaid.esm.min-DQq_5qGn.js";import{f as V}from"./chunk-FASC7IG4-7pmsH-Kz.js";import{m as J}from"./chunk-ZN7TASNU-WraNTovB.js";import{s as N,_ as ee,J as k}from"./chunk-5ZJXQJOJ-GmrqkE5e.js";import"./app-BYecpAAQ.js";function w(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:G(e),edges:P(e)};return N(e.graph())||(t.value=ee(e.graph())),t}h(w,"write");function G(e){return k(e.nodes(),function(t){var r=e.node(t),s=e.parent(t),i={v:t};return N(r)||(i.value=r),N(s)||(i.parent=s),i})}h(G,"writeNodes");function P(e){return k(e.edges(),function(t){var r=e.edge(t),s={v:t.v,w:t.w};return N(t.name)||(s.name=t.name),N(r)||(s.value=r),s})}h(P,"writeEdges");var o=new Map,X=new Map,B=new Map,re=h(()=>{X.clear(),B.clear(),o.clear()},"clear"),I=h((e,t)=>{let r=X.get(t)||[];return a.trace("In isDescendant",t," ",e," = ",r.includes(e)),r.includes(e)},"isDescendant"),te=h((e,t)=>{let r=X.get(t)||[];return a.info("Descendants of ",t," is ",r),a.info("Edge is ",e),e.v===t||e.w===t?!1:r?r.includes(e.v)||I(e.v,t)||I(e.w,t)||r.includes(e.w):(a.debug("Tilt, ",t,",not in descendants"),!1)},"edgeInCluster"),A=h((e,t,r,s)=>{a.warn("Copying children of ",e,"root",s,"data",t.node(e),s);let i=t.children(e)||[];e!==s&&i.push(e),a.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach(d=>{if(t.children(d).length>0)A(d,t,r,s);else{let l=t.node(d);a.info("cp ",d," to ",s," with parent ",e),r.setNode(d,l),s!==t.parent(d)&&(a.warn("Setting parent",d,t.parent(d)),r.setParent(d,t.parent(d))),e!==s&&d!==e?(a.debug("Setting parent",d,e),r.setParent(d,e)):(a.info("In copy ",e,"root",s,"data",t.node(e),s),a.debug("Not Setting parent for node=",d,"cluster!==rootId",e!==s,"node!==clusterId",d!==e));let g=t.edges(d);a.debug("Copying Edges",g),g.forEach(u=>{a.info("Edge",u);let f=t.edge(u.v,u.w,u.name);a.info("Edge data",f,s);try{te(u,s)?(a.info("Copying as ",u.v,u.w,f,u.name),r.setEdge(u.v,u.w,f,u.name),a.info("newGraph edges ",r.edges(),r.edge(r.edges()[0]))):a.info("Skipping copy of edge ",u.v,"-->",u.w," rootId: ",s," clusterId:",e)}catch(v){a.error(v)}})}a.debug("Removing node",d),t.removeNode(d)})},"copy"),R=h((e,t)=>{let r=t.children(e),s=[...r];for(let i of r)B.set(i,e),s=[...s,...R(i,t)];return s},"extractDescendants"),ne=h((e,t,r)=>{let s=e.edges().filter(g=>g.v===t||g.w===t),i=e.edges().filter(g=>g.v===r||g.w===r),d=s.map(g=>({v:g.v===t?r:g.v,w:g.w===t?t:g.w})),l=i.map(g=>({v:g.v,w:g.w}));return d.filter(g=>l.some(u=>g.v===u.v&&g.w===u.w))},"findCommonEdges"),C=h((e,t,r)=>{let s=t.children(e);if(a.trace("Searching children of id ",e,s),s.length<1)return e;let i;for(let d of s){let l=C(d,t,r),g=ne(t,r,l);if(l)if(g.length>0)i=l;else return l}return i},"findNonClusterChild"),O=h(e=>!o.has(e)||!o.get(e).externalConnections?e:o.has(e)?o.get(e).id:e,"getAnchorId"),ae=h((e,t)=>{if(!e||t>10){a.debug("Opting out, no graph ");return}else a.debug("Opting in, graph ");e.nodes().forEach(function(r){e.children(r).length>0&&(a.warn("Cluster identified",r," Replacement id in edges: ",C(r,e,r)),X.set(r,R(r,e)),o.set(r,{id:C(r,e,r),clusterData:e.node(r)}))}),e.nodes().forEach(function(r){let s=e.children(r),i=e.edges();s.length>0?(a.debug("Cluster identified",r,X),i.forEach(d=>{let l=I(d.v,r),g=I(d.w,r);l^g&&(a.warn("Edge: ",d," leaves cluster ",r),a.warn("Descendants of XXX ",r,": ",X.get(r)),o.get(r).externalConnections=!0)})):a.debug("Not a cluster ",r,X)});for(let r of o.keys()){let s=o.get(r).id,i=e.parent(s);i!==r&&o.has(i)&&!o.get(i).externalConnections&&(o.get(r).id=i)}e.edges().forEach(function(r){let s=e.edge(r);a.warn("Edge "+r.v+" -> "+r.w+": "+JSON.stringify(r)),a.warn("Edge "+r.v+" -> "+r.w+": "+JSON.stringify(e.edge(r)));let i=r.v,d=r.w;if(a.warn("Fix XXX",o,"ids:",r.v,r.w,"Translating: ",o.get(r.v)," --- ",o.get(r.w)),o.get(r.v)||o.get(r.w)){if(a.warn("Fixing and trying - removing XXX",r.v,r.w,r.name),i=O(r.v),d=O(r.w),e.removeEdge(r.v,r.w,r.name),i!==r.v){let l=e.parent(i);o.get(l).externalConnections=!0,s.fromCluster=r.v}if(d!==r.w){let l=e.parent(d);o.get(l).externalConnections=!0,s.toCluster=r.w}a.warn("Fix Replacing with XXX",i,d,r.name),e.setEdge(i,d,s,r.name)}}),a.warn("Adjusted Graph",w(e)),T(e,0),a.trace(o)},"adjustClustersAndEdges"),T=h((e,t)=>{if(a.warn("extractor - ",t,w(e),e.children("D")),t>10){a.error("Bailing out");return}let r=e.nodes(),s=!1;for(let i of r){let d=e.children(i);s=s||d.length>0}if(!s){a.debug("Done, no node has children",e.nodes());return}a.debug("Nodes = ",r,t);for(let i of r)if(a.debug("Extracting node",i,o,o.has(i)&&!o.get(i).externalConnections,!e.parent(i),e.node(i),e.children("D")," Depth ",t),!o.has(i))a.debug("Not a cluster",i,t);else if(!o.get(i).externalConnections&&e.children(i)&&e.children(i).length>0){a.warn("Cluster without external connections, without a parent and with children",i,t);let d=e.graph().rankdir==="TB"?"LR":"TB";o.get(i)?.clusterData?.dir&&(d=o.get(i).clusterData.dir,a.warn("Fixing dir",o.get(i).clusterData.dir,d));let l=new J({multigraph:!0,compound:!0}).setGraph({rankdir:d,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});a.warn("Old graph before copy",w(e)),A(i,e,l,i),e.setNode(i,{clusterNode:!0,id:i,clusterData:o.get(i).clusterData,label:o.get(i).label,graph:l}),a.warn("New graph after copy node: (",i,")",w(l)),a.debug("Old graph after copy",w(e))}else a.warn("Cluster ** ",i," **not meeting the criteria !externalConnections:",!o.get(i).externalConnections," no parent: ",!e.parent(i)," children ",e.children(i)&&e.children(i).length>0,e.children("D"),t),a.debug(o);r=e.nodes(),a.warn("New list of nodes",r);for(let i of r){let d=e.node(i);a.warn(" Now next level",i,d),d?.clusterNode&&T(d.graph,t+1)}},"extractor"),L=h((e,t)=>{if(t.length===0)return[];let r=Object.assign([],t);return t.forEach(s=>{let i=e.children(s),d=L(e,i);r=[...r,...d]}),r},"sorter"),ie=h(e=>L(e,e.children()),"sortNodesByHierarchy"),F=h(async(e,t,r,s,i,d)=>{a.warn("Graph in recursive render:XAX",w(t),i);let l=t.graph().rankdir;a.trace("Dir in recursive render - dir:",l);let g=e.insert("g").attr("class","root");t.nodes()?a.info("Recursive render XXX",t.nodes()):a.info("No nodes found for",t),t.edges().length>0&&a.info("Recursive edges",t.edge(t.edges()[0]));let u=g.insert("g").attr("class","clusters"),f=g.insert("g").attr("class","edgePaths"),v=g.insert("g").attr("class","edgeLabels"),y=g.insert("g").attr("class","nodes");await Promise.all(t.nodes().map(async function(c){let n=t.node(c);if(i!==void 0){let p=JSON.parse(JSON.stringify(i.clusterData));a.trace(`Setting data for parent cluster XXX
 Node.id = `,c,`
 data=`,p.height,`
Parent cluster`,i.height),t.setNode(i.id,p),t.parent(c)||(a.trace("Setting parent",c,i.id),t.setParent(c,i.id,p))}if(a.info("(Insert) Node XXX"+c+": "+JSON.stringify(t.node(c))),n?.clusterNode){a.info("Cluster identified XBX",c,n.width,t.node(c));let{ranksep:p,nodesep:b}=t.graph();n.graph.setGraph({...n.graph.graph(),ranksep:p+25,nodesep:b});let E=await F(y,n.graph,r,s,t.node(c),d),S=E.elem;$(n,S),n.diff=E.diff||0,a.info("New compound node after recursive render XAX",c,"width",n.width,"height",n.height),_(S,n)}else t.children(c).length>0?(a.trace("Cluster - the non recursive path XBX",c,n.id,n,n.width,"Graph:",t),a.trace(C(n.id,t)),o.set(n.id,{id:C(n.id,t),node:n})):(a.trace("Node - the non recursive path XAX",c,y,t.node(c),l),await q(y,t.node(c),{config:d,dir:l}))})),await h(async()=>{let c=t.edges().map(async function(n){let p=t.edge(n.v,n.w,n.name);a.info("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),a.info("Edge "+n.v+" -> "+n.w+": ",n," ",JSON.stringify(t.edge(n))),a.info("Fix",o,"ids:",n.v,n.w,"Translating: ",o.get(n.v),o.get(n.w)),await Q(v,p)});await Promise.all(c)},"processEdges")(),a.info("Graph before layout:",JSON.stringify(w(t))),a.info("############################################# XXX"),a.info("###                Layout                 ### XXX"),a.info("############################################# XXX"),V(t),a.info("Graph after layout:",JSON.stringify(w(t)));let m=0,{subGraphTitleTotalMargin:x}=Z(d);return await Promise.all(ie(t).map(async function(c){let n=t.node(c);if(a.info("Position XBX => "+c+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n?.clusterNode)n.y+=x,a.info("A tainted cluster node XBX1",c,n.id,n.width,n.height,n.x,n.y,t.parent(c)),o.get(n.id).node=n,D(n);else if(t.children(c).length>0){a.info("A pure cluster node XBX1",c,n.id,n.x,n.y,n.width,n.height,t.parent(c)),n.height+=x,t.node(n.parentId);let p=n?.padding/2||0,b=n?.labelBBox?.height||0,E=b-p||0;a.debug("OffsetY",E,"labelHeight",b,"halfPadding",p),await z(u,n),o.get(n.id).node=n}else{let p=t.node(n.parentId);n.y+=x/2,a.info("A regular node XBX1 - using the padding",n.id,"parent",n.parentId,n.width,n.height,n.x,n.y,"offsetY",n.offsetY,"parent",p,p?.offsetY,n),D(n)}})),t.edges().forEach(function(c){let n=t.edge(c);a.info("Edge "+c.v+" -> "+c.w+": "+JSON.stringify(n),n),n.points.forEach(S=>S.y+=x/2);let p=t.node(c.v);var b=t.node(c.w);let E=K(f,n,o,r,p,b,s);U(n,E)}),t.nodes().forEach(function(c){let n=t.node(c);a.info(c,n.type,n.diff),n.isGroup&&(m=n.diff)}),a.warn("Returning from recursive render XAX",g,m),{elem:g,diff:m}},"recursiveRender"),ce=h(async(e,t)=>{let r=new J({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:e.config?.nodeSpacing||e.config?.flowchart?.nodeSpacing||e.nodeSpacing,ranksep:e.config?.rankSpacing||e.config?.flowchart?.rankSpacing||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),s=t.select("g");M(s,e.markers,e.type,e.diagramId),Y(),j(),H(),re(),e.nodes.forEach(d=>{r.setNode(d.id,{...d}),d.parentId&&r.setParent(d.id,d.parentId)}),a.debug("Edges:",e.edges),e.edges.forEach(d=>{if(d.start===d.end){let l=d.start,g=l+"---"+l+"---1",u=l+"---"+l+"---2",f=r.node(l);r.setNode(g,{domId:g,id:g,parentId:f.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),r.setParent(g,f.parentId),r.setNode(u,{domId:u,id:u,parentId:f.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),r.setParent(u,f.parentId);let v=structuredClone(d),y=structuredClone(d),m=structuredClone(d);v.label="",v.arrowTypeEnd="none",v.id=l+"-cyclic-special-1",y.arrowTypeEnd="none",y.id=l+"-cyclic-special-mid",m.label="",f.isGroup&&(v.fromCluster=l,m.toCluster=l),m.id=l+"-cyclic-special-2",r.setEdge(l,g,v,l+"-cyclic-special-0"),r.setEdge(g,u,y,l+"-cyclic-special-1"),r.setEdge(u,l,m,l+"-cyc<lic-special-2")}else r.setEdge(d.start,d.end,{...d},d.id)}),a.warn("Graph at first:",JSON.stringify(w(r))),ae(r),a.warn("Graph after XAX:",JSON.stringify(w(r)));let i=W();await F(s,r,e.type,e.diagramId,void 0,i)},"render");export{ce as render};
