import{_ as i,c as a,a as n,o as l}from"./app-BYecpAAQ.js";const t={};function e(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>说到现代C++，我们就不得不提到智能指针，这些模板类自C++11起被引入进标准库，不涉及操作系统、不涉及繁琐的内存申请流程，甚至你自己就能实现一个简单的智能指针。但即便如此，直到今天，仍然有人没有了解过，也不去使用智能指针。</p><p>实际上我认为，智能指针为 C++ 这门语言带来了一个新的概念，即所有权。智能指针表面上管理了一块由用户申请的内存，但实际上它是管理了这一块资源的所有权。这一概念在 Rust 语言中被更加明确地表达出来，但在 C++ 中，我们也可以通过智能指针来实现。</p><h2 id="所有权" tabindex="-1"><a class="header-anchor" href="#所有权"><span>所有权</span></a></h2><p>为什么会产生所有权机制？回想一下你在古老的 C/C++ 工作时，你不得不手动申请内存，手动管理他们的销毁时机，使用对象，还要时刻提防可能存在的拷贝操作（后来还要提防一些移动操作）。这些东西一开始就该由程序员管理，但是别忘了，我们在谈论一个现代语言！</p><p>在我看来，现代语言是高级语言的一个子集，它们应当在某一领域，解决过去程序员们的痛点。专注于底层的现代语言，如 Zig，它保留了内存管理的能力、并在语言层面支持了 Allocator, 扩充了内存管理的能力。而另一些现代语言，如 Rust，它在语言层面支持了所有权机制，使得程序员不再需要关心内存的申请和释放。</p><p>我们在谈论C++，从C++11开始，这门古老的语言开始了自己的现代化之路，而其中一个最显著的改变就是智能指针和其带来的所有权机制。</p><p>简单来说，所有权是一种属于关系，在这种关系下定义的对象其本身不会有隐式的复制和移动操作，将一个对象赋值、传递给另一个对象，只不过是将所有权转移给了另一个对象，在这个过程中，没有任何内存的拷贝和移动操作。</p><h2 id="所有权的实现" tabindex="-1"><a class="header-anchor" href="#所有权的实现"><span>所有权的实现</span></a></h2><p>对于 C++ 来说，所有权有两种，一种是独占所有权，另一种是共享所有权。独占所有权是指一个对象只能被一个所有者拥有，而共享所有权是指一个对象可以被多个所有者拥有。独占所有权在 C++ 中由 <code>std::unique_ptr</code> 实现，而共享所有权则由 <code>std::shared_ptr</code> 实现。</p><p>在一些场景（尤其是嵌入式领域）中，我们通常会针对每一个通信协议创建一个类，他们负责与其他设备的通信实现，而一些上层应用类，它们会需要调用这些协议类的方法。</p><p>创建这个协议类有两种方式：</p><ul><li>由应用类自己创建</li><li>从外部创建，传递给应用类</li></ul><p>但一般情况下，这些协议类的 IO 通道都是有限的，我们不希望应用类创建多个相同的协议类，这时候我们就可以使用智能指针来管理这些协议类的所有权。</p><p>由此可以引申出两种情况：</p><ul><li>一个协议类只服务于一个应用类，这时候我们可以使用 <code>std::unique_ptr</code> 来管理这个协议类的所有权</li><li>一个协议类可能会被多个应用类使用，这时候我们可以使用 <code>std::shared_ptr</code> 来管理这个协议类的所有权</li></ul><h2 id="std-unique-ptr" tabindex="-1"><a class="header-anchor" href="#std-unique-ptr"><span><code>std::unique_ptr</code></span></a></h2><p><code>std::unique_ptr</code> 是一个独占所有权的智能指针，它只能有一个所有者，当这个所有者被销毁时，它所管理的资源也会被销毁。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#include</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &lt;memory&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Application</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> public:</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 构造时，将协议类的所有权转移给 Application</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  Application</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">unique_ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) : </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">protocol_</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">std</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">move</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(protocol)) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> private:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  std::unique_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Protocol</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> protocol_;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  std::unique_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Protocol</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> protocol </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make_unique</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  Application </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">std</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">move</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(protocol));</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="std-shared-ptr" tabindex="-1"><a class="header-anchor" href="#std-shared-ptr"><span><code>std::shared_ptr</code></span></a></h2><p><code>std::shared_ptr</code> 是一个共享所有权的智能指针，它可以有多个所有者，当最后一个所有者被销毁时，它所管理的资源也会被销毁。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#include</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &lt;memory&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Application</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> public:</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 构造时，将协议类的所有权转移给 Application</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  Application</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">shared_ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) : </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">protocol_</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(protocol) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> private:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  std::shared_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Protocol</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> protocol_;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  std::shared_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Protocol</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> protocol </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make_shared</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  Application </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(protocol);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 创建另一个应用类，共享协议类的所有权</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  Application </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">app2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(protocol);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="论所有权的转让与移动" tabindex="-1"><a class="header-anchor" href="#论所有权的转让与移动"><span>论所有权的转让与移动</span></a></h2><p>很多人都有一个误解，认为移动语义体现了所有权的转让，但是，二者是不同的。</p><p>不论什么情况下，移动构造一定会重新创建资源对象，而至于资源内部的数据是如何移动的，这是对象的实现决定的，但针对资源对象本身，在这个过程中一定会重新创建一个资源对象。</p><p>而所有权的转让是另一回事，它直接将自己拥有的资源本身交予了另一个对象，在这个过程中，没有任何资源的拷贝和移动操作（实际上，在计算机眼中，这个过程什么也没发生）。</p><p>有趣的一点是，所有权的转让这一操作的实现依靠了移动语义，<code>std::unique_ptr</code> 不允许拷贝，但允许移动，刚才我们提到移动一定会创建新对象，而<code>std::unqiue_ptr</code>的移动虽然创建了新的<code>std::unique_ptr</code>，但其内部的指针仍然指向同一个资源对象，这就是所有权的转让的实现。</p><p><code>std::shared_ptr</code>维护了一个引用计数，这让它可以进行拷贝，也可以进行移动，引用计数会时刻保证资源对象的生命周期，当最后一个所有者被销毁时，资源对象也会被销毁。</p><h2 id="论资源的所有者和引用者" tabindex="-1"><a class="header-anchor" href="#论资源的所有者和引用者"><span>论资源的所有者和引用者</span></a></h2><p>上文我们忽略的一种情况，有一些类或函数并不拥有资源，但他们需要暂时的资源使用权。对于我们已经建立的资源所有权模型，每一种所有权模式都有其对应的引用类型。</p><p><code>std::unique_ptr</code> 对应的引用类型是原生指针，它指向资源对象本身，但在语义上不拥有它，只是暂时的使用。</p><p><code>std::shared_ptr</code> 对应的引用类型是 <code>std::weak_ptr</code>，它指向资源对象，但不会增加引用计数，当资源对象被销毁时，<code>std::weak_ptr</code> 会被置空。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">#include</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &lt;memory&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> Application</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> public:</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 构造时，将协议类的所有权转移给 Application</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  Application</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">shared_ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) : </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">protocol_</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(protocol) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> private:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  std::shared_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Protocol</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> protocol_;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">void</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(std::</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">weak_ptr</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt; </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#383A42;--shiki-light-font-style:inherit;">weak_protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 使用 weak_ptr</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">int</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  std::shared_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Protocol</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> protocol </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> std::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">make_shared</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">Protocol</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  Application </span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(protocol);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 创建一个 weak_ptr，暂时使用协议类</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  std::weak_ptr</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&lt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">Protocol</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> weak_protocol </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> protocol;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  // 调用函数，传递 weak_ptr</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">  foo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(weak_protocol);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的一点是，<code>std::weak_ptr</code> 不能直接使用，它需要通过 <code>lock</code> 方法转换为 <code>std::shared_ptr</code> 才能使用。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>新的资源管理模型标志着现代 C++ 的到来，我一直秉承着一个观点——任何拥有内存申请和释放的程序都应当使用智能指针，这不仅仅是为了避免内存泄漏，更是为了通过所有权这一概念更好地构建应用逻辑模型。</p>`,35)]))}const k=i(t,[["render",e]]),d=JSON.parse('{"path":"/article/w5vsqu3d/","title":"浅析C++所有权机制","lang":"zh-CN","frontmatter":{"title":"浅析C++所有权机制","tags":["C++","所有权","资源管理"],"createTime":"2024/04/04 09:39:41","permalink":"/article/w5vsqu3d/","description":"说到现代C++，我们就不得不提到智能指针，这些模板类自C++11起被引入进标准库，不涉及操作系统、不涉及繁琐的内存申请流程，甚至你自己就能实现一个简单的智能指针。但即便如此，直到今天，仍然有人没有了解过，也不去使用智能指针。 实际上我认为，智能指针为 C++ 这门语言带来了一个新的概念，即所有权。智能指针表面上管理了一块由用户申请的内存，但实际上它是管...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浅析C++所有权机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-20T05:15:46.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://dessera.github.io/article/w5vsqu3d/"}],["meta",{"property":"og:site_name","content":"Dessera Lab"}],["meta",{"property":"og:title","content":"浅析C++所有权机制"}],["meta",{"property":"og:description","content":"说到现代C++，我们就不得不提到智能指针，这些模板类自C++11起被引入进标准库，不涉及操作系统、不涉及繁琐的内存申请流程，甚至你自己就能实现一个简单的智能指针。但即便如此，直到今天，仍然有人没有了解过，也不去使用智能指针。 实际上我认为，智能指针为 C++ 这门语言带来了一个新的概念，即所有权。智能指针表面上管理了一块由用户申请的内存，但实际上它是管..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-20T05:15:46.000Z"}],["meta",{"property":"article:tag","content":"资源管理"}],["meta",{"property":"article:tag","content":"所有权"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2024-12-20T05:15:46.000Z"}]]},"readingTime":{"minutes":6.78,"words":2035},"git":{"createdTime":1725894909000,"updatedTime":1734671746000,"contributors":[{"name":"Dessera","username":"Dessera","email":"1533653159@qq.com","commits":4,"avatar":"https://avatars.githubusercontent.com/Dessera?v=4","url":"https://github.com/Dessera"}],"changelog":[{"hash":"12a09e9183b75eeb9d8e146738a533c9dbb2b0f4","time":1734671746000,"email":"dessera@qq.com","author":"Dessera","message":"浅析C++所有权机制"},{"hash":"874d93a7f384c6b62992bc7817d7dff249f2e945","time":1731723361000,"email":"lord.changed@foxmail.com","author":"Dessera","message":"Qt-MVC实践01-编写树形Model"},{"hash":"8e7828425da6af5073598e88e8062dfa1b4b59a4","time":1725895675000,"email":"1533653159@qq.com","author":"Dessera","message":"chore: Update base URL and old blogs"},{"hash":"a44c377f2acfae7084dac7c1d3003938735fa66b","time":1725894909000,"email":"1533653159@qq.com","author":"Dessera","message":"feat: 使用cv2的VideoCapture进行摄像头定时拍摄"}]},"autoDesc":true,"filePathRelative":"C&CPP/浅析C++所有权机制.md","headers":[],"categoryList":[{"id":"135ccb","sort":10006,"name":"C&CPP"}]}');export{k as comp,d as data};
